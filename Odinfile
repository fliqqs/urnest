# install source (static source, generated C++ and omniidl_be) into $INST_SRC,
# install tools (hcp-split etc) into $INST_BIN
# ... note omnicxy/{cxy,omniidl_be} are moved up a level so they are in
# $INST_SRC/{cxy,omniidl_be}
%install!==(.)+cmd=(%installer.sh) (%hcp-gen.tar) (%idl-gen.tar) (%tools.tar):run

#build and run all tests
%all==%all.tree:leaves

%all.tree==<<
xju%all.tree
omnicxy%all.tree
hcp%all.tree
dion%all.tree
%tags
example%all.tree

%cxx-opts==<<
+inc_sp=(omnicxy)
+inc_sp=(.)
+inc_sp=(%hcp-gen)
+inc_sp=(%idl-gen)
+inc_sp=(/usr/include/freetype2)
+ld_flags=-lpthread

%idl-opts==<<
+inc_sp=(.)
+inc_sp=(omnicxy)
+cxy='-exju::Exception=xju/Exception.hh'
+hcp-split=(hcp%hcp-split)

%hcp-opts==<<
+G +hcp-split=(hcp%hcp-split)

%hcp-gen==Odinfile%hcp-gen.virdir_spec:vir_dir

%hcp-gen.virdir_spec == <<
%xju==./xju/Odinfile%hcp-gen
%hcp==./hcp/Odinfile%hcp-gen
%cxy==./omnicxy/cxy/Odinfile%hcp-gen
%dion==./dion/Odinfile%hcp-gen

%idl-gen==Odinfile%idl-gen.virdir_spec:vir_dir

%idl-gen.virdir_spec == <<
%hcp==./hcp/Odinfile%idl-gen
%cxy==./omnicxy/cxy/Odinfile%idl-gen
%xju==./xju/Odinfile%idl-gen

%tags==%all.list-of-tags:merged-tags

%all.list-of-tags==<<
.:merged-tags
xju%tags
hcp%tags
omnicxy/cxy%tags
dion%tags

%hcp-gen.tar==()+cmd=(%vir-tree-tar.sh) (%hcp-gen)+need=(%hcp-gen:vir_tree_list):stdout

%idl-gen.tar==()+cmd=(%vir-tree-tar.sh) (%idl-gen)+need=(%idl-gen:vir_tree_list):stdout

%tools.tar==()+cmd=(%vir-tree-tar.sh) (%tools-inst-bin.vir_dir)+need=(%tools-inst-bin.vir_dir:vir_tree_list):stdout

%vir-tree-tar.sh == ! <<
#!/bin/sh
cd "$1" &&
tar chf - .

%tools-inst-bin.vir_dir == %tools-inst-bin.vir_dir_spec:vir_dir

%tools-inst-bin.vir_dir_spec == <<
%hcp-split==hcp%hcp-split
%hcp-parse-file==hcp%hcp-parse-file
%hcp-what-is-at==hcp%hcp-what-is-at
%hcp-tags==hcp%hcp-tags
%hcp-tags-merge==hcp/hcp-tags-merge
%hcp-scope-at==hcp%hcp-scope-at
%hcp-map-to-source==hcp%hcp-map-to-source
%hcp-remove-throw-clauses==hcp%hcp-remove-throw-clauses
%tag-lookup-service==hcp/tags%tag-lookup-service
%hcp-import-symbol-at==hcp/tags%hcp-import-symbol-at
%hcp-find-def==hcp/tags%hcp-find-def
%hcp-symbol-completions==hcp/tags%hcp-symbol-completions
%hcp-symbol-at==hcp/tags%hcp-symbol-at
%cosnaming-client==omnicxy/cosnaming-client
%monitor-ntp-sync==xju/linux/ntpd/monitor-ntp-sync
%monitor-disk-space==xju/linux/disk-space/monitor-disk-space
%monitor-logins==xju/linux/wtmp/monitor-logins


%installer.sh == ! <<
#!/bin/sh
set -x &&
hcpgentar="$1" && shift &&
idlgentar="$1" && shift &&
toolstar="$1" && shift &&
sourcedir="$(pwd)" &&
if ! test -n "$INST_BIN"
then
  echo "ERROR: set INST_BIN environment variable to tools destination directory, e.g. /usr/local/bin" &&
  false
fi &&
if ! test -n "$INST_SRC"
then
  echo "ERROR: set INST_SRC environment variable to header destination directory, e.g. /usr/local/include" &&
  false
fi &&
test -r "$hcpgentar" &&
test -r "$idlgentar" &&
test -r "$toolstar" &&
test -r "$sourcedir" &&
test -d "$sourcedir" &&
cat "$toolstar" | (cd "$INST_BIN" && tar xvf - ) &&
cat "$idlgentar" | (cd "$INST_SRC" && tar xvf - ) &&
cat "$hcpgentar" | (cd "$INST_SRC" && tar xvf - ) &&
sources=$(cd "$sourcedir" && find xju hcp \( -name __pycache__ -prune \) -o \( -name '*.idl' -o -name '*.hh' -o -name '*.cc' -o -name '*.h' -o -name '*.py' -o -name '*.html' -o -name '*.js' -o -name '*.css' \) -print ) &&
(cd "$sourcedir" && tar cf - $sources) | (cd "$INST_SRC" && tar xvf - ) &&
sources=$(cd "$sourcedir/omnicxy" && find cxy -name '*.idl' -o -name '*.hh' -o -name '*.cc' -o -name '*.h' && find omniidl_be -name '*.py' -o -name '*.sh' ) &&
(cd "$sourcedir/omnicxy" && tar cf - $sources) | (cd "$INST_SRC" && tar xvf - ) &&
headers=$(find "$INST_SRC" -name '*.hh' -print) &&
"$INST_BIN/hcp-tags" $headers > "$INST_SRC/hcp-tags.json" &&
set +x &&
echo "Installation Successfull"

%python3-xju.whl == %python3-xju+member='xju-1.2.2-py3-none-any.whl':extract_file
%python3-xju.tar.gz == %python3-xju+member='xju-1.2.2.tar.gz':extract_file

%python3-xju==()+cmd=(%build-python3-xju.sh)+cmd=(.) (MIT-LICENCE) (README.py.rst) '1.2.2'+need=(xju%pytest.tree:leaves) +need=(xju/cmc%all):exec.files



%build-python3-xju.sh==!<<XXXX
#!/bin/sh
set -ex
src_dir="$1"
licence="$2"
readme="$(cat $3)"
rev="$4"
mkdir xju-$rev
(
  cd $src_dir &&
  tar cf - xju/*.py xju/*.py.test xju/cmc/*.py xju/cmc/*.py.test xju/cmc/io/*.py xju/cmc/io/*.py.test
) |
(cd xju-$rev && tar xvf - )
touch xju-$rev/xju/py.typed
mkdir xju-$rev/xju-$rev.dist-info
cat > xju-$rev/xju-$rev.dist-info/METADATA <<EOF
Metadata-Version: 2.1
Name: xju
Version: $rev
Summary: xju library
Author: Trevor Taylor
Project-URL: Homepage, https://github.com/urnest/urnest
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 5 - Production/Stable
Requires-Python: >=3.10
License-File: LICENCE
Description-Content-Type: text/x-rst

$readme
EOF
cp xju-$rev/xju-$rev.dist-info/METADATA xju-$rev/PKG-INFO
cp $licence xju-$rev/xju-$rev.dist-info/LICENCE
cat > xju-$rev/xju-$rev.dist-info/WHEEL <<EOF
Wheel-Version: 1.0
Generator: sh
Root-Is-Purelib: true
Tag: py3-none-any
EOF
cat > xju-$rev/xju-$rev.dist-info/top_level.txt <<EOF
xju
EOF
(
cd xju-$rev
find xju xju-$rev.dist-info -type f -print |
while read n
do
  sum=$(sha256sum $n)
  sum=$(echo $sum | awk '{print $1}')
  size=$(cat $n | wc -c)
  echo "$n,sha256=$sum,$size"
done > RECORD
echo "xju-$rev.dist-info/RECORD,," >> RECORD
mv RECORD xju-$rev.dist-info/
zip -r ../xju-$rev-py3-none-any.whl xju xju-$rev.dist-info
)
tar czf xju-$rev.tar.gz xju-$rev
XXXX
