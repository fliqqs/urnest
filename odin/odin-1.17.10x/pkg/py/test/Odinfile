%all==%all-tests.tree:leaves

%all-tests.tree==<<
%test1
%test2
%test3
%test4
%test5
%test7
%test8
%test8b
%test8c
%test8d
%test9
%test1b
%test-simple
%test-stderr-1
%test-stderr-2
%test-stderr-3
%test-stderr-4
%test-stderr-5
%test-stderr-6
%test-stderr-7
%test-stderr-8

%test1==(%test1.got)+cmd=(%test1.sh) (%test1.expect:list:ls):stdout

%test1.sh==! <<
#/bin/sh
sort -u <"$1" > want &&
sort -u > got &&
diff -b want got >&2

%test1.got==x.py:py_rd+py_sp=(sd):py_import_all:ls

%test1.expect==<<
y.py
b/__init__.py
c/__init__.py
d/__init__.py
d/z.py
b/q.py
i.py

%test1b==x.py+py_sp=(sd):py3.exec.output

%test2==()+py=(x.py)+py_sp=(sd):py3.stdout

%test3==()+cmd=(%cmp.sh) (%test3.want) (%test3.got):stdout

%test3.want==<<
fred

%test3.got==(t1.py)+cmd='fred'+py_sp=(sd):py3.exec.output

%cmp.sh==! <<
#/bin/sh
sort -u <"$1" > want &&
sort -u <"$2" > got &&
diff -b want got >&2


%test4==(%test4.got)+cmd=(%test1.sh) (%test4.expect:list:ls):stdout

%test4.got==x.py:py_rd:py_import_all:ls

%test4.expect==<<
y.py
b/__init__.py
c/__init__.py
d/__init__.py
d/z.py
b/q.py
i.py

%test5==(%test5.got)+cmd=(%test1.sh) (%test5.expect:list:ls):stdout

%test5.got==x.py:py_rd+py_sp=(se/a.egg):py_import_all:ls

%test5.expect==<<
y.py
b/__init__.py
c/__init__.py
d/__init__.py
d/z.py
b/q.py
se/a.egg
i.py

%test6==()+cmd=(%cmp.sh) (%test6.want) (%test6.got):stdout

%test6.want==<<
e1
x: OK

%test6.got==xe.py+py_sp=(sd)+py_sp=(se/a.egg):py3.exec.output

%test-simple==(simple.py):py3.exec.output

%test7==(%test7.got)+cmd=(%test7.sh) (%test7.expect:list:ls):stdout

%test7.sh==! <<
#/bin/sh
sort -u <"$1" > want &&
sort -u > got &&
diff -b want got >&2

%test7.got==t2.py:py_rd+py_sp=(sd):py_import_all:ls

%test7.expect==<<
r1.py
r3/__init__.py
r3/r4/__init__.py

#
# python is a convoluted with its package importing v __init__.py, which
# can define stuff for that package and is often used to "pull up" submodule
# definitions to __init__.py package level
# But sub-packages can import other sub-packages (or the definitions from
# the package itself.
# It turns out sub-packages, when importing other sub-packages or definitions
# from the package itself, ignore __init__.py.
# test8 sets up such an arrangement to verify out import handling follows
# this rule. (If we don't ignore __init__.py we get circular dependencies, but
# it needs to only be ignore for imports from sub-packages.)
#
%test8==(%test8.got)+cmd=(%test8.sh) (%test8.expect:list:ls):stdout

%test8.sh==! <<
#/bin/sh
sort -u <"$1" > want &&
sort -u > got &&
diff -b want got >&2

%test8.got==t8.py:py_rd:py_import_all:ls

%test8.expect==<<
pullup/__init__.py
pullup/a.py
pullup/b.py

%test8b==t8.py:py3.exec.output

%test8c==(%test8c.got)+cmd=(%test8c.sh) (%test8c.expect:list:ls):stdout
%test8c.sh==! <<
#/bin/sh
sort -u <"$1" > want &&
sort -u > got &&
diff -b want got >&2

%test8c.got==pullup/b.py+py_r=(.):py_import_all:ls

%test8c.expect==<<
pullup/a.py

%test8d==(%test8d.got)+cmd=(%test8.sh) (%test8d.expect:list:ls):stdout

# +py_r, the directory of the main python program, is the first place
# to look for imports. It is automatically calculated but can be overridden.
# Overriding can reduce dependency calculations, e.g. where tests are
# never in the same directory as source code there is no need to search the
# directory containg each test, since where tests are spread accross multiple
# directories the dependency calculation is officially different for each
# test directory. By explicitly specifying py_r say as a non-existent
# directory we avoid recalculating dependencies for each test directory.
#
# test8d verifies that we really are overriding the automatic value.
%test8d.got==t8.py+py_r=(pullup/altroot)+py_sp=(.):py_rd:py_import_all:ls

%test8d.expect==<<
pullup/__init__.py
pullup/altroot/pullup/a.py
pullup/b.py

%test9==(%test9.got)+cmd=(%test9.sh) (%test9.expect:list:ls):stdout

%test9.sh==! <<
#/bin/sh
sort -u <"$1" > want &&
sort -u > got &&
diff -b want got >&2

%test9.got==t2:py_rd+py_sp=(sd):py_import_all:ls

%test9.expect==<<
r1.py
r3/__init__.py
r3/r4/__init__.py


%test-stderr-1==()+cmd=grep '"test1 outputtest1 stderr"' (%toutput.zero):stdout
%test-stderr-2==()+cmd=grep '"test1 outputtest1 stderr"' (%toutput.one):stdout
%test-stderr-3==()+cmd=grep '"xtest1 stderr"' (%twarn.zero.w):stdout
%test-stderr-4==()+cmd=grep '"test1 output "' (%twarn.one):stdout
%test-stderr-5==()+cmd=grep '"xtest1 stderr"' (%terror.zero):stdout
%test-stderr-6==()+cmd=grep '"xtest1 stderr"' (%terror.one):stdout
%test-stderr-7==()+cmd=grep '"test1 output "' (%ttrace.zero):stdout
%test-stderr-8==()+cmd=grep '"test1 output "' (%ttrace.one):stdout

%toutput.zero==(%test1.py)+cmd='0':py3.exec.output
%toutput.one==(%test1.py)+cmd='1':py3.exec.output:err
%twarn.zero.o==(%test1.py)+cmd='0'+stderr=warn:py3.exec.output
%twarn.zero.w==(%test1.py)+cmd='0'+stderr=warn:py3.exec.output:warn
%twarn.one==(%test1.py)+cmd='1'+stderr=warn:py3.exec.output:err
%terror.zero==(%test1.py)+cmd='0'+stderr=error:py3.exec.output:warn
%terror.one==(%test1.py)+cmd='1'+stderr=error:py3.exec.output:err
%ttrace.zero==(%test1.py)+cmd='0'+stderr=trace:py3.exec.output
%ttrace.one==(%test1.py)+cmd='1'+stderr=trace:py3.exec.output:err

%test1.py== !<<
#!/bin/env python
import sys
sys.stderr.write('x')
sys.stderr.flush()
sys.stdout.write('test1 output')
sys.stdout.flush()
sys.stderr.write('test1 stderr\n')
sys.stdout.write(' \n')
sys.exit(int(sys.argv[1]))
