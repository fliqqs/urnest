#
# Python
#

*.py => :py;

# REVISIT: dependencies on modules inside .egg files are no detected
*.egg => :egg;

:py 'python source file'? => :FILE;

:egg 'python egg archive'? => :FILE;

:py_import.view_desc 'view description of python imported files' => :FILE;

:py_import 'list of directly python imported files'? => :LIST;

:py_import_all 'list of transitively python imported files'? => :LIST;

:py.stdout 'output from a python script run'? => :stdout;

:py.output 'output files from a python script run'? => :output;

#
# :py.exec is created regardless of exit status of test run, with:
#   :py.exec/files.tar the files produced by the run, and either
#   :py.exec/output - the stdout+stderr if command exits with 0 status, or
#   :py.exec/status - file containing status as single line, eg 0
#
:py.exec 'results of a python script run'? => :DERIVED-DIRECTORY;

:py.exec.output ':py.exec/output where :py.exec/status is 0'? => :REFERENCE;

:py.exec.files ':py.exec/files.tar where :py.exec/status is 0'? => :REFERENCE;

+py_sp 'name of a directory in a PYTHONPATH'? => :ls;

+ignore 'egrep expression for imports to ignore'? => :ls;

+py 'python file to execute'? => :first;

$ODIN_PY_IGNORE 'egrep expression for python imports to ignore, e.g. "^os$|^sys$"' = '';

$ODIN_PYTHONPATH 'colon-separated list of directories to search for python imports, after searching +py_sp directories, e.g. /usr/local/python2.7/site-packages' = '';

EXEC (py-import.py) (:py) (:py:dir)@ (+py_sp) (+ignore)
   => (:py_import.view_desc);

COLLECT (:py_import.view_desc :view)
   => (:py_import);

COLLECT (:py_import :map=:py_import_all) (:py_import)
   => (:py_import_all);

#:FILE is stdin
EXEC (py.pipe.run.sh) (:FILE) (+py) (+cmd :ls) (+py:dir)@ (+py_sp) NEEDS (+cmd) (+need) (+py:py_import_all)
   => (:py.stdout) (:py.output);


# :FILE is stdin to command
EXEC (py.exec.sh) (:py) (+cmd :ls) (:env) (+py:dir)@ (+py_sp)
  NEEDS (+cmd) (+need) (:py:py_import_all)
  => (:py.exec);

:py.exec.output.ref ':py.exec.output ref' => :FILE;
:py.exec.files.ref ':py.exec.files ref' => :FILE;

EXEC (py.exec.output.sh) (:py.exec/output) (:py.exec/status) (:py.exec:name)
  => (:py.exec.output.ref);

READ-REFERENCE (:py.exec.output.ref) => (:py.exec.output);

EXEC (py.exec.files.sh) (:py.exec/files.tar) (:py.exec/status) (:py.exec:name) (:py.exec/output)
  => (:py.exec.files.ref);

READ-REFERENCE (:py.exec.files.ref) => (:py.exec.files);
