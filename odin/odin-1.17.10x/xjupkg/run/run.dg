# Output Object Types

:run 'a script that runs a specified command line from a specified directory' => :EXECUTABLE;
:run2 'a script that runs a specified file with specified arguments' => :EXECUTABLE;

:stdout 'standard output from a test run'? => :PIPE;

:output 'output files from a test run'? => :DERIVED-DIRECTORY;

:env 'environment in shell format'? => :FILE;

#
# :exec is created regardless of exit status of test run, with:
#   :exec/files.tar the files produced by the run, and either
#   :exec/output - the stdout+stderr if command exits with 0 status, or
#   :exec/status - file containing status as single line, eg 0
#
:exec 'results of a test run'? => :DERIVED-DIRECTORY;

:exec.output ':exec/output where :exec/status is 0'? => :REFERENCE;

:exec.files ':exec/files.tar where :exec/status is 0'? => :REFERENCE;

# Parameter Types

+cmd 'host command'? => :LIST;

+need 'run dependency'? => :LIST;


# Environment Variables

$ODIN_EXEC_PATH 'PATH to install when executing command, colon separated' = '/bin:/usr/bin';
$ODIN_EXEC_LD_LIBRARY_PATH 'shared library load path to install when executing command, colon separated' = '';

# Tools

# FILE here is directory to change to before running (+cmd) command
EXEC (run.sh) (:FILE) (+cmd :ls) NEEDS (+cmd)& (+need)
   => (:run);

# FILE here is an executable file; (+cmd) supplies the arguments
EXEC (run2.sh) (:FILE) (+cmd :ls) NEEDS (+cmd)& (+need)
   => (:run2);

EXEC (pipe.run.sh) (:FILE) (+cmd :ls) NEEDS (+cmd) (+need)
   => (:stdout) (:output);

# :FILE is stdin to command
EXEC (exec.sh) (:FILE) (+cmd :ls) (:env) NEEDS (+cmd) (+need)
  => (:exec);

:exec.output.ref ':exec.output ref' => :FILE;
:exec.files.ref ':exec.files ref' => :FILE;

EXEC (exec.output.sh) (:exec/output) (:exec/status) (:exec:name)
  => (:exec.output.ref);

READ-REFERENCE (:exec.output.ref) => (:exec.output);

EXEC (exec.files.sh) (:exec/files.tar) (:exec/status) (:exec:name) (:exec/output)
  => (:exec.files.ref);

READ-REFERENCE (:exec.files.ref) => (:exec.files);

EXEC (env.sh) (env.cc:exe) ($ODINCACHE/ENV) => (:env);
