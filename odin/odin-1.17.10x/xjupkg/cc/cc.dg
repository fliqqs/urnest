# Source Types

*.c => :c;

*.exe => :exe;

*.c.sm  => :c.sm;


# Input Object Types

:c 'C source code'? => :o_src :hash_incable;

:c.sm 'system model for a C program'? => :FILE;


# Intermediate Object Types

:c.one.list 'list of a single C file' => :c.code.list;

:c.sm.list 'list of files in a C system model' => :sm.list;

:c.code.list 'list of :o from c.sm / .c' => :code.list;

# Output Object Types

:exe 'executable binary'? => :FILE;

:fmt 'formatted version' => :PIPE;

:c.h 'C function declarations' => :FILE;


# Parameter Types

+define 'macro definition'? => :cat;

+debug 'debug switch'? => :first;

+optimize 'optimization flag'? => :first;

+prof 'profiling flag'? => :first;

+eprof 'profiling flag for linking'? => :first;

+cc_home 'directory containing the C compiler'? => :first;

+cc 'name of the C compiler'? => :first;

+cc_flags 'flags for cc'? => :cat;

+ld_flags 'flags for ld'? => :cat;

+inc_sp 'name of a directory in an include search path'? => :ls;

+ignore 'egrep expression for includes to ignore'? => :ls;

+purify 'purify flag'? => :cat;

+home 'home directory for relative pathnames' => :first;


# Environment Variables

$ODIN_CC_HOME 'directory containing the C compiler' = '';

$ODIN_CC_DEBUGF 'debug flag for C compiler' = '-g';

$ODIN_CC_I 'directory containing default C include files' = '/usr/include';


# Tools

COLLECT (:c)
   => (:c.one.list);

READ-LIST (:c.sm)
   => (:c.sm.list);

COLLECT (:c.sm.list :recurse=:c.sm.list)
   => (:c.code.list);

EXEC (cc.sh) (:c) (:c :dir)@ (+inc_sp) (+cc_home)@ (+gnu) (+debug) (+prof)
 (+optimize) (+define) (+cc) (+cc_flags)
 NEEDS (:c:lookup=:hash_inc_all)
   => (:o);

EXEC (ld.sh) (:c.code.list:a) (:library_flags)
 (+cc_home)@ (+gnu) (+purify) (+debug) (+prof) (+eprof) (+cc) (+ld_flags)
 NEEDS (:libraries)
   => (:exe);

EXEC (fmt.c.sh) (:c)
   => (:fmt);

EXEC (c.h.sh) (:c) (:c :dir)@ (header_c.sed)
   => (:c.h);


# although we have general hash_inc package, we keep :all_c_inc because it
# is part of the built-in derivation graph
#
:c_inc.view_desc 'view description of C-style included files' => :FILE;

:c_inc 'list of potential C-style included files' => :LIST;

:all_c_inc 'list of C-style transitively included files' => :LIST;

EXEC (c_inc.sh) (:FILE) (:FILE :dir)@ (+home)@ (+inc_sp) (+ignore)
   => (:c_inc.view_desc);

COLLECT (:c_inc.view_desc :view)
   => (:c_inc);

COLLECT (:c_inc :map=:all_c_inc) (:c_inc)
   => (:all_c_inc);

