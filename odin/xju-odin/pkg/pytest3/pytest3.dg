#
# pytest3
#

:pytest3.output ':pytest3.exec/output where :pytest3.exec/status is 0. i.e. output printed by a successful test run'? => :REFERENCE;

:pytest3.files ':pytest3.exec/files.tar where :pytest3.exec/status is 0. i.e. files generated by a successful test run'? => :REFERENCE;

:pytest3.cov ':pytest3.exec/cover where :pytest3.exec/status is 0. i.e. files generated by a successful test run'? => :REFERENCE;

#
# :pytest3.exec is created regardless of exit status of test run, with:
#   :pytest3.exec/files.tar the files produced by the run
#   :pytest3.exec/status - file containing status as single line, eg 0, and either
#   :pytest3.exec/output - the stdout+stderr* if command exits with 0 status, or
#   :pytest3.exec/errors - the stderr* if command exits with non-zero status
#
# * depending on +stderr, see below
#
:pytest3.exec 'results of a pytest-3 script run'? => :DERIVED-DIRECTORY;

+pytest3conf 'config file, default $ODIN_PYTEST3_CONF' => :first;

+stderr 'what to do with command stderr: "output" to combine with stdout (default), "warn" to generate warnings, "error" to display as errors if command fails and command trace otherwise, "trace" to show as command trace'? => :first;

+env 'an environment variable to set when running test, e.g. TEST_PORT=9999'? => :ls;

$ODIN_PYTEST3 'pytest-3 command' = 'pytest -x -q -s --basetemp=./pytesttmp';

$ODIN_PYTEST3_CONF 'pytest-3 config file' = '/dev/null';

$ODIN_PYTEST3_PLUGINS 'PYTEST_PLUGINS to set for each run' = '';

EXEC (pytest3.exec.sh) (+pytest3conf) (:py) (:env) (+stderr) (+py:dir)@ (+py_sp) (+env) (+py_nocov)
  NEEDS (+need) (:py:py_import_all) (:py:mod.mypy3) (:py:py.stylecheck) (:py:py_import_all:map=:py.stylecheck)
  => (:pytest3.exec);

:pytest3.output.ref ':pytest3.output ref' => :FILE;
:pytest3.files.ref ':pytest3.files ref' => :FILE;
:pytest3.cov.ref ':pytest3.cover ref' => :FILE;

EXEC (pytest3.output.sh) (:pytest3.exec/output) (:pytest3.exec/errors) (:pytest3.exec/status) (:pytest3.exec:name) (+stderr)
  => (:pytest3.output.ref);

READ-REFERENCE (:pytest3.output.ref) => (:pytest3.output);

EXEC (pytest3.files.sh) (:pytest3.exec/files.tar) (:pytest3.exec/errors) (:pytest3.exec/status) (:pytest3.exec:name) (:pytest3.exec/output) (+stderr)
  => (:pytest3.files.ref);

READ-REFERENCE (:pytest3.files.ref) => (:pytest3.files);

EXEC (pytest3.cov.sh) (:pytest3.exec/pytest.py3.cov) (:pytest3.exec/output) (:pytest3.exec/errors) (:pytest3.exec/status) (:pytest3.exec:name) (+stderr)
  => (:pytest3.cov.ref);

READ-REFERENCE (:pytest3.cov.ref) => (:pytest3.cov);
