x test-JoiningIterator

- replace xju::Exception with parser specific exception, that
  uses Parser* as context, to defer string creation until exception
  is actually formatted
- get rid of includeAllExceptionContext (make it always true)

- on parse failure, output the branch that got furthest
  - note that only exceptions are xju::Exception thrown explicitly in
    parser.cc/hh
  - replace with Malfomed exception that has at and can carry
    other fail branches

- also to get better errors need to make use of keywords, eg
  if have "class" but what follows is not a class, want that error
  message, not the error message that tries to parse eg function at
  that point. ie fail parseFunction because function cannot start with
  keyword class (or template, namespace, enum etc)
  - try using "longest branch" as error, combined with prepending
    ! parseKeyword() to parseFunction

x speed parsing by caching results <at,parser> => PV or exception
  stats:
xju@xjutv:/data/xju/u1/urnest/hcp$ time ./hcp-parse-file test/xju/JoiningIterator.hcp 
end at line 146 column 1

real    0m2.320s
user    0m2.100s
sys     0m0.024s

xju@xjutv:/data/xju/u1/urnest/hcp$ ./hcp-parse-file -t test/xju/JoiningIterator.hcp  | wc -l
10391

xju@xjutv:/data/xju/u1/urnest/hcp$ ./hcp-parse-file -t test/xju/JoiningIterator.hcp  | fgrep '[ parse comments at line 139 column 22' | wc -l
40

... after adding cache...

xju@xjutv:/data/xju/u1/urnest/hcp$ time ./hcp-parse-file test/xju/JoiningIterator.hcp 
end at line 146 column 1

real    0m0.926s
user    0m0.908s
sys     0m0.008s
xju@xjutv:/data/xju/u1/urnest/hcp$ ./hcp-parse-file -t test/xju/JoiningIterator.hcp  | wc -l
2055
xju@xjutv:/data/xju/u1/urnest/hcp$ ./hcp-parse-file -t test/xju/JoiningIterator.hcp  | fgrep '[ parse comments at line 139 column 22' | wc -l
1

- still very slow, need to profile or at least look through the output
  to see why
    x parse namespace and anon-namespace before function, object as
      namespace starts with keyword
         ODINVERIFYLEVEL=0 odin maxbuilds=4 "hcp-parse-file" && time ./hcp-parse-file test/xju/JoiningIterator.hcp && ./hcp-parse-file -t test/xju/JoiningIterator.hcp  | wc -l
         end at line 146 column 1

         real	0m0.891s
         user	0m0.864s
         sys	0m0.016s
         2001


    ~ group keywords together? That would make it harder to read the
      code
    - create parsers for such keywords as namespace, template, class
      so can cache results
      - bundle them up into parseKeyword, and add a operator!()
        then make parseFunction start with !parseKeyword
       
    x probably slow through use of C++ exceptions, could switch to using
      return types, noting that at the moment we only have a single
      exception type (xju::Exception)... note to support tools eg
      context-at-point we probably need something more sophisticated
      than xju::Exception but worry about that later (actually above
      proposes to replace with Malformed)
      x think just need to redefine Parser methods to throw() and
        return the CachedResult type? Could rename it to ParseResult?
      x perhaps fork a version to test performance difference
branch nothrow, got about 20% better:
xju@xjutv:/data/xju/u1/urnest/hcp$ ODINVERIFYLEVEL=0 odin maxbuilds=4 "hcp-parse-file" && time ./hcp-parse-file test/xju/JoiningIterator.hcp && ./hcp-parse-file -t test/xju/JoiningIterator.hcp  | wc -l
end at line 146 column 1

real    0m0.714s
user    0m0.700s
sys     0m0.004s
1951

    ~ perhaps also look at deferring creation of exception strings until
      actually needed... but first get profiling data, might need to
      parse many times to get decent stats

    x saved lots of time by reworking the -v (includeAllExceptionContext)
      handling, since it was adding and discarding lots of context

    x reworked to defer generating context strings until exception
      printed:

-*- mode: compilation; default-directory: "/home/xju/urnest/hcp/" -*-
Compilation started at Sat Jun 28 23:11:00

ODINVERIFYLEVEL=0 odin maxbuilds=4 "hcp-parse-file" && time ./hcp-parse-file test/xju/JoiningIterator.hcp && ./hcp-parse-file -t test/xju/JoiningIterator.hcp  | wc -l
end at line 146 column 1

real	0m0.160s
user	0m0.124s
sys	0m0.008s
1951

    - above includes all exception detail, except that "or" only keeps
      the term that got furthest, alas the resulting error messages
      are too verbose (see test-parser.cc), ideas:
        - context given for "and" should not go past the term where we
          actually failed
          - if exception context was a PR we could dynamically make
            one that included just the relevant part; we could also
            do better with the "or" case
          - perhaps revisit which parsers add context, perhaps go back
            to having just named parsers add context; but also keep
            the "leaf" context
    - do first pass without creating any exception detail, then
      come back and reparse from where we went wrong in order to get
      exception detail... maybe

    