%all==(%all.tree:leaves)

%all.tree==<<
%all-tests.tree
tag-lookup-service

tag-lookup-service==tag-lookup-service.cc+(../..%cxx-opts)+lib='omniDynamic4' 'omniORB4' 'omnithread':auto.cxx.exe


%all.idl.sm==<<
DirName.idl
AbsolutePath.idl
FileName.idl
LineNumber.idl
UnqualifiedSymbol.idl
Lookup.idl
NamespaceName.idl
Location.idl

==(%all.idl.sm)+inc_sp=(../..)+hcp-split=(../hcp-split)+hpath='hcp/tags'+cxy='-exju::Exception=xju/Exception.hh':omnicxy.targets

# note some .hcp override idl-generated code, redirecting to xju::path types
#
%hcp-gen==.:dir.hcp.list+hpath='hcp/tags':hcp-split-virdir-specs:cat:vir_dir

%test-Namespace==(test-Namespace.cc)+(../..%cxx-opts):auto.cxx.exe
%test-splitSymbol==(test-splitSymbol.cc)+(../..%cxx-opts):auto.cxx.exe
%test-TagLookupService==(test-TagLookupService.cc)+(../..%cxx-opts):auto.cxx.exe
%test-augmentRootNamespace==(test-augmentRootNamespace.cc)+(../..%cxx-opts):auto.cxx.exe


%all-tests.tree==<<
()+cmd=(%test-Namespace):exec.output
()+cmd=(%test-splitSymbol):exec.output
()+cmd=(test-getIdentifierRefAt.cc+(../..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(%test-augmentRootNamespace)+cmd=(../test-hcp-tags/test-1.json)+cmd=(../test-hcp-tags/test-4.json):exec.output
()+cmd=(%test-TagLookupService):exec.output
()+cmd=(test-makeRelativeIfPossible.cc+(../..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(%test-importSymbolAt)+cmd=(%test-importSymbolAt-x)+cmd=(%test-importSymbolAt-y)+cmd=(%test-importSymbolAt-z)+cmd=(%test-importSymbolAt-a)+cmd=(%test-importSymbolAt-x2)+cmd=(%test-importSymbolAt-y2):exec.output

%test-importSymbolAt==test-importSymbolAt.cc+(../..%cxx-opts):auto.cxx.exe

%test-importSymbolAt-x==<<
class A : class B { F c;
  void c() { Q::Z z; }
};

%test-importSymbolAt-y==<<
#include <B.hh>
class A : class B { F c;
  void c() { Q::Z z; }
};

%test-importSymbolAt-z==<<
#include <B.hh>
#include </d1/F.hh>
class A : class B { F c;
  void c() { Q::Z z; }
};

%test-importSymbolAt-a==<<
#include <B.hh>
#include </d1/F.hh>
#include <Q/Z.hh> //impl
class A : class B { F c;
  void c() { Q::Z z; }
};

%test-importSymbolAt-x2==<<
// abstract
//
class A : class B { F c;
  void c() { Q::Z z; }
};

%test-importSymbolAt-y2==<<
// abstract
//
#include <B.hh>
class A : class B { F c;
  void c() { Q::Z z; }
};

