// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#include <hcp/tags/Namespace.hh>

#include <hcp/parser.hh> //impl
#include <utility>

#include <xju/stringToUInt.hh> //impl
#include <hcp/ast.hh> //impl
#include "xju/assert.hh" //impl
#include <string>
#include <xju/file/read.hh> //impl
#include <xju/path.hh>
#include <hcp/tags/splitSymbol.hh> //impl

namespace hcp
{
namespace tags
{

namespace
{
typedef hcp_parser::PR PR_;
typedef hcp_parser::IR IR_;

PR_ eatWhite_{hcp_parser::zeroOrMore()*hcp_parser::whitespaceChar()};
PR_ doubleQuote_{hcp_parser::doubleQuote()};
PR_ stringValue{hcp_parser::parseUntil(doubleQuote_)};
struct SymbolTag{};
typedef hcp_ast::TaggedItem<SymbolTag> Symbol;
PR_ symbol{new hcp_parser::NamedParser<Symbol>(
    "symbol",
    stringValue)};
struct FileNameTag{};
typedef hcp_ast::TaggedItem<FileNameTag> ParsedFileName;
PR_ fileName{
  new hcp_parser::NamedParser<ParsedFileName>(
    "file name",
    stringValue)};
struct HeaderNameTag{};
typedef hcp_ast::TaggedItem<HeaderNameTag> ParsedHeaderName;
PR_ headerName{
  new hcp_parser::NamedParser<ParsedHeaderName>(
    "file name",
    stringValue)};

class ParsedLineNumber : public hcp_ast::Item
{
public:
  ParsedLineNumber(std::vector<hcp_ast::IR> const& items) throw(xju::Exception):
      Item(items),
      lineNumber_(xju::stringToUInt(hcp_ast::reconstruct(*this)))
  {
  }
  hcp::tags::LineNumber const lineNumber_;
  operator hcp::tags::LineNumber() const throw()
  {
    return lineNumber_;
  }
};
  
PR_ digit{hcp_parser::charInRange('0','9')};
PR_ lineNumber{new hcp_parser::NamedParser<ParsedLineNumber>(
                "line number",
                // we do not use parse::atLeastOne as it uses
                // Item, which is redundent
                digit+hcp_parser::zeroOrMore()*digit)};

struct ParsedHeaderTag{};
typedef hcp_ast::TaggedItem<ParsedHeaderTag> ParsedHeader;

PR_ openBrace=hcp_parser::parseLiteral("{");
PR_ closeBrace=hcp_parser::parseLiteral("}");
PR_ f=hcp_parser::parseLiteral("\"f\"");
PR_ l=hcp_parser::parseLiteral("\"l\"");
PR_ h=hcp_parser::parseLiteral("\"h\"");
PR_ colon=hcp_parser::parseLiteral(":");
PR_ comma=hcp_parser::parseLiteral(",");

struct LocationTag{};
typedef hcp_ast::TaggedItem<LocationTag> ParsedLocation;
PR_ location{new hcp_parser::NamedParser<ParsedLocation>(
              "location",
              openBrace+eatWhite_+f+eatWhite_+
              colon+eatWhite_+
              doubleQuote_+fileName+doubleQuote_+
              eatWhite_+comma+eatWhite_+
              l+eatWhite_+colon+eatWhite_+
              lineNumber+eatWhite_+closeBrace+eatWhite_)};

PR_ header{new hcp_parser::NamedParser<ParsedHeader>(
             "header",
             openBrace+eatWhite_+h+eatWhite_+
             colon+eatWhite_+
             doubleQuote_+headerName+doubleQuote_+
             eatWhite_+closeBrace+eatWhite_)};
              
PR_ openSquare{hcp_parser::parseLiteral("[")};
PR_ closeSquare{hcp_parser::parseLiteral("]")};

PR_ locations=hcp_parser::listOf(openSquare+eatWhite_,
                                 location|header,
                                 comma+eatWhite_,
                                 closeSquare+eatWhite_);

struct EntryTag{};
typedef hcp_ast::TaggedItem<EntryTag> Entry;
PR_ entry{new hcp_parser::NamedParser<Entry>(
    "entry",
    doubleQuote_+symbol+doubleQuote_+eatWhite_+
    colon+eatWhite_+locations)};

PR_ tagsFile=hcp_parser::listOf(
  openBrace+eatWhite_,
  entry,
  comma+eatWhite_,
  closeBrace+eatWhite_)+
  hcp_parser::endOfFile();

}


// augment rootNamespace with symbols from file
void augmentRootNamespace(Namespace& rootNamespace,
                          std::pair<hcp::tags::AbsolutePath, hcp::tags::FileName> const& tagsFileName,
                          bool const traceParser)
  throw(
    // pre: rootNamespace == rootNamespace@pre
    xju::Exception) {
  try {
    std::string const x(xju::file::read(tagsFileName));
    auto const root{hcp_parser::parseString(x.begin(),x.end(),
                                            tagsFile,traceParser)};

    for(auto x:root.items()) {
      if (x->isA<Entry>()) {
        Entry const& entry(x->asA<Entry>());
        Symbol const& symbol(hcp_ast::findOnlyChildOfType<Symbol>(entry));
        std::vector<hcp::tags::Location> locations;
        std::vector<hcp::tags::Header> headers;
        for(auto x:entry.items()) {
          if (hcp_ast::isA_<ParsedLocation>(x)) {
            ParsedLocation const& location(
              x->asA<ParsedLocation>());
            auto f(hcp_ast::findOnlyChildOfType<ParsedFileName>(location));
            auto l(hcp_ast::findOnlyChildOfType<ParsedLineNumber>(location));
            auto fileName(xju::path::split(reconstruct(f)));
            locations.push_back(hcp::tags::Location(
                                  fileName.first,
                                  fileName.second,
                                  l));
          }
          else if (hcp_ast::isA_<ParsedHeader>(x)) {
            ParsedHeader const& header(
              x->asA<ParsedHeader>());
            auto h(hcp_ast::findOnlyChildOfType<ParsedHeaderName>(header));
            auto headerName(reconstruct(h));
            headers.push_back(hcp::tags::Header(headerName));
          }
        }
        auto const ns(splitSymbol(reconstruct(symbol)));
        rootNamespace.addSymbol(ns.first,ns.second,locations,headers);
      }
    }
  }
  catch(xju::Exception& e) {
    std::ostringstream s;
    s << "augment namespace with symbols from tags file "
      << xju::path::str(tagsFileName);
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}
