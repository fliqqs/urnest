// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#include "xju/Exception.hh"
#include <string>
#include <utility>
#include <unistd.h>
#include "hcp/tags/Lookup.hh"
#include <vector>
#include "hcp/tags/AbsolutePath.hh"
#include "hcp/parser.hh" //impl
#include "hcp/scopeAt.hh" //impl
#include "hcp/tags/splitSymbol.hh" //impl
#include "xju/format.hh" //impl
#include <algorithm> //impl
#include <hcp/ast.hh> //impl
#include <hcp/getIrsAtEnd.hh> //impl
#include <hcp/parser.hh> //impl
#include <hcp/tags/IdentifierRef.hh> //impl
#include <hcp/tags/getIdentifierRefAt.hh> //impl
#include <hcp/tags/makeRelativeIfPossible.hh> //impl
#include <sstream> //impl
#include <xju/endsWith.hh> //impl
#include "xju/next.hh" //impl
#include "xju/startsWith.hh" //impl


namespace hcp
{
namespace tags
{
namespace
{
std::string targetOfHashInclude(
  hcp_ast::CompositeItem const& hashIncludeItem) throw()
{
  auto k(hcp_ast::findOnlyChildOfType<hcp_ast::TargetOfHashInclude>(
           hashIncludeItem));
  return reconstruct(k);
}
bool isAbsolute(IdentifierRef const& x) throw(){
  return (x._.size()>=2) &&
    (std::string(x._.begin(),x._.begin()+2)=="::");
}
// change .hcp fileName extension according to mapping, ie
// - find first mapping.first that is or is is an ancestor of fileName's
//   directory and use that mapping's extension
// - leaves fileName unchanged if no mapping matches
// - empty mapping.first matches all fileNames, ie can act as default
// - note that it is not possible to match absolute fileNames
//
std::string mapHcpExtension(
  std::string const& fileName,
  std::vector<std::pair<xju::path::RelativePath,xju::path::Extension> > const& mappings) throw() {
  if (xju::endsWith(fileName,std::string(".hcp")) &&
      !xju::startsWith(fileName,std::string("/")))
  {
    xju::path::RelativePath const directoryOfFileName(
      xju::path::relative_dirname(fileName));
    
    for(auto const mapping: mappings){
      auto const& prefix(mapping.first);
      if (prefix.size()<=directoryOfFileName.size() &&
          std::mismatch(prefix.begin(),prefix.end(),
                        directoryOfFileName.begin()).first==prefix.end()) {
        auto const& extension(mapping.second);
        return std::string(fileName.begin(),fileName.end()-4)+
          extension.value();
      }
    }
  }
  return fileName;
}

  
}



class UnknownSymbol : public xju::Exception
{
public:
  UnknownSymbol(xju::Exception const& e) throw():
      xju::Exception(e)
  {
  }
  UnknownSymbol(xju::Exception && e) throw():
      xju::Exception(e)
  {
  }
};

// return x adjusted to include the header defining the
// symbol at specified offset, parsing x with tracing if specified
std::string importSymbolAt(
  std::string const& x,
  size_t const offset,
  hcp::tags::Lookup& tagLookupService,
  std::vector<xju::path::AbsolutePath> const& hpath,
  std::vector<std::pair<xju::path::RelativePath,xju::path::Extension> > const& hcpMappings,
  bool const traceParsing) throw(
    UnknownSymbol,
    xju::Exception)
{
  try {
    IdentifierRef const identifier(
      getIdentifierRefAt(x, offset));

    hcp_parser::IRs const rirsAtEnd(getIrsAtEnd(x,offset,traceParsing));

    auto const scope_(scopeAt(rirsAtEnd));
    std::pair<std::vector<NamespaceName>,bool> scope({},scope_.second);
    std::transform(scope_.first.begin(),scope_.first.end(),
                   std::back_inserter(scope.first),
                   [](std::string const& x){return NamespaceName(x);});
    auto const fromScope(
      isAbsolute(identifier)?
      std::vector<NamespaceName>{}:
      scope.first);
    auto const ss(splitSymbol(identifier.value()));
    
    auto const foundIn(tagLookupService.lookupSymbol(fromScope,
                                                     ss.first,
                                                     ss.second));
    auto const l(foundIn.locations_);
    if (l.size()==0) { 
     std::ostringstream s;
      s << "symbol " << identifier
        << " from scope "
        << xju::format::join(fromScope.begin(),fromScope.end(),"::")
        << " not known to tag-lookup-service";
      throw UnknownSymbol(xju::Exception(s.str(),XJU_TRACED));
    }
    
    // turn location into relative path if $TAGS_HPATH locates it
    std::string const includeTarget(
      mapHcpExtension(
        makeRelativeIfPossible(
          std::make_pair(l[0].directory,l[0].file),hpath),
        hcpMappings));

    
    hcp_ast::I insertAt(x.begin(),x.end());

    hcp_parser::IRs irsAtEnd(rirsAtEnd.rbegin(),rirsAtEnd.rend());
    
    auto i(irsAtEnd.begin());
    // skip over initial comment block if any, then
    if (i!=irsAtEnd.end() &&
        (*i)->isA<hcp_ast::Comments>()){
      insertAt=(*i)->end();
      ++i;
    }
    // irsAtEnd will include all #includes, so check those for
    // already mentioned
    while(i!=irsAtEnd.end()){
      auto const j(std::find_if(i,irsAtEnd.end(),
                                [](hcp_ast::IR const x){
                                  return (*x).isA<hcp_ast::HashInclude>()||
                                    (*x).isA<hcp_ast::HashIncludeImpl>();
                                }));
      if (j != irsAtEnd.end()){
        auto const item(*j);
        if (item->isA<hcp_ast::HashInclude>()){
          std::string const existing(targetOfHashInclude(
                                       item->asA<hcp_ast::CompositeItem>()));
          if (includeTarget==existing){
            // already included
            return x;
          }
        }
        else if (scope.second && item->isA<hcp_ast::HashIncludeImpl>()){
          std::string const existing(targetOfHashInclude(
                                       item->asA<hcp_ast::CompositeItem>()));
          if (includeTarget==existing){
            // already included
            return x;
          }
        }
        insertAt=(*j)->end(); // remember last #include
        i=xju::next(j);
      }
      else{
        i=j;
      }
    }
    
    // insert #include <location> and add //impl if in "impl" scope
    std::string const hashInclude(
      scope.second?
      "#include <"+includeTarget+"> //impl\n":
      "#include <"+includeTarget+">\n");
    return std::string(x.begin(),insertAt.x_)+hashInclude+
      std::string(insertAt.x_,x.end());
  }
  catch(xju::Exception& e) {
    std::ostringstream s;
    s << "include the header defining the symbol at offset " << offset;
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}


