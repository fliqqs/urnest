// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#include <xju/Exception.hh>
#include <string>
#include <utility>
#include <unistd.h>
#include <hcp/tags/Lookup.hh>
#include <vector>
#include <hcp/tags/AbsolutePath.hh>
#include <hcp/parser.hh> //impl
#include <hcp/scopeAt.hh> //impl
#include <hcp/tags/splitSymbol.hh> //impl
#include <xju/format.hh> //impl
#include <algorithm> //impl
#include <hcp/ast.hh> //impl
#include <hcp/getIrsAtEnd.hh> //impl
#include <hcp/parser.hh> //impl
#include <hcp/tags/IdentifierRef.hh> //impl
#include <hcp/tags/getIdentifierRefAt.hh> //impl
#include <hcp/tags/makeRelativeIfPossible.hh> //impl
#include <sstream> //impl
#include <xju/endsWith.hh> //impl
#include <xju/next.hh> //impl
#include <xju/startsWith.hh> //impl
#include <xju/Tagged.hh> //impl

namespace hcp
{
namespace tags
{
namespace
{
std::string targetOfHashInclude(
  hcp_ast::Item const& hashIncludeItem) throw()
{
  auto k(hcp_ast::findOnlyChildOfType<hcp_ast::TargetOfHashInclude>(
           hashIncludeItem));
  return reconstruct(k);
}
bool isAbsolute(IdentifierRef const& x) throw(){
  return (x._.size()>=2) &&
    (std::string(x._.begin(),x._.begin()+2)=="::");
}
// change .hcp fileName extension according to mapping, ie
// - find first mapping.first that is or is is an ancestor of fileName's
//   directory and use that mapping's extension
// - leaves fileName unchanged if no mapping matches
// - empty mapping.first matches all fileNames, ie can act as default
// - note that it is not possible to match absolute fileNames
//
std::string mapHcpExtension(
  std::string const& fileName,
  std::vector<std::pair<xju::path::RelativePath,xju::path::Extension> > const& mappings) throw() {
  if (xju::endsWith(fileName,std::string(".hcp")) &&
      !xju::startsWith(fileName,std::string("/")))
  {
    xju::path::RelativePath const directoryOfFileName(
      xju::path::relative_dirname(fileName));
    
    for(auto const mapping: mappings){
      auto const& prefix(mapping.first);
      if (prefix.size()<=directoryOfFileName.size() &&
          std::mismatch(prefix.begin(),prefix.end(),
                        directoryOfFileName.begin()).first==prefix.end()) {
        auto const& extension(mapping.second);
        return std::string(fileName.begin(),fileName.end()-4)+
          extension.value();
      }
    }
  }
  return fileName;
}
//return start of x's trailing whitespace or x.end()
hcp_parser::I findTrailingWhitespace(hcp_parser::IR x) throw()
{
  if (hcp_ast::isA_<hcp_ast::WhiteSpace>(x)){
    return x->begin();
  }
  if (x->items().size()){
    return findTrailingWhitespace(x->items().back());
  }
  return x->end();
}

hcp_parser::PR before(){
  return hcp_parser::PR(
    hcp_parser::optional(hcp_parser::comments())+
    hcp_parser::zeroOrMore()*(
      hcp_parser::eatWhite()+(!(hcp_parser::hashInclude()|
                                hcp_parser::hashIncludeImpl())+
                              hcp_parser::hash()))+
    hcp_parser::zeroOrMore()*(hcp_parser::eatWhite()+
                              hcp_parser::parseHash()+
                              hcp_parser::parseUntil(
                                hcp_parser::parseLiteral("\n"))+
                              hcp_parser::parseLiteral("\n")));
}
     
}




class UnknownSymbol : public xju::Exception
{
public:
  UnknownSymbol(xju::Exception const& e) throw():
      xju::Exception(e)
  {
  }
  UnknownSymbol(xju::Exception && e) throw():
      xju::Exception(e)
  {
  }
};
struct IncludeTargetTag{};
typedef xju::Tagged<std::string,IncludeTargetTag> IncludeTarget;


// return x adjusted to include the header defining the
// symbol at specified offset, parsing x with tracing if specified
// also returns name of include target added to x, eg sys/types.h
//
std::pair<std::string,IncludeTarget> importSymbolAt(
  std::string const& x,
  size_t const offset,
  hcp::tags::Lookup& tagLookupService,
  std::vector<xju::path::AbsolutePath> const& hpath,
  std::vector<std::pair<xju::path::RelativePath,xju::path::Extension> > const& hcpMappings,
  bool const traceParsing,
  bool suppressImplMarker) /*throw(
    UnknownSymbol,
    xju::Exception)*/
{
  try {
    IdentifierRef const identifier(
      getIdentifierRefAt(x, offset));

    hcp_parser::IRs const rirsAtEnd(getIrsAtEnd(x,offset,traceParsing));

    auto const scope_(scopeAt(rirsAtEnd));
    std::pair<std::vector<NamespaceName>,bool> scope({},scope_.second);
    std::transform(scope_.first.begin(),scope_.first.end(),
                   std::back_inserter(scope.first),
                   [](std::string const& x){return NamespaceName(x);});
    auto const fromScope(
      isAbsolute(identifier)?
      std::vector<NamespaceName>{}:
      scope.first);
    auto const ss(splitSymbol(identifier.value()));
    
    auto const foundIn(tagLookupService.lookupSymbol(fromScope,
                                                     ss.first,
                                                     ss.second));
    auto const& l(foundIn.locations_);
    auto const& h(foundIn.headers_);
    if (l.size()==0&&h.size()==0) { 
     std::ostringstream s;
      s << "symbol " << identifier
        << " from scope "
        << xju::format::join(fromScope.begin(),fromScope.end(),"::")
        << " not known to tag-lookup-service";
      throw UnknownSymbol(xju::Exception(s.str(),XJU_TRACED));
    }
    
    // turn location into relative path if $TAGS_HPATH locates it
    std::string const includeTarget(
      l.size()?
      mapHcpExtension(
        makeRelativeIfPossible(
          std::make_pair(l[0].directory,l[0].file),hpath),
        hcpMappings):
      h[0]._);

    auto i(xju::next(rirsAtEnd.begin()));
    while(i!=rirsAtEnd.end()){
      auto const j(std::find_if(i,rirsAtEnd.end(),
                                [](hcp_ast::IR const x){
                                  return (*x).isA<hcp_ast::HashInclude>()||
                                    (*x).isA<hcp_ast::HashIncludeImpl>();
                                }));
      if (j != rirsAtEnd.end()){
        auto const item(*j);
        if (item->isA<hcp_ast::HashInclude>()){
          std::string const existing(targetOfHashInclude(
                                       item->asA<hcp_ast::Item>()));
          if (includeTarget==existing){
            // already included
            return std::make_pair(x,IncludeTarget(includeTarget));
          }
        }
        else if (scope.second && item->isA<hcp_ast::HashIncludeImpl>()){
          std::string const existing(targetOfHashInclude(
                                       item->asA<hcp_ast::Item>()));
          if (includeTarget==existing){
            // already included
            return std::make_pair(x,IncludeTarget(includeTarget));
          }
        }
        i=xju::next(j);
      }
      else{
        i=j;
      }
    }
    
    // insert #include <location> and add //impl if in "impl" scope
    std::string hashInclude(
      scope.second&&!suppressImplMarker?
      "#include <"+includeTarget+"> //impl\n":
      "#include <"+includeTarget+">\n");

    auto const insertAt(hcp_parser::parse(hcp_ast::I(x.begin(),x.end()),
                                          before()).second);
    if (insertAt.x_!=x.end() && *(insertAt.x_)!='\n')
    {
      hashInclude=hashInclude+"\n";
    }
    return std::make_pair(
      std::string(x.begin(),insertAt.x_)+hashInclude+
      std::string(insertAt.x_,x.end()),
      IncludeTarget(includeTarget));
  }
  catch(xju::Exception& e) {
    std::ostringstream s;
    s << "include the header defining the symbol at offset " << offset;
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}



