// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#include <hcp/tags/AbsolutePath.hh>
#include <hcp/tags/DirName.cdr.hh>

//override code generated by omnicxy from AbsolutePath.idl
namespace cxy
{

template<>
class cdr< ::hcp::tags::AbsolutePath >
{
public:
  static ::hcp::tags::AbsolutePath unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint32_t const length(cdr<uint32_t>::unmarshalFrom(s));
    std::vector<::hcp::tags::DirName> result;
    for(uint32_t i=0; i!=length; ++i) {
      result.push_back(cdr<::hcp::tags::DirName>::unmarshalFrom(s));
    }
    return ::hcp::tags::AbsolutePath(result);
  }
  static void marshal(::hcp::tags::AbsolutePath const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr<uint32_t>::marshal(x.size(),s);
    for(auto i=x.begin(); i!=x.end(); ++i) {
      cdr<::hcp::tags::DirName>::marshal(*i, s);
    }
  }
};

}
