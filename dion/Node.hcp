// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <dion/Date.hh>
#include <xju/Optional.hh>
#include <xju/assert.hh> //impl
#include <dion/job/Ids.hh>
#include <dion/job/Collector.hh>
#include <dion/job/Starter.hh>
#include <dion/job/Id.hh>

namespace dion
{
class Node
{
private:
  // we (directly or due to an input) are awaiting one or more
  // in-progress jobs in order to bring our state up to date.
  job::Ids awaiting_;
  Date verifiedAt_;

  // job in progress that will bring us up to date calculatingAt_.value()
  xju::Optional<Date> calculatingAt_;
  
public:
  Node(job::Ids awaiting,
       Date verifiedAt):
      awaiting_(std::move(awaiting)),
      verifiedAt_(std::move(verifiedAt))
  {
  }

  virtual ~Node() noexcept {}

  job::Ids awaiting() const noexcept
  {
    return awaiting_;
  }
  Date verifiedAt() const noexcept
  {
    return verifiedAt_;
  }
  
  // Bring all inputs and own state up to date now.
  // - to update an input, call input->update(now, starter)
  // - do not start job, instead throw JobSpec to start job
  virtual void updateInputsAndState(Date now, job::Starter& starter)
    // throws job::SomeIds if inputs are awaiting jobs
    // throws JobSpec if needs external command job run
    = 0;

  // Tell any relevant inputs that js is done by calling
  // each's jobsDone(c,js).
  virtual void tellInputsThatJobsAreDone(job::Collector& c,
                                         job::SomeIds const& js) noexcept = 0;

  // Collect result of job j completing state update.
  virtual void collectResultOfJob(job::Collector& e,
                                  job::Id const& j) noexcept = 0;
  
  // Bring this node up to date now.
  // - makes use of type-specific updateInputsAndState above as appropriate
  // post: awaiting() == job::Ids() && verifiedAt() >= now
  void update(Date now, job::Starter& starter)
  // throws awaiting() if update awaits jobs
  {
    try{
      if(verifiedAt_ < now){
        // result of our job is always delivered via jobsDone before
        // our calculate is called again
        
        xju::assert_equal(calculatingAt_.valid(), false);
        // anything we were waiting for no longer in progress?
        auto const noLongerInProgress(awaiting_ - starter.jobsInProgress());
        if (noLongerInProgress != job::Ids())
        {
          try{
            updateInputsAndState(now, starter);
            awaiting_ = job::Ids();
            verifiedAt_ = now;
          }
          catch(job::Spec const& s){
            job::SomeIds j(starter.startJob(now, s));
            calculatingAt_=now;
            throw j;
          }
        }
        else{
          xju::assert_not_equal(awaiting_, job::Ids());
          throw awaiting_;
        }
      }
    }
    catch(job::SomeIds const& awaiting){
      awaiting_ = awaiting;
      throw;
    }
  }

  // note to avoid unecessary tree traversal, exclude
  // e.executorNotBusyJob() from j before calling
  void jobsDone(job::SomeIds const& j, job::Collector& collector) noexcept
  {
    auto relevant = awaiting_ & j;
    if (relevant != job::Ids()){
      awaiting_.remove(relevant);
      if (calculatingAt_.valid()){
        // since we were calculating, the only thing we
        // can be awaiting is our own job
        xju::assert_equal(awaiting_, job::Ids());
        collectResultOfJob(collector,relevant.onlyJob());
        verifiedAt_ = calculatingAt_.value();
        calculatingAt_.clear();
      }
      else{
        tellInputsThatJobsAreDone(collector,job::SomeIds(relevant));
        // some node in our subtree has collected job
        // result, so we might be able to progess other nodes
        // in the tree (or ourself) so make sure our update()
        // gets called as soon as executor has room for more
        // jobs
        awaiting_.add(collector.executorNotBusyJob());
      }
    }
  }
};

}
