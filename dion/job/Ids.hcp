// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <cinttypes>
#include <dion/job/Id.hh>

namespace dion
{
namespace job
{

// Set of a limited range [0..Ids::maxId_] of Id
class Ids
{
public:
  explicit Ids():
      value_(0)
  {
  }
  // pre: x <= maxId__
  // post: onlyJob() == x
  Ids(Id const& x):
      value_(1 << x.value())
  {
    xju::assert_less_equal(x, maxId_);
  }
  // pre: count() == 1
  Id onlyJob() const noexcept
  {
    uint64_t value(value_);
    for(Id i=Id(0); i <= Ids::maxId_; ++i){
      if (value & 1UL){
        xju::assert_equal(value, 1UL);
        return i;
      }
      value = value >> 1;
    }
    xju::assert_never_reached(); // should have been a job
  }
  Ids& remove(Ids const& y) noexcept
  {
    value_ = value_ & ~y.value_;
    return *this;
  }

  Ids& add(Ids const& y) noexcept
  {
    value_ = value_ + y.value_;
    return *this;
  }

  static const Id maxId_=Id(sizeof(uint64_t)*8-1);

  // how many Ids in set
  unsigned int count() const noexcept; // not implemented

private:
  uint64_t value_;

  friend Ids operator-(Ids const& a, Ids const& b)
  {
    Ids result(a);
    result.remove(b);
    return result;
  }
  friend Ids operator+(Ids const& a, Ids const& b){
    Ids result;
    result.value_ = a.value_ | b.value_;
    return result;
  }
  friend Ids operator&(Ids const& a, Ids const& b){
    Ids result;
    result.value_ = a.value_ & b.value_;
    return result;
  }
  friend bool operator<(Ids const& a, Ids const& b) noexcept;
};

}
}
