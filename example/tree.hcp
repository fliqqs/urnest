// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


namespace example
{
template<class node_type, class tag=void>
struct tree_config
{
  // defaults, specialise if you like
  typedef std::vector<node_type> children_type;
};

template<class value_type, class tag=void>
  class node;

template<class value_type, class tag=void>
class tree
{
public:
  explicit tree(value_type root) noexcept:
      root_(std:move(node))
  {
  }
  
  typedef config<node, tag>::children_type children_type;

  class node
  {
  public:
    explicit node(value_type value) noexcept: value_(std::move(value)){}

    value_type value_;
    children_type children_;
  };

  node root_;
  
  enum class disposition{
    no, // node does not match, and no child will
    yes, // node matches, but no child will
    no_recurse, // node does not match, but children might
    yes_recurse, // node matches and so might its children
  };

  // REVISIT: make path a class, get its methods and friends
  // from static functions below
  typedef std::vector<
    std::pair<std::ref<children_type const>,
              typename children_type::const_iterator> > const_path;

  typedef std::function<disposition, value_type const&> select_by_value;
  typedef std::function<disposition, node const&, const_path const&> select_by_path;
    
  class const_selection{
  public:
    explicit const_selection(tree const& tree) noexcept: tree_(tree) {}
    std::ref<tree const> tree_;

    std::vector<const_path> selected_nodes_;

    // find values (self and nested) of all nodes selected by s
    // - result valid until hierarchy modified
    const_selection select_all(select_by_value const& s) const;
    const_selection select_all(select_by_path const& s) const;

    const_selection select_non_nested(select_by_value const& s) const;
    const_selection select_non_nested(select_by_path const& s) const;
    
  };

  // select nodes from candidates where s including nested matches
  // - result can include tree
  const_selection select_all(const_selection const& candidates, select_by_value const& s) const;
  const_selection select_all(const_selection const& candidates, select_by_path const& s) const;

  // select nodes from candidates where s excluding nested matches
  // - result can include tree (and if so, result is tree only)
  const_selection select_non_nested(const_selection const& candidates, select_by_value const& s) const;
  const_selection select_non_nested(const_selection const& candidates, select_by_path const& s) const;
  
  // return true if s selects any nodes from candidates
  bool selects_some(const_selection const& candidates, select_by_value const& s) const;
  bool selects_some(node const& tree, select_by_path const& s) const;

  
  // REVISIT: make path a class, get its methods and friends
  // from static functions below
  typedef std::vector<
    std::pair<std::ref<children_type>,
              typename children_type::iterator> > path;

  class selection{
  public:
    selection(tree& tree) noexcept: tree_(tree) {}
    std::ref<tree> tree_;

    std::vector<path> selected_nodes_;
  };

  // return all tree nodes selected by s excluding nested matches
  // - result can include tree (and if so, result is tree only)
  // pre: no selection or const_selection references tree
  selection select(tree& tree, select_by_value const& s);
  selection select(tree& tree, select_by_path const& s);

  // narrow selection to just nodes selected by s
  selection narrow(selection&& selection, select_by_value const& s);
  selection narrow(selection&& selection, select_by_path const& s);

  // remove selection, returns liberated nodes (branches)
  children_type prune(selection&& selection);
  
  // place copies of nodes before each node (non-nested) of selection
  selection precede(selection&& selection, children_type nodes);

  // replace each selected node (non-nested) with copy of nodes
  selection replace(selection&& selection, children_type nodes);

  class values{
    values(tree& tree) noexcept: tree_(tree) {}
    std::vector<std::ref<value_type> > selected_values_;
  };

  // values of all nodes in selection including/excluding descendents
  values values_nested(selection&& selection);
  values values_non_nested(selection&& selection);

  // convenience wrappers

  // direct children of tree
  // pre: no existing const_selection/selection/values refer to tree
  selection children_of(tree& tree);
  selection children_of(selection&& selection);
  
  // calls f on each root node, calling f on result (advanced to next
  // valid node) until end is returned, where f's signature is:
  //   const_path f(node const& n, const_path path_to_n, const_path const& end)
  // notes:
  // - returning a parent of n is prohibited
  // - where f returns end-of-siblings, next() is applied before again
  //   calling f
  // - where f returns path unmodified, next() is applied before again
  //   calling f
  // pre: no exsiting const_selection, selection or values refers to tree
  void walk(std::function<const_path, node const&, const_path, const_path const&> f) const;
  void walk(std::function<path, node&, path, path const&> f);

  static bool has_value(const_path const& p) {
    return p.first.size() && p.back().first.end() != p.back.second;
  }
  static bool end_of_siblings(const_path const& p) {
    return !is_empty(p) && p.back().second != p.back().first.end(); }
  static bool has_children(const_path const& p) {
    return p.back().second->children_.size(); }

  
  // conveniences for implementing f for apply()
  // pre: pre: p != end
  // post: has_value(result)
  static const_path parent_of(const_path p, const_path const& end) noexcept;
  // pre: !end_of_siblings(p)
  static const_path next_sibling_of(const_path p) noexcept;
  static path       next_sibling_of(path p) noexcept;
  // pre: has_children(p)
  static const_path first_child_of(const_path p) noexcept;
  static path first_child_of(path p) noexcept;

  // depth first order
  // pre: p != end
  // post: has_value(result) || result == end
  static const_path next(const_path p, const_path const& end) noexcept
  {
    if (has_children(p)){
      return first_child_of(std::move(p));
    }
    if (!end_of_siblings(p)){
      p = next_sibling_of(p);
    }
    while (p != end && !has_value(p)){
      p = next_sibling_of(parent_of(p, end));
    }
    return next(parent_of(p, end), end);
  }
};

template<class value_type, class tag=void>
bool tree<value_type, tag>::selects_some(
  tree<value_type, tag>::const_selection const& candidates,
  tree<value_type, tag>::select_by_value const& s) const
{
  auto const d(p(value_));
  switch(d){
  case yes:
  case yes_recurse:
    return true;
  case no_recurse:
    for(auto node: children_){
      if (node.has_some(p)){
        return true;
      }
    }
    break;
  case no:
    break;
  default:
    xju::assert_never_reached();
  }
  return false;    
}


}


