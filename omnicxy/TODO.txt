x hand-code p1 server

    root_poa->activate_object_with_id(oid, f);

    f : PortableServer::Servant

    .. do we really need to use poa? No but seems like
    lots of work to bypass... but alas it assumes that
    the object will hang around post-deativate (deativate
    is not synchronous), based on reference counting :-(

    ... but can use a reference counted servant and wait for
    its deletion

x move m_c out of sref< ::p1::F>::f1 and into _dispatch to avoid
  malloc/free on every call

x do a cxy/p1-main.cc that uses exception class derived
  from xju::Exception as its base exception type instead of
  cxy::Exception (p1-main-e.cc) but need variants of generated files
  (subdirectory e?)

x move server_t thread into ORB (Impl)

x move generic code from cref to ORBImpl, and add translation functions
  for cxy::Exception base to other

x test port-in-use
x test port-in-use - E
x test no-such-object
x test no-such-object - E

x make sure no generated headers that would be included in
  application code include any omniORB headers (to keep
  compilation dependencies minimal)

- try to remove all omniORB headers from all other generated:
  - .cc
  - objeref.hcp

- try to remove all omniORB headers from cxy/*.hh too

x generate proto/cxy code from p1.idl
  x p1.hcp
  x p1.cdr.hcp
  x p1.cref.hcp
  x p1.objref.hcp
  x p1.sref.hcp

x generate proto/cxy/e code from p1.idl
  ... via eg -Wb-eE=E.hh
  x p1.hcp
  x p1.cdr.hcp
  x p1.cref.hcp
  x p1.objref.hcp
  x p1.sref.hcp

x allow "" v <> control for -e eg:
   ./x/E.hh -> "x/E.hh"
   x/E.hh -> <x/E.hh>
   ./E.hh -> "E.hh"
   E.hh -> "E.hh"

- omnicxy odin package

- test client wrong type exception

x test duplicate object name exception

- add a two-process client server test

- allow cref cons/assign from super-class-cref

x client side:

x can get (CORBA_Object.h class Object) CORBA::Object* from 
  ORB::string_to_object
x then generated code calls CORBA::Object::_PR_getobj()->_realNarrow(
   _PD_repoId), _PR_getobj() is just 
    (omniObjRef.h) omniObjRef* CORBA::Object::pd_obj
x ... generated code has a static _pof_F which is a
  proxyObjectFactory and it has a omniObjRef* newObjRef that
  returns a generated class p1::_objref_F : omniObjRef
x   which has an implementation of each method


x allow "unchecked narrow"? Na

x clean up xju::Exceptions, get it back to a minimum of function
  variants:
    x add cxy::Exception which uses xju::Exception as its implementation
    x change xju::Exception back
    x have cxy/* throw cxy::Exceptions<cxy::Exception>::X and
      provide translate of all those to cxy::Exceptions<Y>::X with
      null-translation overrides

- translate the various system exceptions eg Transient
  separately in translateException.hcp

x make p1.hh // impl in p1.sref.hcp

- allow servant to throw base exception
