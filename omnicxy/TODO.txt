key:
  "x" means done
  "-" means to-be-done
  "~" means decided not to do

x const cref-> should return non-const ref, like T*const x

- consider dropping derived "Pair" class (see p4) and using std::pair
  directly... perhaps cannot do because of repoid / typeid?
    - repoid is not important for struct, only really used for interfaces
    - is allowed to be "" in TypeCode; alternative would be to have
      the "container" specify the typecode... but that's too hard so just
      make it ""
    - add interop testing of it

- map typedef sequence<XyPair> XyMap to std::map<X,Y> but again repoid trouble?
    - no trouble: see discussion above
    
- map typedef sequence<X> SetOfX to std::set<X>

- switch to C++-17 so we can use using to get base class constructors

- prefer shared_ptr<T> to cref<T>:
    - generate code with shared_ptr<T>, never cref<T>
    - look at whether dynamic_cast is overloadable so
      it becomes a corba narrow where the object is remote
      ... if so then cref<T> is not needed at all

x exception from resolve to non-existent ip address?

* p16-main core dump
  omniObjRef::_getIOR return value ownership?
  x step through using omniORB debug build
  x a's obj_ seems broken when we come to use it at line 207
  x was it always broken? Yes
  - why is it broken? Need to look at equivalent cxx code?
  - see how it was constructed

x cxy::any operator< etc

- union: promote variant structure members to get more natural
  C++ code, if can only have one data type per variant type
  - consider using latest C++ standard technique, it looks like a close match?
  - at least make enum union work like non-enum union, which works better for
    default case, want to be able to do:
       switch(x){
         case E::A: u=std::shared_ptr<U const> x(new U::A("fred"));
	 default: u=std::shared_ptr<U const> x(new U::E(x,"fred"));
    v U::V<>(5)?
  
~ union return as std::unique_ptr, in as T const&
  no that makes embedding union types in structures harder, just
  stick with shared_ptr<T const>

x TypeCode
  x current mapping to sharedptr< TypeCode > does not get value-compare
    semantics - make TypeCode a reference wrapper so it can have
    value-compare
    x 1st rename TypeCode to TypeCode_
    x then replaced std::shared_ptr< > with TypeCode:
    TypeCode {
      explicit TypeCode(std::sharedptr< TypeCode_ const> x) throw():
        x_(x)
      {
      }
      private:
        std::sharedptr< TypeCode_ const> x_;
      friend bool operator<(TypeCode const& x, TypeCode const& y)...;
    };

* fix up exception handling:
  - define equivalents of all corba exception types
  - have translateCorbaException return std::exception_ptr
  - have translateException return std::exception_ptr
  - use std::rethrow_exception to throw the result

* allow retry after PortInUse (with different port; currently retries same
  port always ... omniORB needs mod?)
  
* update all tests to retry on PortInUse

- proto/cxy/echo-main

~ how to get just direct includes (in omnipy backend)? currently picks
  up nested
  ~ omniORB cxx backend does not - it #includes all transitively included -
    what rubbish... actually it probably does not matter

- use xju::Thread instead of xju::mt::Thread

- p3.idl:
  x typedef basic type -> distinct
    x short
    x string
    x octet
    x float
    x double
    x long
    x long long
    x unsigned short
    x unsigned long
    x unsigned long long
    x boolean
    - wchar ... code incorrect, much more complex
    - wstring
    - long double

    struct XxPair : std::pair<Y,Z> XxPair { ... };
    - perhaps that should be a typedef?

- p7.idl:
    - want to seamlessly handle BaseException, which
      has cause and context:
      x make use of XxPair above, specify cxy backend params
        cause=cause_,context=context_ which says to treat
        idl exception attributes cause_ and context_ as the
        BaseException cause and context attributes (so they get
        marshaled); they must have type pair<string,int> and 
        sequence<pair<string, int> >; assume they are BaseException
        members?
      x allow ExceptionCause and ExceptionContext types on omniidl
        command line
      x if EEE has those:
        x defer to the base class members
          ~ via refs where names are not cause_ and context_
        x the info will propogate back to client
      ~ if EEE does not have:
        ~ when server marshals, write them to stderr if they contain
        ~ (no: cause_ and context_ are not required in BaseException)
      x what if using own exception type? allow attr names to be
        specified on omniidl command line, as well as attr types
        specially? (e/p7-main.cc)
      - if servant throws plain BaseException allow mapping to be
        specified on command line; if no mapping abort (with stderr
        message)

- p8.idl
  - exception with cause and context mapped to BaseException and
    with extra attributes

- p19.idl:
  - sequence test cases


x p23.idl:
  x inherit interface multi-level
  x inherit multiple interfaces
  x inherit interface diamond
    x only emit each function once:
      x cxysref.py
      
x p16a-main:
    x inherit base implementation:
      interface IfA { void f(); }
      interface IfB : IfA { void g(); }
      class A : public virtual IfA { void f() { ...; } };
      class B : public virtual A, public virtual IfB {
        void g() { ...; }
      };
      x remote access a B as an A
      x narrow to a B
      ... just like p16
    
- in-place struct union member union(short){ 1: struct X{ long a_;}; }
- recursive union
- bounded strings
    - do like bounded sequence

- revisit BoundedSequence
      - exceptions to give them all info known eg context
      - allow construct from any such sequence same size or less
      - compile error if size greater

- arrays
    ~ could use std::array<>? No, it cannot be used for types
      that have no default constructor
    - come up with own Array that allows no default constructor
    
- any
  x string
  - array
  - bounded sequence
  x CORBA::TypeCode
  x union
    x test union's that have no default cases

  - see also TypeKind.hcp REVISITs
  * proto/cxy/p20-main-1.cc that does not actually use any and does
    not include any_.hcp nor any omniORB headers
  x proto/cxy/p20-main.cc does use Any (and does include any_.hh)
  x any is marshalled as type code then data, the data is the cdr encoding
    of the value (the length of the data is implicit in the type code)
    what is typecode? essentially parallels instance encoding
    x generate xxx.any.hcp which has specialisations of
      cxy::TypeCodeOf
    x need lots of interoperability tests
      x proto/cxy/interop/test-Any-cx{y,x}.cc

    x is there a header eg for byte order?
      x simple, no:
         x kind only: 
           tk_null, tk_void, x tk_short, tk_long, tk_ushort, tk_ulong, tk_float, tk_double, tk_boolean, tk_char, tk_octet, tk_any, tk_TypeCode, tk_Principal, tk_longlong, tk_ulonglong, tk_longdouble, tk_wchar, 
         x others have params:
           tk_string: ulong (max length or 0)
           tk_wstring: ulong(max length or zero if unbounded)
	   tk_fixed: ushort(digits), short(scale)

      x "complex" typecodes are encapsulated ie they are
        encoded as sequence<octet> where the sequence<octet> has
        a byte order byte followed by cdr encodings. Use 
        cdrEncapsulationStream? How to marshal it?
           ~/omniORB-4.2.0/src/lib/omniORB/dynamic/typecode.cc:5049 / 5233

      x value of any is not encapsulated, therefore need to decode the
        typecode to be able to figure out how big the value is
        tk_objref: string (repository ID), string(name)
        tk_struct: string (repository ID),
                    string (name),
                   ulong (count)
                  {string (member name),
                 TypeCode (member type)}
        tk_union: string (repository ID), string(name),
                   TypeCode (discriminant type),
                  long (default used),
                 ulong (count)
                {discriminant typea (label value),
               string (member name),
              TypeCode (member type)}
        tk_enum: string (repository ID),
                  string (name),
                 ulong (count)
                {string (member name)}
        tk_sequence: TypeCode (element type),
                      ulong (max lengthc)
        tk_array: TypeCode (element type),
                   ulong (length)
        tk_alias: string (repository ID),
                   string (name),
                  TypeCode
        tk_except: string (repository ID),
                    string (name),
                   ulong (count)
                  {string (member name),
                 TypeCode (member type)}

    x recursion/indirection in typecodes (see cxy/TypeCode.hcp)
      
    - interop/test-Any.cc :
      x recursion:
	~ union with self case (not possible in IDL)
	~ struct A with B that has an A (not possible in IDL)
      - other types (see REVISITs in cxy/TypeCode.hcp)
	
    - optimisation:
      add TypeCode::minEncodedValueSize() and use as initial value buffer size

    - adjust so Any.hh does not include TypeCode.hh (which means
      can use interfaces that contain anys without it?
    
    x rename Any to AnyImpl and do a Any template to translate exceptions
    * can share AnyImpl (make it const)

    x test interop with complex any param
      x still to test some types (see REVISITs in cxy/TypeCode.hcp)
      
- cxy/Milliseconds.idl and hand-code map to std::chrono::milliseconds

- other stuff (see omniidl idltypes.py)

- cxysref.py generates dispatch code for all inherited operations, which
  will result in lots of duplicate code, instead call the dispatch code
  for the inherited interface
    - how to tell in omniidl backend which is inherited operation?

- try to remove all omniORB headers from all other generated:
  - .cc
  - objref.hcp

- try to remove all omniORB headers from cxy/*.hh too

- should not need cref at all, should be able to use standard pointer eg
  std::unique_ptr<T> cxy::cref<T>::locate(...)
  ... but downside is not then able to narrow? Actually might be
  able to narrow via a cxy::cref<T>::narrow(U), it can first narrow
  to a objref<U> then do the usual stuff

- compile errors (make sure they're meaningful):
  IOR conversion to unrelated type
  narrow to unrelated type
  use of cref<T> without including appropriate header
  use of sref<T> without including appropriate header

- operator<<(std::ostream&,IORImpl) better to describe the IOR type and
  tagged profile list (could use catior?) see REVISIT in cxy::IORImpl

- add a two-process client server test
  - cxx->cxy, for each single-process test
  - cxy->cxx, for each single-process test
  - p9 test should verify oneway is asynchronous

- allow cref cons/assign from super-class-cref

- translate the various system exceptions eg Transient
  separately in translateException.hcp

- allow servant to throw base exception

- make uri cxy::objref<X> cons param

- out params like python, map to tuple<> return type

- in-out param X&

x have seen cxx p2-main crash at end (after calling orb->destroy()), why?:

#5  0x00007f6924661ab8 in __cxxabiv1::__cxa_throw (obj=0x7f6914000970, 
    tinfo=0x7f6924f036b0 <typeinfo for CORBA::OBJECT_NOT_EXIST>, 
    dest=0x7f6924c11e80 <CORBA::OBJECT_NOT_EXIST::~OBJECT_NOT_EXIST()>)
    at ../../.././libstdc++-v3/libsupc++/eh_throw.cc:87
#6  0x00007f6924c07efd in omniOrbORB::run() ()
   from /home/xju/omniORB-4.2.0/lib/libomniORB4.so.2
#7  0x0000000000407522 in xju::mt::Thread<CORBA::ORB>::main (x=0x7ffde4b5f350)
    at /home/xju/urnest/xju/mt.hh:350

#5  0x00007f6924661ab8 in __cxxabiv1::__cxa_throw (obj=0x7f6914000970, 
    tinfo=0x7f6924f036b0 <typeinfo for CORBA::OBJECT_NOT_EXIST>, 
    dest=0x7f6924c11e80 <CORBA::OBJECT_NOT_EXIST::~OBJECT_NOT_EXIST()>)
    at ../../.././libstdc++-v3/libsupc++/eh_throw.cc:87
#6  0x00007f6924c07efd in omniOrbORB::run() ()
   from /home/xju/omniORB-4.2.0/lib/libomniORB4.so.2
#7  0x0000000000407522 in xju::mt::Thread<CORBA::ORB>::main (x=0x7ffde4b5f350)
    at /home/xju/urnest/xju/mt.hh:350

    ... think it is due to two calls to ORB_init... which has been fixed
    at least in a couple of the tests (see p20-main.cc for example)
    
---------------------------------------------

xju@xjutv:~/urnest$ ODIN_LIB_SP="/usr/local/omniORB-4.2.0/lib /lib /usr/lib" ODIN_EXEC_PATH=/usr/local/omniORB-4.2.0/bin:/usr/bin:/bin ODIN_OMNICXY_PATH=/usr/local/omniORB-4.2.0/bin:/usr/bin:/bin ODIN_OMNICXY_BE_DIR=~/urnest/omnicxy/omniidl_be  ODIN_CXX_LD_LIBRARY_PATH=/usr/local/omniORB-4.2.0/lib ODIN_LD_LIBRARY_PATH=/usr/local/omniORB-4.2.0/lib ODIN_CXX_I=/usr/local/omniORB-4.2.0/include odin/create-linux-cache.sh $ODIN

 ODIN_LIB_SP="/home/xju/omniORB-4.2.0/lib /lib /usr/lib" ODIN_EXEC_PATH=/home/xju/omniORB-4.2.0/bin:/usr/bin:/bin ODIN_OMNICXY_PATH=/home/xju/omniORB-4.2.0/bin:/usr/bin:/bin ODIN_OMNICXY_BE_DIR=~/urnest/omnicxy/omniidl_be  ODIN_CXX_LD_LIBRARY_PATH=/home/xju/omniORB-4.2.0/lib ODIN_LD_LIBRARY_PATH=/home/xju/omniORB-4.2.0/lib ODIN_CXX_I=/home/xju/omniORB-4.2.0/include odin/create-linux-cache.sh $ODIN

#gcc 5.2.0:
ODIN_CXX_LD_LIBRARY_PATH=/usr/local/omniORB-4.2.0/lib:/home/xju/gcc-5.2.0-run/lib  ODIN_CXX_PATH=/home/xju/gcc-5.2.0-run/bin:/usr/bin:/bin ODIN_CXX_FLAGS=-std=c++11 ODIN_LD_LIBRARY_PATH=/usr/local/omniORB-4.2.0/lib:/home/xju/gcc-5.2.0-run/lib ODIN_CXX_I=/usr/local/omniORB-4.2.0/include ODIN_LIB_SP="/usr/local/omniORB-4.2.0/lib /lib /usr/lib" ODIN_EXEC_PATH=/usr/local/omniORB-4.2.0/bin:/bin:/usr/bin ODIN_OMNICXY_PATH=/usr/local/omniORB-4.2.0/bin:/usr/bin:/bin ODIN_OMNICXY_BE_DIR=~/urnest/omnicxy/omniidl_be ./odin/create-linux-cache.sh $ODIN
