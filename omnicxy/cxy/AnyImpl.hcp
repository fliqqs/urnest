// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/TypeCode.hh>
#include <cxy/MemCdrStream.hh>

namespace cxy
{

class AnyImpl
{
public:
  // post: *this owns value
  AnyImpl(TypeCode const& typeCode,
          MemCdrStream const& value) throw(std::bad_alloc):
      typeCode_(typeCode),
      value_(value) {
  }

  AnyImpl(TypeCode const& typeCode,
          MemCdrStream && value) throw():
      typeCode_(typeCode),
      value_(std::move(value)) {
  }

  void marshalTo(cdrStream& s) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    typeCode_->marshal(s);
    MemCdrStream::Ref value(value_);
    typeCode_->copyValue(*value,s);
  }

  //post: result != 0, caller owns result
  static AnyImpl* unmarshal(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    ::cxy::TypeCode const t(cdr< ::cxy::TypeCode >::unmarshalFrom(s));
    MemCdrStream value;
    t->copyValue(s, *value);
    return new AnyImpl(t,std::move(value));
  }
  
  TypeCode typeCode_;
  MemCdrStream const value_;

  friend bool operator<(AnyImpl const& a, AnyImpl const& b) throw(){
    if (*a.typeCode_<*b.typeCode_){
      return true;
    }
    if (*b.typeCode_<*a.typeCode_){
      return false;
    }
    if (a.value_<b.value_){
      return true;
    }
    if (b.value_<a.value_){
      return false;
    }
    return false;
  }
  friend bool operator>(AnyImpl const& a, AnyImpl const& b) throw(){
    return b<a;
  }
  friend bool operator!=(AnyImpl const& a, AnyImpl const& b) throw(){
    return a<b || b<a;
  }
  friend bool operator==(AnyImpl const& a, AnyImpl const& b) throw(){
    return !(a<b || b<a);
  }
  friend bool operator<=(AnyImpl const& a, AnyImpl const& b) throw(){
    return !(a>b);
  }
  friend bool operator>=(AnyImpl const& a, AnyImpl const& b) throw(){
    return !(a<b);
  }
};

template<>
struct TypeCodeOf<AnyImpl>
{
static TypeCode create() throw(std::bad_alloc)
{
  return TypeCode(
    std::shared_ptr<TypeCode_>(new AnyTypeCode));
}
};
  
}
