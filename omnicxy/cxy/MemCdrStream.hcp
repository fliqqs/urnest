// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/cdrMemoryStream_.hh> //impl
#include <new>
#include <cinttypes> //impl
#include <utility> //impl

class cdrStream;

namespace cxy
{
class cdrMemoryStream_;

class MemCdrStream
{
public:
  MemCdrStream() throw(std::bad_alloc):
      s_(new cdrMemoryStream_)
  {
  }
  cdrStream& operator*() throw()
  {
    return *s_;
  }
  cdrStream const& operator*() const throw()
  {
    return *s_;
  }
  ~MemCdrStream() throw()
  {
    delete s_;
  }

  MemCdrStream(MemCdrStream const& b) throw(std::bad_alloc):
      s_(new cdrMemoryStream_(*b.s_))
  {
  }
  
  MemCdrStream& operator=(MemCdrStream const& b) throw(std::bad_alloc)
  {
    if (s_ != b.s_) {
      delete s_;
      s_=new cdrMemoryStream_(*b.s_);
    }
    return *this;
  }

  MemCdrStream(MemCdrStream && b) throw():
      s_(b.s_)
  {
    b.s_=0;
  }
  
  MemCdrStream& operator=(MemCdrStream && b) throw()
  {
    if (s_ != b.s_) {
      delete s_;
      s_=b.s_;
      b.s_=0;
    }
    return *this;
  }

  class Ref
  {
  public:
    explicit Ref(MemCdrStream const& s) throw():
        s_(new cdrMemoryStream_(*s.s_,1))//1 means read only ref, not copy
    {
      s_->rewindInputPtr();      
    }
    ~Ref() throw()
    {
      delete s_;
    }
    cdrStream& operator*() throw()
    {
      return *s_;
    }
  private:
    cdrMemoryStream_* s_;
  };
    
private:
  cdrMemoryStream_* s_;

  bool lessThan(MemCdrStream const& b) const throw()
  {
    MemCdrStream const& a(*this);
    if (a.s_->bufSize()<b.s_->bufSize()){
      return true;
    }
    else if (b.s_->bufSize()<a.s_->bufSize()){
      return false;
    }
    uint8_t const* begin=(uint8_t const*)a.s_->bufPtr();
    uint8_t const* end=begin+a.s_->bufSize();
    uint8_t const* begin_b=(uint8_t const*)b.s_->bufPtr();
    uint8_t const* p=begin;
    uint8_t const* q=begin_b;
    for(; p!=end; ++p,++q){
      if (*p < *q){
        return true;
      }
      if (*q < *p){
        return false;
      }
    }
    return false;
  }
  friend bool operator<(MemCdrStream const& a,
                        MemCdrStream const& b) throw()
  {
    return a.lessThan(b);
  }
  friend bool operator>(MemCdrStream const& a,
                        MemCdrStream const& b) throw()
  {
    return b<a;
  }
  friend bool operator==(MemCdrStream const& a,
                         MemCdrStream const& b) throw()
  {
    return !(a<b) && !(b<a);
  }
  friend bool operator!=(MemCdrStream const& a,
                         MemCdrStream const& b) throw()
  {
    return (a<b) || (b<a);
  }
  friend bool operator<=(MemCdrStream const& a,
                         MemCdrStream const& b) throw()
  {
    return !(a>b);
  }
  friend bool operator>=(MemCdrStream const& a,
                         MemCdrStream const& b) throw()
  {
    return !(a<b);
  }
};

  
}
