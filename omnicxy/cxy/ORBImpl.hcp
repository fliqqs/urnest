// Copyright (c) 2014 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#ifndef CXY_ORBIMPL_H
#define CXY_ORBIMPL_H

#include "Exception.hh"
#include "Exceptions.hh"
#include "translateException.hh"
#include <string>
#include <typeinfo> // impl
#include <omniORB4/CORBA.h>
#include <iostream> // impl
#include <xju/format.hh>
#include <xju/mt.hh>

namespace CORBA
{
class ORB;
}

namespace cxy
{
namespace
{
cxy::Exception translate(CORBA::Exception const& e) throw()
{
  std::ostringstream s;
  s << typeid(e).name();
  {
    CORBA::SystemException const* ee=
      dynamic_cast<CORBA::SystemException const*>(&e);
    if(ee) {
#ifdef minor
  // Digital Unix 3.2, and may be others as well, defines minor() as
  // a macro in its sys/types.h. Get rid of it!
#undef minor
#endif
      s << " minor " << ee->minor();
    }
  }
  {
    CORBA::PolicyError const* ee=
      dynamic_cast<CORBA::PolicyError const*>(&e);
    if(ee) {
      s << " reason " << ee->reason;
    }
  }
  return cxy::Exception(s.str(), XJU_TRACED);
}

CORBA::ORB* orbInit(
  std::string const& orbEndPoint) throw(
    cxy::Exception)
{
  char* argv_[]={
    ::strdup("")
  };
  char** argv=argv_;
  
  int argc=sizeof(argv)/sizeof(argv[0]);
  try {
    const char* options[][2] = {{ "endPoint", orbEndPoint.c_str() },{ 0, 0 }};
    CORBA::ORB* result(
      CORBA::ORB_init(argc, argv, "omniORB4", options));
    return result;
  }
  catch (CORBA::Exception& ex) {
    cxy::Exception e(translate(ex));
    std::ostringstream s;
    s << "CORBA::ORB_init with args "
      << xju::format::join(argv, argv+argc, ", ");
    e.addContext(s.str(), XJU_TRACED);
    throw e;
  }
}
}

template<class T>
class cref;

class ORBImpl
{
public:
  explicit ORBImpl(std::string const& orbEndPoint) throw(
    cxy::Exception):
      orbEndPoint_(orbEndPoint),
      orb_(orbInit(orbEndPoint)),
      insPOA_(0),
      insPOA_Manager_(0)
  {
    insPOA();
  }
  ~ORBImpl() throw()
  {
    if (insPOA_Manager_) {
      insPOA_Manager_->deactivate(false, true);
      CORBA::release(insPOA_Manager_);
    }
    if (insPOA_) {
      CORBA::release(insPOA_);
    }
    delete orb_;
  }
  // post: lifetime(result) includes lifetime(this)
  ::PortableServer::POA& insPOA() throw(
    // eg port in use
    cxy::Exception)
  {
    xju::mt::Lock l(guard_);
    if (!insPOA_) {
      try {
        insPOA_ = PortableServer::POA::_narrow(
          orb_->resolve_initial_references("omniINSPOA"));
        insPOA_Manager_ = insPOA_->the_POAManager();
        insPOA_Manager_->activate();
      }
      catch (CORBA::Exception& ex) {
        cxy::Exception e(translate(ex));
        std::ostringstream s;
        s << "get omniORB insPOA at endpoint " << orbEndPoint_;
        e.addContext(s.str(), XJU_TRACED);
        throw e;
      }
    }
    return *insPOA_;
  }
  void run() throw(
    cxy::Exception)
  {
    try {
      orb_->run();
    }
    catch(CORBA::Exception& ex) {
      cxy::Exception e(translate(ex));
      std::ostringstream s;
      s << "cxy::ORBImpl::run";
      e.addContext(s.str(), std::make_pair(__FILE__,__LINE__));
      throw e;
    }
  }
  void stop() throw(
    cxy::Exception)
  {
    try {
      orb_->shutdown(true);
    }
    catch(CORBA::Exception& ex) {
      cxy::Exception e(translate(ex));
      std::ostringstream s;
      s << "cxy::ORBImpl::stop";
      e.addContext(s.str(), std::make_pair(__FILE__,__LINE__));
      throw e;
    }
  }
  void* locate(std::string const& uri, std::string const& repoId) throw(
    cxy::Exceptions<cxy::Exception>::WrongType,
    cxy::Exceptions<cxy::Exception>::NoSuchObject,
    cxy::Exception)
  {
    try {
      try {
        CORBA::Object_var x(orb_->string_to_object(uri.c_str()));
        if (CORBA::is_nil(x)) {
          std::ostringstream s;
          s << xju::format::quote(uri) << " is nil";
          throw cxy::Exceptions<cxy::Exception>::NoSuchObject(
            s.str(), std::make_pair(__FILE__, __LINE__));
        }
        void* result=x->_PR_getobj()->_realNarrow(repoId.c_str());
        if (result==0) {
          std::ostringstream s;
          s << xju::format::quote(uri) << " is not a "
            << repoId;
          throw cxy::Exceptions<cxy::Exception>::WrongType(
            s.str(), std::make_pair(__FILE__, __LINE__));
        }
        return result;
      }
      catch(CORBA::OBJECT_NOT_EXIST& ee) {
        std::ostringstream s;
        s << xju::format::quote(uri) << " is nil";
        throw cxy::Exceptions<cxy::Exception>::NoSuchObject(
          s.str(), std::make_pair(__FILE__, __LINE__));
      }
      catch(CORBA::Exception const& ee) {
        throw cxy::translateException<cxy::Exception>(ee);
      }
    }
    catch(cxy::Exception& e) {
      std::ostringstream s;
      s << "locate object "
        << xju::format::quote(uri)
        << " of type "
        << repoId;
      e.addContext(s.str(), std::make_pair(__FILE__, __LINE__));
      throw;
    }
  }
  
private:
  std::string const orbEndPoint_;
  ::CORBA::ORB* orb_;
  xju::mt::Mutex guard_;
  ::PortableServer::POA* insPOA_;
  ::PortableServer::POAManager* insPOA_Manager_;
  
  //REVISIT: get rid of these
  template<class T>
  friend class cref;
};

  
}

#endif
