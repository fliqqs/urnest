// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/cdr.hh>
#include <cxy/TypeKind.hh>

#include <omniORB4/CORBA.h> //impl
#include <omniORB4/cdrStream.h> //impl
#include <memory>

class cdrStream;

namespace cxy
{
class TypeCode
{
public:
  virtual ~TypeCode() throw(){}

  virtual void copyValue(cdrStream& from, cdrStream& to)
  //to avoid needing CORBA.h in our .hh, excepiton specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  = 0;

  virtual void marshal(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, excepiton specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  = 0;

  virtual bool equals(TypeCode const& b) const throw() = 0;
};

class TypeCodeShort : public TypeCode
{
  virtual void copyValue(cdrStream& from, cdrStream& to)
  {
    cxy::cdr<int16_t>::marshal(
      cxy::cdr<int16_t>::unmarshalFrom(from),
      to);
  }

  virtual void marshal(cdrStream& s)
  {
    cxy::cdr<uint32_t>::marshal(TypeKind::SHORT, s);
  }
  
  virtual bool equals(TypeCode const& b) const throw()
  {
    TypeCodeShort b_(dynamic_cast<TypeCodeShort const*>(&b));
    return b_;
  }
};

template<>
class cxy::cdr<std::shared_ptr<TypeCode> >
{
public:
  static std::shared_ptr<TypeCode> unmarshalFrom(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, excepiton specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    cxy::TypeKind const k(cxy::cdr<uint32_t>::unmarshalFrom(s));
    switch(k) {
    case cxy::TypeKind::SHORT:
      return std::shared_ptr<TypeCode>(
        new TypeCodeShort());
    default:
      std::ostringstream s;
      s << "unimplemented type kind " << k;
      throw cxy::Exception(s.str(),XJU_TRACED);
    }
  }

  static void marshal(std::shared_ptr<TypeCode const> x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, excepiton specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x->marshal(s);
  }
};
  
bool operator==(TypeCode const& a, TypeCode const& b) throw()
{
  return a.equals(b);
}
  
}
