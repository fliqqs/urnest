// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/cdr.hh>
#include <cxy/TypeKind.hh>
#include <cxy/TypeTag.hh>

#include <omniORB4/CORBA.h> //impl
#include <omniORB4/cdrStream.h> //impl
#include <xju/format.hh>//impl
#include <cxy/EncapsulationCdrStream.hh>//impl
#include <memory>
#include <vector>
#include <typeinfo>
#include <typeindex> //impl
#include <cxy/Exception.hh>
#include <cxy/MemCdrStream.hh>
#include <cxy/translateException.hh> //impl

class cdrStream;

namespace cxy
{
class TypeCode
{
public:
  virtual ~TypeCode() throw(){}

  virtual void copyValue(cdrStream& from, cdrStream& to) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  = 0;

  virtual void marshal(cdrStream& s) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  = 0;

  virtual bool equals(TypeCode const& b) const throw() = 0;

  //pre: typeid(*this)==typeid(b)
  virtual bool lessThan(TypeCode const& b) const throw() = 0;
  
  virtual std::string str() const throw() = 0;
};
std::ostream& operator<<(std::ostream& s, TypeCode const& x) throw()
{
  return s << x.str();
}

//typecode class for eg CORBA::Short (ie int16_t)
template<class BasicType, cxy::TypeKind typeKind>
class BasicTypeCode : public TypeCode
{
public:
  virtual void copyValue(cdrStream& from, cdrStream& to) const
  {
    cxy::cdr<BasicType>::marshal(
      cxy::cdr<BasicType>::unmarshalFrom(from),
      to);
  }

  virtual void marshal(cdrStream& s) const
  {
    cxy::cdr<uint32_t>::marshal((uint32_t)typeKind, s);
  }
  
  virtual bool equals(TypeCode const& b) const throw()
  {
    BasicTypeCode const* b_(dynamic_cast<BasicTypeCode const*>(&b));
    return b_;
  }
  virtual bool lessThan(TypeCode const& b) const throw()
  {
    xju::assert_equal(typeid(*this),typeid(b));
    return false;
  }
  virtual std::string str() const throw()
  {
    return typeid(BasicType).name();
  }
};

class SequenceTypeCode : public TypeCode
{
public:
  SequenceTypeCode(std::shared_ptr<TypeCode> itemType,
                   uint32_t maxSize):
      itemType_(itemType),
      maxSize_(maxSize)
  {
  }
  virtual void copyValue(cdrStream& from, cdrStream& to) const
  {
    uint32_t const size(
      cxy::cdr<uint32_t>::unmarshalFrom(from));
    cxy::cdr<uint32_t>::marshal(size,to);
    // deliberately don't check max size
    for(uint32_t i=0; i != size; ++i) {
      itemType_->copyValue(from,to);
    }
  }

  virtual void marshal(cdrStream& s) const
  {
    EncapsulationCdrStream es;
    itemType_->marshal(*es);
    cxy::cdr<uint32_t>::marshal(maxSize_,*es);

    cxy::cdr<uint32_t>::marshal((uint32_t)TypeKind::SEQUENCE, s);
    cxy::cdr<EncapsulationCdrStream>::marshal(es,s);
  }
  
  virtual bool equals(TypeCode const& b) const throw()
  {
    SequenceTypeCode const* b_(dynamic_cast<SequenceTypeCode const*>(&b));
    return b_ && (*b_==*this);
  }
  virtual bool lessThan(TypeCode const& b) const throw()
  {
    xju::assert_equal(typeid(*this),typeid(b));
    SequenceTypeCode const& a_(static_cast<SequenceTypeCode const&>(*this));
    SequenceTypeCode const& b_(static_cast<SequenceTypeCode const&>(b));
    if (*a_.itemType_ < *b_.itemType_){
      return true;
    }
    if (*b_.itemType_ < *a_.itemType_){
      return false;
    }
    return a_.maxSize_ < b_.maxSize_;
  }
  virtual std::string str() const throw()
  {
    return std::string("sequence<")+itemType_->str()+","+
      xju::format::int_(maxSize_)+">";
  }
private:
  std::shared_ptr<TypeCode> itemType_;
  uint32_t maxSize_;
  
  friend bool operator==(SequenceTypeCode const& a,
                         SequenceTypeCode const& b) throw()
  {
    return a.maxSize_==b.maxSize_ &&
      a.itemType_->equals(*b.itemType_);
  }
};

  
class StructTypeCode : public TypeCode
{
public:
  StructTypeCode(std::string repoId,
                 std::string name,
                 std::vector<std::pair<std::string, std::shared_ptr<TypeCode> > > memberNamesAndTypes):
      repoId_(repoId),
      name_(name),
      memberNamesAndTypes_(memberNamesAndTypes)
  {
  }
  typedef std::vector<std::pair<std::string, std::shared_ptr<TypeCode> > > Members;
  
  virtual void copyValue(cdrStream& from, cdrStream& to) const
  {
    for(auto nameAndType : memberNamesAndTypes_) {
      nameAndType.second->copyValue(from,to);
    }
  }

  virtual void marshal(cdrStream& s) const
  {
    cxy::cdr<uint32_t>::marshal((uint32_t)TypeKind::STRUCT, s);

    EncapsulationCdrStream es;
    cxy::cdr<std::string>::marshal(repoId_,*es);
    cxy::cdr<std::string>::marshal(name_,*es);
    cxy::cdr<uint32_t>::marshal(memberNamesAndTypes_.size(),*es);
    for(auto nameAndType : memberNamesAndTypes_) {
      cxy::cdr<std::string>::marshal(nameAndType.first,*es);
      nameAndType.second->marshal(*es);
    }

    cxy::cdr<EncapsulationCdrStream>::marshal(es,s);
  }
  
  virtual bool equals(TypeCode const& b) const throw()
  {
    StructTypeCode const* b_(dynamic_cast<StructTypeCode const*>(&b));
    return b_ && (*b_==*this);
  }
  virtual bool lessThan(TypeCode const& b) const throw()
  {
    xju::assert_equal(typeid(*this),typeid(b));
    StructTypeCode const& b_(static_cast<StructTypeCode const&>(b));
    return repoId_<b_.repoId_;
  }
  virtual std::string str() const throw()
  {
    return repoId_;
  }
private:
  std::string repoId_;
  std::string name_;
  Members memberNamesAndTypes_;
  
  friend bool operator==(StructTypeCode const& a,
                         StructTypeCode const& b) throw()
  {
    return a.repoId_==b.repoId_;
  }
};

bool operator==(TypeCode const& a, TypeCode const& b) throw()
{
  return a.equals(b);
}
bool operator<(TypeCode const& a, TypeCode const& b) throw()
{
  if (std::type_index(typeid(a))<std::type_index(typeid(b))){
    return true;
  }
  if (std::type_index(typeid(b))<std::type_index(typeid(a))){
    return false;
  }
  return a.lessThan(b);
}



template<class T>
struct TypeCodeOf
{
private:
  static std::shared_ptr<TypeCode> create() throw(std::bad_alloc); //not implemented - must specialise class to provide implementations
};
  
template<>
struct TypeCodeOf<int16_t>
{
static std::shared_ptr<TypeCode> create() throw(std::bad_alloc)
{
  return std::shared_ptr<TypeCode>(
    new BasicTypeCode<int16_t,cxy::TypeKind::SHORT>);
}
};
  
template<>
struct TypeCodeOf<int32_t>
{
static std::shared_ptr<TypeCode> create() throw(std::bad_alloc)
{
  return std::shared_ptr<TypeCode>(
    new BasicTypeCode<int32_t,cxy::TypeKind::LONG>);
}
};
  
template<class T>
struct TypeCodeOf<std::vector<T> >
{
static std::shared_ptr<TypeCode> create() throw(std::bad_alloc)
{
  return std::shared_ptr<TypeCode>(
    new SequenceTypeCode(TypeCodeOf<T>::create(),0));
}
};



  
// TypeCodeOf for structures is defined in code generated by cxyany.py backend

class AnyImpl
{
public:
  // post: *this owns value
  AnyImpl(std::shared_ptr<TypeCode const> typeCode,
          MemCdrStream value) throw(): //REVISIT: pass by ref?
      typeCode_(typeCode),
      value_(value) {
  }

  void marshalTo(cdrStream& s) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    MemCdrStream::Ref value(value_);
    typeCode_->copyValue(*value,s);
  }

  //post: result != 0, caller owns result
  static AnyImpl* unmarshal(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    std::shared_ptr<cxy::TypeCode> const t(
      cdr<std::shared_ptr<cxy::TypeCode> >::unmarshalFrom(s));
    MemCdrStream value;
    t->copyValue(s, *value);
    return new AnyImpl(t,value);
  }
  
  std::shared_ptr<TypeCode const> typeCode_;
  MemCdrStream const value_;

  friend bool operator<(AnyImpl const& a, AnyImpl const& b) throw(){
    if (*a.typeCode_<*b.typeCode_){
      return true;
    }
    if (*b.typeCode_<*a.typeCode_){
      return false;
    }
    if (a.value_<b.value_){
      return true;
    }
    if (b.value_<a.value_){
      return false;
    }
    return false;
  }
  friend bool operator>(AnyImpl const& a, AnyImpl const& b) throw(){
    return b<a;
  }
  friend bool operator!=(AnyImpl const& a, AnyImpl const& b) throw(){
    return a<b || b<a;
  }
  friend bool operator==(AnyImpl const& a, AnyImpl const& b) throw(){
    return !(a<b || b<a);
  }
  friend bool operator<=(AnyImpl const& a, AnyImpl const& b) throw(){
    return !(a>b);
  }
  friend bool operator>=(AnyImpl const& a, AnyImpl const& b) throw(){
    return !(a<b);
  }
};

//typecode class for eg CORBA::Short (ie int16_t)
class AnyImplTypeCode : public TypeCode
{
public:
  virtual void copyValue(cdrStream& from, cdrStream& to) const
  {
    std::unique_ptr<AnyImpl>(
      AnyImpl::unmarshal(from))->marshalTo(to);
  }

  virtual void marshal(cdrStream& s) const
  {
    cxy::cdr<uint32_t>::marshal((uint32_t)TypeKind::ANY, s);
  }
  
  virtual bool equals(TypeCode const& b) const throw()
  {
    AnyImplTypeCode const* b_(dynamic_cast<AnyImplTypeCode const*>(&b));
    return b_;
  }
  virtual bool lessThan(TypeCode const& b) const throw()
  {
    xju::assert_equal(typeid(*this),typeid(b));
    return false;
  }
  virtual std::string str() const throw()
  {
    return "any";
  }
};

template<>
struct TypeCodeOf<AnyImpl>
{
static std::shared_ptr<TypeCode> create() throw(std::bad_alloc)
{
  return std::shared_ptr<TypeCode>(
    new AnyImplTypeCode);
}
};
  
template<>
class cdr< std::shared_ptr<TypeCode> >
{
public:
  static std::shared_ptr<TypeCode> unmarshalFrom(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint32_t k(cxy::cdr<uint32_t>::unmarshalFrom(s));
    switch(static_cast<cxy::TypeKind>(k)) {
    case cxy::TypeKind::SHORT:
      return TypeCodeOf<int16_t>::create();
    case cxy::TypeKind::LONG:
      return TypeCodeOf<int32_t>::create();
    case cxy::TypeKind::ANY:
      return TypeCodeOf<AnyImpl>::create();
    case cxy::TypeKind::SEQUENCE:
    {
      EncapsulationCdrStream es(s);
      auto const t(cdr< std::shared_ptr<TypeCode> >::unmarshalFrom(*es));
      auto const maxSize(cdr<uint32_t>::unmarshalFrom(*es));
      return std::shared_ptr<TypeCode>(new SequenceTypeCode(t,maxSize));
    }
    case cxy::TypeKind::STRUCT:
    {
      EncapsulationCdrStream es(s);
      auto const repoId(cdr<std::string>::unmarshalFrom(*es));
      auto const name(cdr<std::string>::unmarshalFrom(*es));
      auto const numberOfMembers(cdr<uint32_t>::unmarshalFrom(*es));
      StructTypeCode::Members members;
      for(auto i=0; i!=numberOfMembers; ++i) {
        auto name(cdr<std::string>::unmarshalFrom(*es));
        auto const t(cdr< std::shared_ptr<TypeCode> >::unmarshalFrom(*es));
        members.push_back(std::make_pair(name,t));
      }
      return std::shared_ptr<TypeCode>(new StructTypeCode(
                                         repoId,
                                         name,
                                         members));
    }
    default:
      std::ostringstream s;
      s << "unimplemented type kind " << k;
      throw CORBA::MARSHAL(26,CORBA::COMPLETED_NO);
    }
  }

  static void marshal(std::shared_ptr<TypeCode const> x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x->marshal(s);
  }
};
  
}
