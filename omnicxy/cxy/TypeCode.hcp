// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/cdr.hh>
#include <cxy/TypeKind.hh>

#include <omniORB4/CORBA.h> //impl
#include <omniORB4/cdrStream.h> //impl
#include <memory>

class cdrStream;

namespace cxy
{
class TypeCode
{
public:
  virtual ~TypeCode() throw(){}

  virtual void copyValue(cdrStream& from, cdrStream& to) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  = 0;

  virtual void marshal(cdrStream& s) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  = 0;

  virtual bool equals(TypeCode const& b) const throw() = 0;

  virtual std::string str() const throw() = 0;
};
std::ostream& operator<<(std::ostream& s, TypeCode const& x) throw()
{
  return s << x.str();
}

template<class T>
class TypeCodeOf : public TypeCode // must specialise
{
};

template<class T>
std::shared_ptr<TypeCode> typeCodeOf(T const&) throw()
{
  return std::shared_ptr<TypeCode>(new TypeCodeOf<T>);
}

template<>  
class TypeCodeOf<int16_t> : public TypeCode
{
public:
  virtual void copyValue(cdrStream& from, cdrStream& to) const
  {
    cxy::cdr<int16_t>::marshal(
      cxy::cdr<int16_t>::unmarshalFrom(from),
      to);
  }

  virtual void marshal(cdrStream& s) const
  {
    cxy::cdr<uint32_t>::marshal((uint32_t)TypeKind::SHORT, s);
  }
  
  virtual bool equals(TypeCode const& b) const throw()
  {
    TypeCodeOf const* b_(dynamic_cast<TypeCodeOf const*>(&b));
    return b_;
  }
  virtual std::string str() const throw()
  {
    return "int16_t";
  }
};

template<>
class cdr< std::shared_ptr<TypeCode> >
{
public:
  static std::shared_ptr<TypeCode> unmarshalFrom(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint32_t k(cxy::cdr<uint32_t>::unmarshalFrom(s));
    switch(static_cast<cxy::TypeKind>(k)) {
    case cxy::TypeKind::SHORT:
      return std::shared_ptr<TypeCode>(new TypeCodeOf<int16_t>);
    default:
      std::ostringstream s;
      s << "unimplemented type kind " << k;
      throw CORBA::MARSHAL(26,CORBA::COMPLETED_NO);
    }
  }

  static void marshal(std::shared_ptr<TypeCode const> x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x->marshal(s);
  }
};
  
bool operator==(TypeCode const& a, TypeCode const& b) throw()
{
  return a.equals(b);
}
  
}
