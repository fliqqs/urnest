// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/cdr.hh> //impl
#include <cinttypes>
#include <memory>
#include <cxy/AnyImpl.hh>
#include <cxy/Exception.hh>
#include <sstream> //impl
#include <cxy/translateCorbaException.hh>
#include <cxy/TypeCode.hh>

namespace cxy
{
template<class T>
class any
{
public:
  static std::shared_ptr<AnyImpl> encode(T const& x) throw()
  {
    TypeCode typeCode(::cxy::createTypeCodeOf<T>());
    MemCdrStream value;
    ::cxy::cdr<T>::marshal(x,*value);
    return std::shared_ptr<AnyImpl>(new AnyImpl(typeCode,value));
  }
  static bool isA(AnyImpl const& x) throw()
  {
    return ::cxy::createTypeCodeOf<T>()->equals(*x.typeCode_);
  }
  
  static T decode(AnyImpl const& x) throw(
    cxy::Exception)
  {
    if (!isA(x)) {
      std::ostringstream s;
      s << "Any contains a " << (*x.typeCode_)
        << ", not a " << typeid(T).name();
      throw ::cxy::Exception(s.str(),std::make_pair(__FILE__,__LINE__));
    }
    try {
      MemCdrStream::Ref value(x.value_);
      return ::cxy::cdr<T>::unmarshalFrom(*value);
    }
    catch(CORBA::Exception& ex) {
      ::cxy::Exception e(translateCorbaException(ex));
      std::ostringstream s;
      s << "extract " << typeid(T).name() << " from Any containing "
        << (*x.typeCode_);
      e.addContext(s.str(), std::make_pair(__FILE__,__LINE__));
      throw e;
    }
  }
};

}

