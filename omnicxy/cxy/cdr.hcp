// Copyright (c) 2014 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <omniORB4/CORBA.h> //impl
#include <omniORB4/cdrStream.h> //impl
#include <stdint.h>
#include <string>

class cdrStream;

namespace cxy
{

template<class T>
class cdr
{
};

template<>
class cdr<uint16_t>
{
public:
  static uint16_t unmarshalFrom(cdrStream& s) throw(
    //REVISIT
    )
  {
    uint16_t result;
    (::CORBA::Short&)result <<= s;
    return result;
  }
  static void marshal(uint16_t const x, cdrStream& s) throw()
  {
    x >>= s;
  }
};

  
template<>
class cdr<uint32_t>
{
public:
  static uint32_t unmarshalFrom(cdrStream& s) throw(
    //REVISIT
    )
  {
    uint32_t result;
    (::CORBA::Long&)result <<= s;
    return result;
  }
  static void marshal(uint32_t const x, cdrStream& s) throw()
  {
    ((CORBA::ULong)x) >>= s;
  }
  
};

  
template<>
class cdr<double>
{
public:
  static double unmarshalFrom(cdrStream& s) throw(
    //REVISIT
    )
  {
    double result;
    (::CORBA::Double&)result <<= s;
    return result;
  }
  static void marshal(double const x, cdrStream& s) throw()
  {
    x >>= s;
  }
  
};

  
template<>
class cdr<std::string>
{
public:
  static std::string unmarshalFrom(cdrStream& s) throw(
    //REVISIT
    )
  {
    char* r(s.unmarshalString(0));
    std::string result(r);
    CORBA::string_free(r);
    return result;
  }
  static void marshal(std::string const& x, cdrStream& s) throw()
  {
    s.marshalString(x.c_str(),0);
  }
  
};

  
}


