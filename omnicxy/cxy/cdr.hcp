// Copyright (c) 2014 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <omniORB4/CORBA.h> //impl
#include <omniORB4/cdrStream.h> //impl
#include <omniORB4/IOP.h> //impl
#include <stdint.h>
#include <string>
#include <vector>
#include <xju/Tagged.hh>
#include <xju/Int.hh>
#include <xju/Float.hh>
#include "IOR.hh"
#include "TaggedProfileList.hh" //impl
#include <cxy/EncapsulationCdrStream.hh> //impl
#include <cxy/optional.hh>

class cdrStream;

namespace cxy
{
class EncapsulationCdrStream;

template<class T>
class cdr
{
};

template<>
class cdr<uint8_t>
{
public:
  static uint8_t unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint8_t result(s.unmarshalOctet());
    return result;
  }
  static void marshal(uint8_t const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    s.marshalOctet(x);
  }
};

  
template<>
class cdr<uint16_t>
{
public:
  static uint16_t unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint16_t result;
    (::CORBA::UShort&)result <<= s;
    return result;
  }
  static void marshal(uint16_t const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    ((::CORBA::UShort)x) >>= s;
  }
};

  
template<>
class cdr<uint32_t>
{
public:
  static uint32_t unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint32_t result;
    (::CORBA::ULong&)result <<= s;
    return result;
  }
  static void marshal(uint32_t const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    ((CORBA::ULong)x) >>= s;
  }
  
};

  
template<>
class cdr<uint64_t>
{
public:
  static uint64_t unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint64_t result;
    (::CORBA::ULongLong&)result <<= s;
    return result;
  }
  static void marshal(uint64_t const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    ((CORBA::ULongLong)x) >>= s;
  }
  
};

  
template<>
class cdr<int16_t>
{
public:
  static int16_t unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    int16_t result;
    (::CORBA::Short&)result <<= s;
    return result;
  }
  static void marshal(int16_t const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x >>= s;
  }
};

  
template<>
class cdr<int32_t>
{
public:
  static int32_t unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    int32_t result;
    (::CORBA::Long&)result <<= s;
    return result;
  }
  static void marshal(int32_t const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    ((CORBA::ULong)x) >>= s;
  }
  
};

  
template<>
class cdr<int64_t>
{
public:
  static int64_t unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    int64_t result;
    (::CORBA::LongLong&)result <<= s;
    return result;
  }
  static void marshal(int64_t const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    ((CORBA::ULongLong)x) >>= s;
  }
  
};

  
template<>
class cdr<bool>
{
public:
  static bool unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    bool result(s.unmarshalBoolean());
    return result;
  }
  static void marshal(bool const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    s.marshalBoolean(x);
  }
  
};

  
template<>
class cdr<double>
{
public:
  static double unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    double result;
    (::CORBA::Double&)result <<= s;
    return result;
  }
  static void marshal(double const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x >>= s;
  }
  
};

  
template<>
class cdr<float>
{
public:
  static float unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    float result;
    (::CORBA::Float&)result <<= s;
    return result;
  }
  static void marshal(float const x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x >>= s;
  }
  
};

  
template<>
class cdr<std::string>
{
public:
  static std::string unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    char* r(s.unmarshalString(0));
    std::string result(r);
    CORBA::string_free(r);
    return result;
  }
  static void marshal(std::string const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    s.marshalString(x.c_str(),0);
  }
  
};

template<>
class cdr<EncapsulationCdrStream>
{
public:
  static EncapsulationCdrStream unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    return EncapsulationCdrStream(s);
  }
  static void marshal(EncapsulationCdrStream const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x.marshalTo(s);
  }
};

  
template<class Tag, class Impl, class E>
class cdr<xju::Int<Tag, Impl, E> >
{
public:
  static xju::Int<Tag, Impl, E> unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    return xju::Int<Tag, Impl, E>(cdr<Impl>::unmarshalFrom(s));
  }
  static void marshal(xju::Int<Tag, Impl, E> const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr<Impl>::marshal(x.value(), s);
  }

};

  
template<class Tag, class Impl, class E>
class cdr<xju::Float<Tag, Impl, E> >
{
public:
  static xju::Float<Tag, Impl, E> unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    return xju::Float<Tag, Impl, E>(cdr<Impl>::unmarshalFrom(s));
  }
  static void marshal(xju::Float<Tag, Impl, E> const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr<Impl>::marshal(x.value(), s);
  }

};

  
template<class Impl, class Tag>
class cdr<xju::Tagged<Impl, Tag> >
{
public:
  static xju::Tagged<Impl, Tag> unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    return xju::Tagged<Impl, Tag>(cdr<Impl>::unmarshalFrom(s));
  }
  static void marshal(xju::Tagged<Impl, Tag> const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr<Impl>::marshal(x._, s);
  }

};

template<class T>
class cdr< std::vector<T> >
{
public:
  static std::vector<T> unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint32_t const length(cdr<uint32_t>::unmarshalFrom(s));
    std::vector<T> result;
    for(uint32_t i=0; i!=length; ++i) {
      result.push_back(cdr<T>::unmarshalFrom(s));
    }
    return result;
  }
  static void marshal(std::vector<T> const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr<uint32_t>::marshal(x.size(),s);
    for(typename std::vector<T>::const_iterator i=x.begin(); i!=x.end(); ++i) {
      cdr<T>::marshal(*i, s);
    }
  }
};
  
template<>
class cdr< IORImpl >
{
public:
  static IORImpl unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    std::string const repoId(cdr< std::string >::unmarshalFrom(s));
    IOP::TaggedProfileList profiles;
    (IOP::TaggedProfileList&)profiles <<= s;
    return IORImpl(repoId,cxy::TaggedProfileList(profiles));
  }
  static void marshal(IORImpl const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr< std::string >::marshal(x.repoID(),s);
    (const IOP::TaggedProfileList&)x.profiles() >>= s;
  }
};
  
template<class T>
class cdr< IOR<T> >
{
public:
  static IOR<T> unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    return IOR<T>(IORImpl(cdr<IORImpl>::unmarshalFrom(s)));
  }
  static void marshal(IOR<T> const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr<IORImpl>::marshal(x,s);
  }
};

template<class T>
class cdr<cxy::optional<T> >
{
public:
  static cxy::optional<T> unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    uint32_t const length(cdr<uint32_t>::unmarshalFrom(s));
    if (!length) {
      return cxy::optional<T>();
    }
    T result(cdr<T>::unmarshalFrom(s));
    return cxy::optional<T>(result);
  }
  static void marshal(cxy::optional<T> const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    cdr<uint32_t>::marshal(x.valid(),s);
    if (x.valid()) {
      cdr<T>::marshal(x.value(), s);
    }
  }

};
  
}
