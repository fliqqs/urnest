// Copyright (c) 2014 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#ifndef CXY_ORB_H
#define CXY_ORB_H

#include "ORBImpl.hh"
#include <algorithm>
#include <functional>
#include <typeinfo>
#include <xju/functional.hh>

namespace cxy
{
class ORBImpl;

template<class T>
class cref;

template<class BaseException, class I>
void copyContext(I begin, I end, BaseException& e) throw()
{
  for(; begin != end; ++begin) {
    e.addContext(*begin);
  }
}

template<class BaseException>
class ORB
{
public:
  explicit ORB(std::string const& orbEndPoint) throw(BaseException) try:
    impl_(orbEndPoint) {
  }
  catch(xju::Exception& e)
  {
    if (&typeid(xju::Exception)==&typeid(BaseException)) {
      throw;
    }
    BaseException x(e.cause().first, e.cause().second);
    copyContext(e.context().begin(), 
                e.context().end(),
                x);
    throw x;
  }
private:
  ORBImpl impl_;

  template<class T>
  friend class cref;
};
  
}

#endif
