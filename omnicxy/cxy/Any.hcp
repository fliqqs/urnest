// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/Exception.hh>

#include <cxy/AnyImpl.hh>
#include <memory>
#include <cxy/translateException.hh>

namespace cxy
{
template<class T>
class any;

template<class E=cxy::Exception>
class Any
{
public:
  // unmarshal
  explicit Any(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
      :
      impl_(AnyImpl::unmarshal(s))
  {
  }
  
  template<class T>
  Any(T const& x) throw():
      impl_(::cxy::any<T>::encode(x))
  {
  }

  template<class T>
  bool isA() const throw()
  {
    return ::cxy::any<T>::isA(*impl_);
  }
  
  //pre: isA<T>()
  template<class T>
  T get() const throw(
    //not a T, or value incompatible with T (eg out of range)
    E)
  {
    try {
      return ::cxy::any<T>::decode(*impl_);
    }
    catch(cxy::Exception& e) {
      throw translateException<E>(e);
    }
  }
  
  void marshalTo(cdrStream& s) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    ::cxy::cdr< ::cxy::TypeCode >::marshal(impl_->typeCode_,s);
    MemCdrStream::Ref value(impl_->value_);
    impl_->typeCode_->copyValue(*value,s);
  }
private:
  std::shared_ptr<AnyImpl const> impl_;

  friend bool operator<(Any const& a, Any const& b) throw(){
    return *a.impl_ < *b.impl_;
  }
  friend bool operator>(Any const& a, Any const& b) throw(){
    return *a.impl_ > *b.impl_;
  }
  friend bool operator==(Any const& a, Any const& b) throw(){
    return *a.impl_ == *b.impl_;
  }
  friend bool operator<=(Any const& a, Any const& b) throw(){
    return *a.impl_ <= *b.impl_;
  }
  friend bool operator>=(Any const& a, Any const& b) throw(){
    return *a.impl_ >= *b.impl_;
  }
};

template<class E>
class cdr< Any<E> >
{
public:
  static Any<E> unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    return Any<E>(s);
  }
  static void marshal(Any<E> const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x.marshalTo(s);
  }
};

template<class E>
struct TypeCodeOf<Any<E> >
{
static TypeCode create(TypeCodeRefIndex& index) throw(std::bad_alloc)
{
  // REVISIT: create template AnyTypeCode to translate exceptions?
  return TypeCode(
    std::shared_ptr<TypeCode_>(new AnyTypeCode));
}
};

}
