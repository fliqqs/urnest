// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <cxy/cdr.hh>

#include <omniORB4/CORBA.h>//impl
#include <omniORB4/cdrStream.h> //impl
#include <new>
#include <cinttypes>
#include <cxy/cdrEncapsulationStream_.hh> //impl
#include <cxy/cdrMemoryStream_.hh> //impl

class cdrStream;
class cdrMemoryStream;

namespace cxy
{
class cdrEncapsulationStream_;

// Encapsulation CDR stream has a leading byte-order byte
// 0=Big Endian, 1=Little Endian, followed by CDR encoded
// data (CORBA 3.3 9.3.3 Encapsulation)
class EncapsulationCdrStream
{
public:
  EncapsulationCdrStream() throw(std::bad_alloc):
      s_(new cdrEncapsulationStream_)
  {
  }
  // unmarshal from s
  explicit EncapsulationCdrStream(cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  std::bad_alloc
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
    : s_(0)
  {
    uint32_t const c(cxy::cdr<uint32_t>::unmarshalFrom(s));
    std::unique_ptr<cdrMemoryStream> es(
      new cxy::cdrMemoryStream_(c,s.TCS_C(),s.TCS_W()));

    s.copy_to(*es,c);
    bool const byteSwap(cxy::cdr<bool>::unmarshalFrom(*es));
    es->setByteSwapFlag(byteSwap);
    s_=es.release();
  }
  void marshalTo(cdrStream& s) const
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    uint32_t const size(s_->bufSize());
    cxy::cdr<uint32_t>::marshal(size,s);
    s.put_octet_array((const _CORBA_Octet*)s_->bufPtr(),size);
  }
  
  cdrStream& operator*() throw()
  {
    return *s_;
  }
  cdrStream const& operator*() const throw()
  {
    return *s_;
  }
  ~EncapsulationCdrStream() throw()
  {
    delete s_;
  }

  EncapsulationCdrStream(EncapsulationCdrStream const& b) throw(std::bad_alloc):
      s_(new cdrMemoryStream(*b.s_))
  {
  }
  
  EncapsulationCdrStream& operator=(EncapsulationCdrStream const& b) throw(
    std::bad_alloc)
  {
    if (s_ != b.s_) {
      delete s_;
      s_=new cdrMemoryStream(*b.s_);
    }
  }

private:
  cdrMemoryStream* s_;
};

template<>
class cdr<EncapsulationCdrStream>
{
public:
  static EncapsulationCdrStream unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  CORBA::SystemException,
  //  omni::giopStream::CommFailure
  //  )
  {
    return EncapsulationCdrStream(s);
  }
  static void marshal(EncapsulationCdrStream const& x, cdrStream& s)
  //to avoid needing CORBA.h in our .hh, exception specs are commented
  //throw(
  //  omni::giopStream::CommFailure
  //)
  {
    x.marshalTo(s);
  }
};

  
  
}
