// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <cxy/TypeTag.hh>
#include <cxy/TypeCode.hh>

#include <cxy/any_.hh>
#include <cxy/chrono.cdr.hh>

namespace cxy
{
template<>
struct TypeCodeOf< ::std::chrono::nanoseconds >
{
  static ::cxy::TypeCode create(TypeCodeRefIndex& index) /*throw(std::bad_alloc)*/
  {
    return ::cxy::TypeCodeOf< int64_t >::create(index);
  }
};

template<>
struct TypeCodeOf< ::std::chrono::microseconds >
{
  static ::cxy::TypeCode create(TypeCodeRefIndex& index) /*throw(std::bad_alloc)*/
  {
    return ::cxy::TypeCodeOf< int64_t >::create(index);
  }
};

template<>
struct TypeCodeOf< ::std::chrono::milliseconds >
{
  static ::cxy::TypeCode create(TypeCodeRefIndex& index) /*throw(std::bad_alloc)*/
  {
    return ::cxy::TypeCodeOf< int64_t >::create(index);
  }
};

template<>
struct TypeCodeOf< ::std::chrono::seconds >
{
  static ::cxy::TypeCode create(TypeCodeRefIndex& index) /*throw(std::bad_alloc)*/
  {
    return ::cxy::TypeCodeOf< int64_t >::create(index);
  }
};

template<>
struct TypeCodeOf< ::std::chrono::minutes >
{
  static ::cxy::TypeCode create(TypeCodeRefIndex& index) /*throw(std::bad_alloc)*/
  {
    return ::cxy::TypeCodeOf< int64_t >::create(index);
  }
};

template<>
struct TypeCodeOf< ::std::chrono::hours >
{
  static ::cxy::TypeCode create(TypeCodeRefIndex& index) /*throw(std::bad_alloc)*/
  {
    return ::cxy::TypeCodeOf< int64_t >::create(index);
  }
};

}

