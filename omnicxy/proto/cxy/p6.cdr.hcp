// generated from p6.idl by omnicxy cxycdr idl backend

#include <cxy/cdr.hh>

#include "p6.hh"


namespace cxy
{
template<>
class cdr< ::p6::EEE>
{
public:
  static ::p6::EEE unmarshalFrom(cdrStream& s) 
  //to avoid needing CORBA.h in our .hh, excepiton specs are commented
  //throw(
  //  CORBA::SystemException
  //  )
  {
    int32_t const p1(cdr< int32_t>::unmarshalFrom(s));
    std::string const p2(cdr< std::string>::unmarshalFrom(s));
    return ::p6::EEE(p1,p2,
             //cxy::Exception params
             std::string("IDL:p6/EEE:1.0"), std::make_pair(__FILE__,__LINE__));
  }  
  static void marshal(p6::EEE const& x, cdrStream& s) throw()
  {
    cdr< int32_t>::marshal(x.a_,s);
    cdr< std::string>::marshal(x.b_,s);
  }
  static const char repoId[]="IDL:p6/EEE:1.0";
};
template<>
class cdr< ::p6::F>
{
public:
  static const char repoId[]="IDL:p6/F:1.0";
};

}

