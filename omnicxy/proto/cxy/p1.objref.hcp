// generated by cxy.objref idl backend from p1.idl specifying 
// xju::Exception from "xju/Exception.hh" as base class for all ipc exceptions
#include "p1.hh"
#include "p1.cdr.hh"

#include <cxy/objref.hh>
#include <cxy/calldesc.hh>
#include <cxy/translateException.hh>

#include <xju/NotCopyable.hh>

#include <omniORB4/CORBA.h>

#include <omniORB4/callDescriptor.h> // impl
#include <cxy/pof.hh> // impl

namespace
{

template<>
class cxy::calldesc<p1::F>
{
public:
  class f1 : public omniORB4::omniCallDescriptor
  {
  public:
    static void lcfn(omniCallDescriptor* calldesc, omniServant* svnt)
    {
      p1::F* impl=(p1::F*)svnt->_ptrToInterface(cxy::cdr<p1::F>::repoId);
      impl->f1();
    }
    
    f1(const char* op_,
       size_t oplen,
       CORBA_Boolean upcall=0):
        omniORB4::omniCallDescriptor(
          &f1::lcfn, op_, oplen, 0, _user_exns, 0, upcall)
    {
    }
    static const char* const _user_exns[] = {
      0
    };
  };
};

}
  
template<>
class cxy::objref<p1::F>:
  public virtual p1::F,
  public virtual ::CORBA::Object,
  public virtual omniObjRef,
  public xju::NotCopyable
{
public:
  inline objref()  { _PR_setobj(0); }  // nil
  objref(omniIOR*, omniIdentity*) throw() :
      omniObjRef(cxy::cdr<p1::F>::repoId, ior, id, 1) {
    _PR_setobj(this);
  }
  
  // p1::F::
  void f1() throw(
    xju::Exception)
  {
    try {
      cxy::calldesc<p1::F>::f1 c("f1", 3);
      _invoke(c);
    }
    catch(CORBA::Exception const& ee) {
      xju::Exception e(cxy::translateException<xju::Exception>(ee));
      e.addContext("p1::F::f1()");            // REVISIT: add ior / id
      throw e;
    }
  }
  
protected:
  virtual ~objref_F() throw(){
  }
  
private:
  // CORBA::Object::
  virtual void* _ptrToObjRef(const char* repoId)
  {
    if (repoId == cxy::cdr<p1::F>::repoId)
      return this;
    
    if (omni::strMatch(repoId, cxy::cdr<p1::F>::repoId))
      return this;
    
    if (repoId == ::CORBA::Object::_PD_repoId)
      return (::CORBA::Object_ptr) this;
    
    if (omni::strMatch(repoId, ::CORBA::Object::_PD_repoId))
      return (::CORBA::Object_ptr) this;
    
    return 0;
};

namespace
{
template<>
class cxy::pof<p1::F> : public omniORB4::proxyObjectFactory {
public:
  pof() : omniORB4::proxyObjectFactory(cxy::cdr<p1::F>::repoId){
  }
  virtual ~pof();
  
  virtual omniObjRef* newObjRef(omniIOR* ior,omniIdentity* id)
  {
    return new cxy::objref<p1::F>(ior, id);
  }
  
  virtual _CORBA_Boolean is_a(const char* repoId) const
  {
    if (repoId==cxy::cdr<p1::F>::repoId ||
        omni::ptrStrMatch(repoId, cxy::cdr<p1::F>::repoId)) {
      return 1;
    }
    return 0;
  }

  static pof me;
};
}

