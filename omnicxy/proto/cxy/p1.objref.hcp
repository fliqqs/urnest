// generated from p1.idl by omnicxy cxyobjref idl backend specifying 
// cxy::Exception from <cxy/Exception.hh> as base class for all ipc exceptions
#include "p1.hh"
#include "p1.cdr.hh"

#include <cxy/objref.hh>
#include <cxy/translateException.hh>
#include <cxy/pof.hh>

#include <xju/NonCopyable.hh>

#include <omniORB4/CORBA.h>
#include <omniORB4/callDescriptor.h>

namespace cxy
{

template<>
class objref< ::p1::F>:
  public virtual ::p1::F,
  public virtual ::CORBA::Object,
  public virtual omniObjRef,
  public xju::NonCopyable
{
public:
  inline objref()  { _PR_setobj(0); }  // nil
  objref(omniIOR* ior, omniIdentity* id) throw() :
      omniObjRef(cxy::cdr< ::p1::F>::repoId, ior, id, 1) {
    _PR_setobj(this);
  }
    
  // p1::F::
  void f1() throw(
    cxy::Exception)
  {
    try {
      calldesc::f1 c("f1", 3, 0);
      _invoke(c);
    }
    catch(CORBA::Exception const& ee) {
      cxy::Exception e(cxy::translateException<cxy::Exception>(ee));
      e.addContext("p1::F::f1()", std::make_pair(__FILE__, __LINE__)); // REVISIT: add ior / id
      throw e;
    }
  }
  

protected:
  virtual ~objref() throw(){
  }
  
private:
  class calldesc
  {
  public:
        
    class f1 : public omniCallDescriptor
    {
    public:
      static void lcfn(omniCallDescriptor* calldesc, omniServant* svnt)
      {
        ::p1::F* impl=(::p1::F*)svnt->_ptrToInterface(cxy::cdr< ::p1::F>::repoId);
        impl->f1();
      }
      f1(const char* op_,
         size_t oplen,
         _CORBA_Boolean upcall):
          omniCallDescriptor(
            &f1::lcfn, op_, oplen, 0, _user_exns, 0, upcall)
      {
      }
      static const char* const _user_exns[] = {
        0
      };
    };
    
  };
  // CORBA::Object::
  virtual void* _ptrToObjRef(const char* repoId)
  {
    if (repoId == cxy::cdr< ::p1::F>::repoId)
      return this;
    
    if (omni::strMatch(repoId, cxy::cdr< ::p1::F>::repoId))
      return this;
    
    if (repoId == ::CORBA::Object::_PD_repoId)
      return (::CORBA::Object_ptr) this;
    
    if (omni::strMatch(repoId, ::CORBA::Object::_PD_repoId))
      return (::CORBA::Object_ptr) this;
    
    return 0;
  }
};

template<>
class pof< ::p1::F> : public omni::proxyObjectFactory {
public:
  pof() : omni::proxyObjectFactory(cxy::cdr< ::p1::F>::repoId){
  }
  virtual ~pof()
  {
  }
  
  virtual omniObjRef* newObjRef(omniIOR* ior,omniIdentity* id)
  {
    return new cxy::objref< ::p1::F>(ior, id);
  }
  
  virtual _CORBA_Boolean is_a(const char* repoId) const
  {
    if (repoId==cxy::cdr< ::p1::F>::repoId ||
        omni::ptrStrMatch(repoId, cxy::cdr< ::p1::F>::repoId)) {
      return 1;
    }
    return 0;
  }

  static pof< ::p1::F>& me_() throw()
  {
    return me;
  }
  static pof< ::p1::F> me;
};

}

