// generated from p7.idl by omnicxy cxyobjref idl backend specifying 
// E from "E.hh" as base class for all ipc exceptions
#include "p7.hh"
#include "p7.cdr.hh"

#include <cxy/objref.hh>
#include <cxy/translateException.hh>
#include <cxy/pof.hh>

#include <xju/NonCopyable.hh>
#include <xju/Optional.hh>

#include <omniORB4/CORBA.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/IOP_C.h>


namespace cxy
{

template<>
class objref< ::p7::F>:
  public virtual ::p7::F,
  public virtual ::CORBA::Object,
  public virtual omniObjRef,
  public xju::NonCopyable
{
public:
  inline objref()  { _PR_setobj(0); }  // nil
  objref(omniIOR* ior, omniIdentity* id) throw() :
      omniObjRef(cxy::cdr< ::p7::F>::repoId, ior, id, 1) {
    _PR_setobj(this);
  }
  std::string uri_;

    
  // p7::F::
  void f1() throw(
    E)
  {
    try {
      try {
        calldesc::f1 c("f1", 2+1, 0);
        _invoke(c);
      }
      catch(CORBA::Exception const& ee) {
        throw cxy::translateException< E>(ee);
      }
    }
    catch(E& e) {
      e.addContext(uri_+"->p7::F::f1()", std::make_pair(__FILE__, __LINE__));
      throw;
    }
  }
    
  // p7::F::
  void f2() throw(
    E)
  {
    try {
      try {
        calldesc::f2 c("f2", 2+1, 0);
        _invoke(c);
      }
      catch(CORBA::Exception const& ee) {
        throw cxy::translateException< E>(ee);
      }
    }
    catch(E& e) {
      e.addContext(uri_+"->p7::F::f2()", std::make_pair(__FILE__, __LINE__));
      throw;
    }
  }
  

protected:
  virtual ~objref() throw(){
  }
  
private:
  class calldesc
  {
  public:
        
    class f1 : public omniCallDescriptor
    {
    public:
      f1(
        const char* op_,
        size_t oplen,
        _CORBA_Boolean upcall) throw():
          omniCallDescriptor(
            &f1::lcfn, op_, oplen, 0, _user_exns, 1, upcall)
      {
      }
      
    
      // omniCallDescriptor::
      void marshalArguments(cdrStream& s) // REVISIT: throw
      {
      }
      void unmarshalReturnedValues(cdrStream& s) // REVISIT: throw
      {
      }
      void userException(cdrStream& s,
                         omni::IOP_C* iop_client,
                         const char* repoId)//REVISIT: throw
      {
        if (omni::strMatch(repoId, cxy::cdr< ::p7::E1>::repoId)) {
          ::p7::E1 _ex(cxy::cdr< ::p7::E1>::unmarshalFrom(s));
          if (iop_client){
            iop_client->RequestCompleted();
          }
          throw _ex;
        }
    
        if (iop_client) iop_client->RequestCompleted(1);
        OMNIORB_THROW(UNKNOWN,omni::UNKNOWN_UserException,
                      (::CORBA::CompletionStatus)s.completion());
      }
    
      static void lcfn(omniCallDescriptor* calldesc, omniServant* svnt)
      {
        ::p7::F* impl=(::p7::F*)svnt->_ptrToInterface(cxy::cdr< ::p7::F>::repoId);
        f1* cd((f1*)calldesc);
         impl->f1();
      }
      static const char* const _user_exns[] = {
        "IDL:p7/E1:1.0",
        0
      };
    };
        
    class f2 : public omniCallDescriptor
    {
    public:
      f2(
        const char* op_,
        size_t oplen,
        _CORBA_Boolean upcall) throw():
          omniCallDescriptor(
            &f2::lcfn, op_, oplen, 0, _user_exns, 1, upcall)
      {
      }
      
    
      // omniCallDescriptor::
      void marshalArguments(cdrStream& s) // REVISIT: throw
      {
      }
      void unmarshalReturnedValues(cdrStream& s) // REVISIT: throw
      {
      }
      void userException(cdrStream& s,
                         omni::IOP_C* iop_client,
                         const char* repoId)//REVISIT: throw
      {
        if (omni::strMatch(repoId, cxy::cdr< ::p7::E1>::repoId)) {
          ::p7::E1 _ex(cxy::cdr< ::p7::E1>::unmarshalFrom(s));
          if (iop_client){
            iop_client->RequestCompleted();
          }
          throw _ex;
        }
    
        if (iop_client) iop_client->RequestCompleted(1);
        OMNIORB_THROW(UNKNOWN,omni::UNKNOWN_UserException,
                      (::CORBA::CompletionStatus)s.completion());
      }
    
      static void lcfn(omniCallDescriptor* calldesc, omniServant* svnt)
      {
        ::p7::F* impl=(::p7::F*)svnt->_ptrToInterface(cxy::cdr< ::p7::F>::repoId);
        f2* cd((f2*)calldesc);
         impl->f2();
      }
      static const char* const _user_exns[] = {
        "IDL:p7/E1:1.0",
        0
      };
    };
    
  };
  // CORBA::Object::
  virtual void* _ptrToObjRef(const char* repoId)
  {
    if (repoId == cxy::cdr< ::p7::F>::repoId)
      return this;
    
    if (omni::strMatch(repoId, cxy::cdr< ::p7::F>::repoId))
      return this;
    
    if (repoId == ::CORBA::Object::_PD_repoId)
      return (::CORBA::Object_ptr) this;
    
    if (omni::strMatch(repoId, ::CORBA::Object::_PD_repoId))
      return (::CORBA::Object_ptr) this;
    
    return 0;
  }
};

template<>
class pof< ::p7::F> : public omni::proxyObjectFactory {
public:
  pof() : omni::proxyObjectFactory(cxy::cdr< ::p7::F>::repoId){
  }
  virtual ~pof()
  {
  }
  
  virtual omniObjRef* newObjRef(omniIOR* ior,omniIdentity* id)
  {
    return new cxy::objref< ::p7::F>(ior, id);
  }
  
  virtual _CORBA_Boolean is_a(const char* repoId) const
  {
    if (repoId==cxy::cdr< ::p7::F>::repoId ||
        omni::ptrStrMatch(repoId, cxy::cdr< ::p7::F>::repoId)) {
      return 1;
    }
    return 0;
  }

  static pof< ::p7::F>& me_() throw()
  {
    return me;
  }
  static pof< ::p7::F> me;
};

}

