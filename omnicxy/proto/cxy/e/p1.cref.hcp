// generated from p1.idl by omni cxy_cref idl backend specifying 
// E from "E.hh" as base class for all exceptions
#include <cxy/cref.hh>
#include <cxy/Exceptions.hh>
#include <cxy/ORB.hh>

#include "p1.hh"

#include "p1.objref.hh" // impl
#include "p1.cdr.hh" // impl
#include <cxy/translateException.hh> // impl
#include <xju/format.hh> // impl
#include <xju/assert.hh> // impl

#include "E.hh"

namespace cxy
{
template<class T>
class objref;

template<>
class cref< ::p1::F>
{
public:
  explicit cref(cxy::ORB<E>& orb, std::string const& uri) throw(
    // no object with specified uri, including server
    // not reachable and server does not know name
    cxy::Exceptions<E>::NoSuchObject,
    // object with specified uri is not a p1::F
    cxy::Exceptions<E>::WrongType,
    // other failure, eg communication failure
    E):
      uri_(uri),
      obj_((&cxy::pof< ::p1::F>::me_(), // force init of static var,
            (cxy::objref< ::p1::F>*)0))
  {
    try {
      try {
        CORBA::Object_var x(orb.impl_.orb_->string_to_object(uri.c_str()));
        if (CORBA::is_nil(x)) {
          std::ostringstream s;
          s << xju::format::quote(uri) << " is nil";
          throw cxy::Exceptions<E>::NoSuchObject(
            s.str(), std::make_pair(__FILE__, __LINE__));
        }
        obj_ = 
          (cxy::objref< ::p1::F>*)
          x->_PR_getobj()->_realNarrow(cxy::cdr< ::p1::F>::repoId);
        if (obj_==0) {
          std::ostringstream s;
          s << xju::format::quote(uri) << " is not a "
            << cxy::cdr< ::p1::F>::repoId;
          throw cxy::Exceptions<E>::WrongType(
            s.str(), std::make_pair(__FILE__, __LINE__));
        }
      }
      catch(CORBA::Exception const& ee) {
        throw cxy::translateException<E>(ee);
      }
    }
    catch(E& e) {
      std::ostringstream s;
      s << "locate object "
        << xju::format::quote(uri)
        << " of type "
        << cxy::cdr< ::p1::F>::repoId;
      e.addContext(s.str(), std::make_pair(__FILE__, __LINE__));
      throw;
    }
  }
  
  cref(cref const& b) throw():
      uri_(b.uri_),
      obj_(b.obj_)
  {
    if (obj_ && !obj_->_NP_is_nil())  omni::duplicateObjRef(obj_);
  }

  cref< ::p1::F>& operator=(cref< ::p1::F> const& b) throw()
  {
    if (this != &b) {
      ::CORBA::release(obj_);
      uri_= b.uri_;
      obj_ = b.obj_;
      if (obj_ && !obj_->_NP_is_nil())  omni::duplicateObjRef(obj_);
    }
    return *this;
  }

  ~cref() throw()
  {
    ::CORBA::release(obj_);
  }
  
  void f1() throw(
    // ipc failure
    E)
  {
    xju::assert_not_equal(obj_, (void*)0);
    xju::assert_not_equal(true, obj_->_NP_is_nil());
    obj_->f1();
  }

  p1::F* operator->() throw()
  {
    return obj_;
  }
  p1::F const* operator->() const throw()
  {
    return obj_;
  }
  
private:
  std::string uri_;
  cxy::objref< ::p1::F>* obj_;
};
}
