// generated from p3.idl by omnicxy cxysref idl backend specifying 
// cxy::Exception from <cxy/Exception.hh> as base class for all exceptions
#include <cxy/sref.hh>
#include <cxy/sref_if.hh>
#include <cxy/Exceptions.hh>
#include <cxy/Exception.hh>

#include "p3.hh" // impl
#include "p3.cdr.hh" // impl

#include <cxy/ORB.hh> // impl
#include <cxy/sref_impl.hh> // impl
#include <omniORB4/callDescriptor.h> // impl
#include <omniORB4/callHandle.h> // impl
#include <omniORB4/omniServant.h> // impl

#include <xju/mt.hh>
#include <string>
#include <xju/Optional.hh> //impl
#include <cxy/cdr.hh> //impl



class omniCallHandle;
class omniCallDescriptor;
class omniServant;

namespace
{
template<class T>
class calldesc
{
};
}
namespace cxy
{
class sref_impl;

template<class BaseException>
class ORB;
}
namespace p3 {
class F;
}


namespace
{
template<>
class calldesc< ::p3::F>
{
public:

  class f1 : public omniCallDescriptor
  {
  public:
    f1(void (*lcfn)(omniCallDescriptor*, omniServant*),
       char const* op_,
       int op_len_,
       _CORBA_Boolean oneway,
       const char*const* user_excns_,
       int n_user_excns_,
       _CORBA_Boolean is_upcall_) throw():
        omniCallDescriptor(lcfn,
                           op_,op_len_,
                           oneway,
                           user_excns_,n_user_excns_,
                           is_upcall_)
    {
    }
    
    xju::Optional< ::p3::MyInt> p1_;
    xju::Optional< ::p3::MyInt> r_;

    // omniCallDescriptor::
    void unmarshalArguments(cdrStream& s) throw(
      CORBA::SystemException
      )
    {
      p1_=cxy::cdr< ::p3::MyInt>::unmarshalFrom(s);
    }
    // omniCallDescriptor::
    void marshalReturnedValues(cdrStream& s) throw()
    {
      cxy::cdr< ::p3::MyInt>::marshal(r_.value(),s);
    }
  };
  class f2 : public omniCallDescriptor
  {
  public:
    f2(void (*lcfn)(omniCallDescriptor*, omniServant*),
       char const* op_,
       int op_len_,
       _CORBA_Boolean oneway,
       const char*const* user_excns_,
       int n_user_excns_,
       _CORBA_Boolean is_upcall_) throw():
        omniCallDescriptor(lcfn,
                           op_,op_len_,
                           oneway,
                           user_excns_,n_user_excns_,
                           is_upcall_)
    {
    }
    
    xju::Optional< ::p3::MyString> p1_;
    xju::Optional< ::p3::MyString> r_;

    // omniCallDescriptor::
    void unmarshalArguments(cdrStream& s) throw(
      CORBA::SystemException
      )
    {
      p1_=cxy::cdr< ::p3::MyString>::unmarshalFrom(s);
    }
    // omniCallDescriptor::
    void marshalReturnedValues(cdrStream& s) throw()
    {
      cxy::cdr< ::p3::MyString>::marshal(r_.value(),s);
    }
  };
};
}

namespace cxy
{
template<>
class sref< ::p3::F> :  private sref_if
{
public:
  // pre: lifetime(x) includes lifetime(this)
  // pre: lifetime(orb) includes lifetime(this)
  sref(cxy::ORB< cxy::Exception>& orb, 
       std::string const& name,
       ::p3::F& x) throw(
         cxy::Exceptions< cxy::Exception>::DuplicateName) try:
      name_(name),
      x_(x),
      c_(guard_),
      impl_deleted_(false),
      impl_(new cxy::sref_impl(orb.impl_, 
                               name, 
                               cxy::cdr< ::p3::F>::repoId, 
                               *this))
  {
  }
  catch(cxy::Exceptions<cxy::Exception>::DuplicateName& e)
  {
    if (typeid(cxy::Exception)==typeid(cxy::Exception)) {
      throw;
    }
    cxy::Exceptions< cxy::Exception>::DuplicateName ee(
      e.cause_.first, e.cause_.second);
    for (std::vector<std::pair<std::string, cxy::Exception::FileAndLine> >::const_iterator i=
           e.context_.begin();
         i != e.context_.end();
         ++i) {
      ee.addContext((*i).first, (*i).second);
    }
    throw ee;
  }
  ~sref() throw()
  {
    xju::mt::Lock l(guard_);
    // impl might be deleted during deactivate or sometime after, which
    // is why we use a separate thread
    xju::mt::Thread<sref_impl> t(*impl_, &sref_impl::deactivate);
    while(!impl_deleted_) {
      c_.wait(l);
    }
  }

  std::string const name_;
  ::p3::F& x_;
  
private:
    
  class f1 
  {
  public:
    static void lcfn(omniCallDescriptor* ocd, omniServant* svnt) throw()
    {
      ::p3::F* impl = (::p3::F*) svnt->_ptrToInterface(cxy::cdr< ::p3::F>::repoId);
      calldesc< ::p3::F>::f1* c=(calldesc< ::p3::F>::f1*)ocd;
      c->r_ = impl->f1(
        c->p1_.value());
    }
    static const char* const _user_exns[] = {
      0
    };
  };
    
  class f2 
  {
  public:
    static void lcfn(omniCallDescriptor* ocd, omniServant* svnt) throw()
    {
      ::p3::F* impl = (::p3::F*) svnt->_ptrToInterface(cxy::cdr< ::p3::F>::repoId);
      calldesc< ::p3::F>::f2* c=(calldesc< ::p3::F>::f2*)ocd;
      c->r_ = impl->f2(
        c->p1_.value());
    }
    static const char* const _user_exns[] = {
      0
    };
  };
  

  // sref_if::
  virtual bool _dispatch(omniCallHandle& _handle) throw()
  {
    const char* op = _handle.operation_name();
    
      
    if (omni::strMatch(op, "f1")) {
      calldesc< ::p3::F>::f1 c(f1::lcfn, "f1", 2+1, 0, f1::_user_exns, 0, 1);
      _handle.upcall(impl_, c);
      return 1;
    }
    
    if (omni::strMatch(op, "f2")) {
      calldesc< ::p3::F>::f2 c(f2::lcfn, "f2", 2+1, 0, f2::_user_exns, 0, 1);
      _handle.upcall(impl_, c);
      return 1;
    }
  
    return 0;
  }

  // sref_if::
  virtual void* _ptrToInterface(const char* id) throw()
  {
    if (id == cxy::cdr< ::p3::F>::repoId) {
      return &x_;
    }
    if (id == ::CORBA::Object::_PD_repoId) {
      return (void*) 1;
    }
    if (omni::strMatch(id, cxy::cdr< ::p3::F>::repoId)) {
      return &x_;
    }
    if (omni::strMatch(id, ::CORBA::Object::_PD_repoId)) {
      return (void*) 1;
    }
    return 0;
  }
  
  // sref_if::
  virtual void impl_deleted() throw()
  {
    xju::mt::Lock l(guard_);
    impl_deleted_=true;
    c_.signal(l);
  }

  xju::mt::Mutex guard_;
  xju::mt::Condition c_;
  bool impl_deleted_;
  cxy::sref_impl* impl_;
  
};
}

