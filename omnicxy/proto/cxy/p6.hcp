// generated from p6.idl by omni cxy idl backend specifying 
// cxy::Exception from <cxy/Exception.hh> as base class for all ipc exceptions

#include <cxy/Exception.hh>
#include <xju/Int.hh>
#include <string>
#include <stdint.h>
#include <xju/Tagged.hh>


namespace p6
{
struct EEE : cxy::Exception
{
  EEE(
    int32_t const& p1,
    std::string const& p2,
    // cxy::Exception params
    std::string const& cause, 
    std::pair<std::string, unsigned int> const& fileAndLine) throw():
      cxy::Exception(cause, fileAndLine),
      a_(p1),
      b_(p2) {
  }
  
  int32_t a_;
  std::string b_;
  friend bool operator<(
    EEE const& x, 
    EEE const& y) throw() {
    if (x.a_<y.a_) return true;
    if (y.a_<x.a_) return false;
    if (x.b_<y.b_) return true;
    if (y.b_<x.b_) return false;
    return (cxy::Exception const&)x < (cxy::Exception const&)y;
  }
  friend bool operator>(
    EEE const& x, 
    EEE const& y) throw() {
    return y<x;
  }
  friend bool operator!=(
    EEE const& x, 
    EEE const& y) throw() {
    return (x<y)||(y<x);
  }
  friend bool operator==(
    EEE const& x, 
    EEE const& y) throw() {
    return !(x!=y);
  }
  friend bool operator<=(
    EEE const& x, 
    EEE const& y) throw() {
    return (x<y)||(x==y);
  }
  friend bool operator>=(
    EEE const& x, 
    EEE const& y) throw() {
    return (x>y)||(x==y);
  }
};

class F
{
public:
  virtual ~F() throw()
  {
  }
  virtual void f1() throw(
    p6::EEE,
    // ipc failure
    // - note servant may not throw
    cxy::Exception) = 0;
};

}
