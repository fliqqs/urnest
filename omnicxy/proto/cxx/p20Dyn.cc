// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "p20.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_p20_mA[] = {
  {"a_", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_p20_mA
#  undef _0RL_tc_p20_mA
#endif
static CORBA::TypeCode_ptr _0RL_tc_p20_mA = CORBA::TypeCode::PR_struct_tc("IDL:p20/A:1.0", "A", _0RL_structmember_p20_mA, 1, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace p20 { 
  const ::CORBA::TypeCode_ptr _tc_A = _0RL_tc_p20_mA;
} 
#else
const ::CORBA::TypeCode_ptr p20::_tc_A = _0RL_tc_p20_mA;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace p20 { 
  const ::CORBA::TypeCode_ptr _tc_F = CORBA::TypeCode::PR_interface_tc("IDL:p20/F:1.0", "F", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr p20::_tc_F = CORBA::TypeCode::PR_interface_tc("IDL:p20/F:1.0", "F", &_0RL_tcTrack);
#endif

static void _0RL_p20_mA_marshal_fn(cdrStream& _s, void* _v)
{
  p20::A* _p = (p20::A*)_v;
  *_p >>= _s;
}
static void _0RL_p20_mA_unmarshal_fn(cdrStream& _s, void*& _v)
{
  p20::A* _p = new p20::A;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_p20_mA_destructor_fn(void* _v)
{
  p20::A* _p = (p20::A*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const p20::A& _s)
{
  p20::A* _p = new p20::A(_s);
  _a.PR_insert(_0RL_tc_p20_mA,
               _0RL_p20_mA_marshal_fn,
               _0RL_p20_mA_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, p20::A* _sp)
{
  _a.PR_insert(_0RL_tc_p20_mA,
               _0RL_p20_mA_marshal_fn,
               _0RL_p20_mA_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, p20::A*& _sp)
{
  return _a >>= (const p20::A*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const p20::A*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_p20_mA,
                    _0RL_p20_mA_unmarshal_fn,
                    _0RL_p20_mA_marshal_fn,
                    _0RL_p20_mA_destructor_fn,
                    _v)) {
    _sp = (const p20::A*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_p20_mF_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_p20_mF_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(p20::F::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_p20_mF_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, p20::F_ptr _o)
{
  p20::F_ptr _no = p20::F::_duplicate(_o);
  _a.PR_insert(p20::_tc_F,
               _0RL_p20_mF_marshal_fn,
               _0RL_p20_mF_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, p20::F_ptr* _op)
{
  _a.PR_insert(p20::_tc_F,
               _0RL_p20_mF_marshal_fn,
               _0RL_p20_mF_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = p20::F::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, p20::F_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(p20::_tc_F,
                    _0RL_p20_mF_unmarshal_fn,
                    _0RL_p20_mF_marshal_fn,
                    _0RL_p20_mF_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (p20::F_ptr)_r->_ptrToObjRef(p20::F::_PD_repoId);
    else
      _o = p20::F::_nil();
    return 1;
  }
  return 0;
}

