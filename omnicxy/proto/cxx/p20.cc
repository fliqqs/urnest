// This file is generated by omniidl (C++ backend) - omniORB_4_3. Do not edit.

#include "p20.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_3;



void
p20::A::operator>>= (cdrStream &_n) const
{
  a_ >>= _n;

}

void
p20::A::operator<<= (cdrStream &_n)
{
  (::CORBA::Short&)a_ <<= _n;

}

void
p20::B::operator>>= (cdrStream &_n) const
{
  (const ::CORBA::Any&) b_ >>= _n;

}

void
p20::B::operator<<= (cdrStream &_n)
{
  (::CORBA::Any&)b_ <<= _n;

}

p20::F_ptr p20::F_Helper::_nil() {
  return ::p20::F::_nil();
}

::CORBA::Boolean p20::F_Helper::is_nil(::p20::F_ptr p) {
  return ::CORBA::is_nil(p);

}

void p20::F_Helper::release(::p20::F_ptr p) {
  ::CORBA::release(p);
}

void p20::F_Helper::marshalObjRef(::p20::F_ptr obj, cdrStream& s) {
  ::p20::F::_marshalObjRef(obj, s);
}

p20::F_ptr p20::F_Helper::unmarshalObjRef(cdrStream& s) {
  return ::p20::F::_unmarshalObjRef(s);
}

void p20::F_Helper::duplicate(::p20::F_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

p20::F_ptr
p20::F::_duplicate(::p20::F_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

p20::F_ptr
p20::F::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


p20::F_ptr
p20::F::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

p20::F_ptr
p20::F::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_F _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_F* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_F;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* p20::F::_PD_repoId = "IDL:p20/F:1.0";


p20::_objref_F::~_objref_F() {
  
}


p20::_objref_F::_objref_F(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::p20::F::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
p20::_objref_F::_ptrToObjRef(const char* id)
{
  if (id == ::p20::F::_PD_repoId)
    return (::p20::F_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::p20::F::_PD_repoId))
    return (::p20::F_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for p20::F::f1

// Proxy call descriptor class. Mangled signature:
//  _cany_i_cany
class _0RL_cd_c6f716239037bfb6_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c6f716239037bfb6_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Any_var arg_0_;
  const ::CORBA::Any* arg_0;
  ::CORBA::Any_var result;
};

void _0RL_cd_c6f716239037bfb6_00000000::marshalArguments(cdrStream& _n)
{
  (const ::CORBA::Any&) *arg_0 >>= _n;

}

void _0RL_cd_c6f716239037bfb6_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ::CORBA::Any;
  (::CORBA::Any&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_c6f716239037bfb6_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const ::CORBA::Any&) result >>= _n;

}

void _0RL_cd_c6f716239037bfb6_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ::CORBA::Any;
  (::CORBA::Any&)result <<= _n;

}

const char* const _0RL_cd_c6f716239037bfb6_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c6f716239037bfb6_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c6f716239037bfb6_00000000* tcd = (_0RL_cd_c6f716239037bfb6_00000000*)cd;
  p20::_impl_F* impl = (p20::_impl_F*) svnt->_ptrToInterface(p20::F::_PD_repoId);
  tcd->result = impl->f1(*tcd->arg_0);


}

::CORBA::Any* p20::_objref_F::f1(const ::CORBA::Any& x)
{
  _0RL_cd_c6f716239037bfb6_00000000 _call_desc(_0RL_lcfn_c6f716239037bfb6_10000000, "f1", 3);
  _call_desc.arg_0 = &(::CORBA::Any&) x;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for p20::F::f2

// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cshort
class _0RL_cd_c6f716239037bfb6_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c6f716239037bfb6_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Short arg_0;
  ::CORBA::Short result;
};

void _0RL_cd_c6f716239037bfb6_20000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_c6f716239037bfb6_20000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Short&)arg_0 <<= _n;

}

void _0RL_cd_c6f716239037bfb6_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_c6f716239037bfb6_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Short&)result <<= _n;

}

const char* const _0RL_cd_c6f716239037bfb6_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c6f716239037bfb6_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c6f716239037bfb6_20000000* tcd = (_0RL_cd_c6f716239037bfb6_20000000*)cd;
  p20::_impl_F* impl = (p20::_impl_F*) svnt->_ptrToInterface(p20::F::_PD_repoId);
  tcd->result = impl->f2(tcd->arg_0);


}

::CORBA::Short p20::_objref_F::f2(::CORBA::Short x)
{
  _0RL_cd_c6f716239037bfb6_20000000 _call_desc(_0RL_lcfn_c6f716239037bfb6_30000000, "f2", 3);
  _call_desc.arg_0 = x;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for p20::F::f3

// Proxy call descriptor class. Mangled signature:
//  _cp20_mB_i_cp20_mB
class _0RL_cd_c6f716239037bfb6_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c6f716239037bfb6_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  p20::B_var arg_0_;
  const p20::B* arg_0;
  p20::B_var result;
};

void _0RL_cd_c6f716239037bfb6_40000000::marshalArguments(cdrStream& _n)
{
  (const p20::B&) *arg_0 >>= _n;

}

void _0RL_cd_c6f716239037bfb6_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new p20::B;
  (p20::B&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_c6f716239037bfb6_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const p20::B&) result >>= _n;

}

void _0RL_cd_c6f716239037bfb6_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new p20::B;
  (p20::B&)result <<= _n;

}

const char* const _0RL_cd_c6f716239037bfb6_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c6f716239037bfb6_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c6f716239037bfb6_40000000* tcd = (_0RL_cd_c6f716239037bfb6_40000000*)cd;
  p20::_impl_F* impl = (p20::_impl_F*) svnt->_ptrToInterface(p20::F::_PD_repoId);
  tcd->result = impl->f3(*tcd->arg_0);


}

p20::B* p20::_objref_F::f3(const ::p20::B& x)
{
  _0RL_cd_c6f716239037bfb6_40000000 _call_desc(_0RL_lcfn_c6f716239037bfb6_50000000, "f3", 3);
  _call_desc.arg_0 = &(::p20::B&) x;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}

p20::_pof_F::~_pof_F() {}


omniObjRef*
p20::_pof_F::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::p20::_objref_F(ior, id);
}


::CORBA::Boolean
p20::_pof_F::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::p20::F::_PD_repoId))
    return 1;
  
  return 0;
}

const p20::_pof_F _the_pof_p20_mF;

p20::_impl_F::~_impl_F() {}


::CORBA::Boolean
p20::_impl_F::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "f1")) {

    _0RL_cd_c6f716239037bfb6_00000000 _call_desc(_0RL_lcfn_c6f716239037bfb6_10000000, "f1", 3, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "f2")) {

    _0RL_cd_c6f716239037bfb6_20000000 _call_desc(_0RL_lcfn_c6f716239037bfb6_30000000, "f2", 3, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "f3")) {

    _0RL_cd_c6f716239037bfb6_40000000 _call_desc(_0RL_lcfn_c6f716239037bfb6_50000000, "f3", 3, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
p20::_impl_F::_ptrToInterface(const char* id)
{
  if (id == ::p20::F::_PD_repoId)
    return (::p20::_impl_F*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::p20::F::_PD_repoId))
    return (::p20::_impl_F*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
p20::_impl_F::_mostDerivedRepoId()
{
  return ::p20::F::_PD_repoId;
}

POA_p20::F::~F() {}

// This file is generated by omniidl (C++ backend) - omniORB_4_3. Do not edit.

#include "p20.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_3_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_p20_mA[] = {
  {"a_", CORBA::TypeCode::PR_short_tc()}
};

#ifdef _0RL_tc_p20_mA
#  undef _0RL_tc_p20_mA
#endif
static CORBA::TypeCode_ptr _0RL_tc_p20_mA = CORBA::TypeCode::PR_struct_tc("IDL:p20/A:1.0", "A", _0RL_structmember_p20_mA, 1, &_0RL_tcTrack);

#if defined(OMNI_HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace p20 { 
  const ::CORBA::TypeCode_ptr _tc_A = _0RL_tc_p20_mA;
} 
#else
const ::CORBA::TypeCode_ptr p20::_tc_A = _0RL_tc_p20_mA;
#endif


static CORBA::PR_structMember _0RL_structmember_p20_mB[] = {
  {"b_", CORBA::TypeCode::PR_any_tc()}
};

#ifdef _0RL_tc_p20_mB
#  undef _0RL_tc_p20_mB
#endif
static CORBA::TypeCode_ptr _0RL_tc_p20_mB = CORBA::TypeCode::PR_struct_tc("IDL:p20/B:1.0", "B", _0RL_structmember_p20_mB, 1, &_0RL_tcTrack);

#if defined(OMNI_HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace p20 { 
  const ::CORBA::TypeCode_ptr _tc_B = _0RL_tc_p20_mB;
} 
#else
const ::CORBA::TypeCode_ptr p20::_tc_B = _0RL_tc_p20_mB;
#endif


static CORBA::TypeCode_ptr _0RL_tc_p20_mSS = CORBA::TypeCode::PR_alias_tc("IDL:p20/SS:1.0", "SS", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_short_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(OMNI_HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace p20 { 
  const ::CORBA::TypeCode_ptr _tc_SS = _0RL_tc_p20_mSS;
} 
#else
const ::CORBA::TypeCode_ptr p20::_tc_SS = _0RL_tc_p20_mSS;
#endif

#if defined(OMNI_HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace p20 { 
  const ::CORBA::TypeCode_ptr _tc_F = CORBA::TypeCode::PR_interface_tc("IDL:p20/F:1.0", "F", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr p20::_tc_F = CORBA::TypeCode::PR_interface_tc("IDL:p20/F:1.0", "F", &_0RL_tcTrack);
#endif

static void _0RL_p20_mA_marshal_fn(cdrStream& _s, void* _v)
{
  p20::A* _p = (p20::A*)_v;
  *_p >>= _s;
}
static void _0RL_p20_mA_unmarshal_fn(cdrStream& _s, void*& _v)
{
  p20::A* _p = new p20::A;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_p20_mA_destructor_fn(void* _v)
{
  p20::A* _p = (p20::A*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const p20::A& _s)
{
  p20::A* _p = new p20::A(_s);
  _a.PR_insert(_0RL_tc_p20_mA,
               _0RL_p20_mA_marshal_fn,
               _0RL_p20_mA_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, p20::A* _sp)
{
  _a.PR_insert(_0RL_tc_p20_mA,
               _0RL_p20_mA_marshal_fn,
               _0RL_p20_mA_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, p20::A*& _sp)
{
  return _a >>= (const p20::A*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const p20::A*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_p20_mA,
                    _0RL_p20_mA_unmarshal_fn,
                    _0RL_p20_mA_marshal_fn,
                    _0RL_p20_mA_destructor_fn,
                    _v)) {
    _sp = (const p20::A*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_p20_mB_marshal_fn(cdrStream& _s, void* _v)
{
  p20::B* _p = (p20::B*)_v;
  *_p >>= _s;
}
static void _0RL_p20_mB_unmarshal_fn(cdrStream& _s, void*& _v)
{
  p20::B* _p = new p20::B;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_p20_mB_destructor_fn(void* _v)
{
  p20::B* _p = (p20::B*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const p20::B& _s)
{
  p20::B* _p = new p20::B(_s);
  _a.PR_insert(_0RL_tc_p20_mB,
               _0RL_p20_mB_marshal_fn,
               _0RL_p20_mB_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, p20::B* _sp)
{
  _a.PR_insert(_0RL_tc_p20_mB,
               _0RL_p20_mB_marshal_fn,
               _0RL_p20_mB_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, p20::B*& _sp)
{
  return _a >>= (const p20::B*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const p20::B*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_p20_mB,
                    _0RL_p20_mB_unmarshal_fn,
                    _0RL_p20_mB_marshal_fn,
                    _0RL_p20_mB_destructor_fn,
                    _v)) {
    _sp = (const p20::B*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_p20_mSS_marshal_fn(cdrStream& _s, void* _v)
{
  p20::SS* _p = (p20::SS*)_v;
  *_p >>= _s;
}
static void _0RL_p20_mSS_unmarshal_fn(cdrStream& _s, void*& _v)
{
  p20::SS* _p = new p20::SS;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_p20_mSS_destructor_fn(void* _v)
{
  p20::SS* _p = (p20::SS*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const p20::SS& _s)
{
  p20::SS* _p = new p20::SS(_s);
  _a.PR_insert(_0RL_tc_p20_mSS,
               _0RL_p20_mSS_marshal_fn,
               _0RL_p20_mSS_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, p20::SS* _sp)
{
  _a.PR_insert(_0RL_tc_p20_mSS,
               _0RL_p20_mSS_marshal_fn,
               _0RL_p20_mSS_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, p20::SS*& _sp)
{
  return _a >>= (const p20::SS*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const p20::SS*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_p20_mSS,
                    _0RL_p20_mSS_unmarshal_fn,
                    _0RL_p20_mSS_marshal_fn,
                    _0RL_p20_mSS_destructor_fn,
                    _v)) {
    _sp = (const p20::SS*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_p20_mF_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_p20_mF_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(p20::F::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_p20_mF_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, p20::F_ptr _o)
{
  p20::F_ptr _no = p20::F::_duplicate(_o);
  _a.PR_insert(p20::_tc_F,
               _0RL_p20_mF_marshal_fn,
               _0RL_p20_mF_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, p20::F_ptr* _op)
{
  _a.PR_insert(p20::_tc_F,
               _0RL_p20_mF_marshal_fn,
               _0RL_p20_mF_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = p20::F::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, p20::F_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(p20::_tc_F,
                    _0RL_p20_mF_unmarshal_fn,
                    _0RL_p20_mF_marshal_fn,
                    _0RL_p20_mF_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (p20::F_ptr)_r->_ptrToObjRef(p20::F::_PD_repoId);
    else
      _o = p20::F::_nil();
    return 1;
  }
  return 0;
}

