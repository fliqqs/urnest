// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __p20_hh__
#define __p20_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_p20
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_p20
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_p20
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE p20

_CORBA_MODULE_BEG

  struct A {
    typedef _CORBA_ConstrType_Fix_Var<A> _var_type;

    
    ::CORBA::Short a_;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef A::_var_type A_var;

  typedef A& A_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_A;

  struct B {
    typedef _CORBA_ConstrType_Variable_Var<B> _var_type;

    
    ::CORBA::Any b_;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef B::_var_type B_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< B,B_var > B_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_B;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SS;

  class SS_var;

  class SS : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 >  {
  public:
    typedef SS_var _var_type;
    inline SS() {}
    inline SS(const SS& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > (_s) {}

    inline SS(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > (_max) {}
    inline SS(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Short* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > (_max, _len, _val, _rel) {}

  

    inline SS& operator = (const SS& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > ::operator=(_s);
      return *this;
    }
  };

  class SS_out;

  class SS_var {
  public:
    inline SS_var() : _pd_seq(0) {}
    inline SS_var(SS* _s) : _pd_seq(_s) {}
    inline SS_var(const SS_var& _s) {
      if (_s._pd_seq)  _pd_seq = new SS(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~SS_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline SS_var& operator = (SS* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline SS_var& operator = (const SS_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new SS;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Short& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline SS* operator -> () { return _pd_seq; }
    inline const SS* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator SS& () const { return *_pd_seq; }
#else
    inline operator const SS& () const { return *_pd_seq; }
    inline operator SS& () { return *_pd_seq; }
#endif
      
    inline const SS& in() const { return *_pd_seq; }
    inline SS&       inout()    { return *_pd_seq; }
    inline SS*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline SS* _retn() { SS* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class SS_out;
    
  private:
    SS* _pd_seq;
  };

  class SS_out {
  public:
    inline SS_out(SS*& _s) : _data(_s) { _data = 0; }
    inline SS_out(SS_var& _s)
      : _data(_s._pd_seq) { _s = (SS*) 0; }
    inline SS_out(const SS_out& _s) : _data(_s._data) {}
    inline SS_out& operator = (const SS_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline SS_out& operator = (SS* _s) {
      _data = _s;
      return *this;
    }
    inline operator SS*&()  { return _data; }
    inline SS*& ptr()       { return _data; }
    inline SS* operator->() { return _data; }

    inline ::CORBA::Short& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    SS*& _data;

  private:
    SS_out();
    SS_out& operator=(const SS_var&);
  };

#ifndef __p20_mF__
#define __p20_mF__
  class F;
  class _objref_F;
  class _impl_F;
  
  typedef _objref_F* F_ptr;
  typedef F_ptr FRef;

  class F_Helper {
  public:
    typedef F_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_F, F_Helper> F_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_F,F_Helper > F_out;

#endif

  // interface F
  class F {
  public:
    // Declarations for this interface type.
    typedef F_ptr _ptr_type;
    typedef F_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_F :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    ::CORBA::Any* f1(const ::CORBA::Any& x);
    ::CORBA::Short f2(::CORBA::Short x);
    B* f3(const ::p20::B& x);

    // Constructors
    inline _objref_F()  { _PR_setobj(0); }  // nil
    _objref_F(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_F();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_F(const _objref_F&);
    _objref_F& operator = (const _objref_F&);
    // not implemented

    friend class F;
  };

  class _pof_F : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_F() : _OMNI_NS(proxyObjectFactory)(F::_PD_repoId) {}
    virtual ~_pof_F();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_F :
    public virtual omniServant
  {
  public:
    virtual ~_impl_F();

    virtual ::CORBA::Any* f1(const ::CORBA::Any& x) = 0;
    virtual ::CORBA::Short f2(::CORBA::Short x) = 0;
    virtual B* f3(const ::p20::B& x) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_F;

_CORBA_MODULE_END



_CORBA_MODULE POA_p20
_CORBA_MODULE_BEG

  class F :
    public virtual p20::_impl_F,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~F();

    inline ::p20::F_ptr _this() {
      return (::p20::F_ptr) _do_this(::p20::F::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_p20
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const p20::A& _s);
extern void operator<<=(::CORBA::Any& _a, p20::A* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, p20::A*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const p20::A*& _sp);

extern void operator<<=(::CORBA::Any& _a, const p20::B& _s);
extern void operator<<=(::CORBA::Any& _a, p20::B* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, p20::B*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const p20::B*& _sp);

void operator<<=(::CORBA::Any& _a, const p20::SS& _s);
void operator<<=(::CORBA::Any& _a, p20::SS* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, p20::SS*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const p20::SS*& _sp);

void operator<<=(::CORBA::Any& _a, p20::F_ptr _s);
void operator<<=(::CORBA::Any& _a, p20::F_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, p20::F_ptr& _s);



inline void
p20::F::_marshalObjRef(::p20::F_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_p20
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_p20
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_p20
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_p20
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_p20
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_p20
#endif

#endif  // __p20_hh__

