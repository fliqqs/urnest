// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <string>
#include <unistd.h>
#include <xju/parse.hh>
#include <xju/next.hh> //impl
#include <utility>
#include <xju/utf8/encodeCodePoint.hh> //impl
#include <xju/utf8/decodeCodePoint.hh> //impl

namespace xju
{

//REVISIT: rename to xju::utf::String

class Utf8String
{
public:
  explicit Utf8String(std::string const& value) throw(
    // value is not valid UTF-8
    xju::Exception)
      :value_(Utf8String::validate(value))
  {
  }

  // number of characters (not number of bytes)
  size_t size() const throw()
  {
    return value_.second;
  }

  // the original utf-8 encoded value (as passed to constructor)
  operator std::string const&() const noexcept
  {
    return value_.first;
  }
private:
  std::pair<std::string,size_t> value_;
  
  static std::pair<std::string,size_t> validate(std::string const& value) throw(
    xju::Exception)
  {
    std::ostringstream s;
    size_t size{0};
    auto i(xju::parse::iterator(value.begin(),value.end()));
    try{
      try{
        while(!i.atEnd()){
          ++size;
          auto const x{xju::utf8::decodeCodePoint(i)};
          s << xju::utf8::encodeCodePoint(x.first);
          i=x.second;
        }
        return std::make_pair(s.str(),size);
      }
      catch(xju::parse::IteratorAdaptor<std::string::const_iterator>::EndOfInput const& e){
        // avoid line and column in our exception
        xju::Exception ei{"end of input",XJU_TRACED};
        for(auto c:e.context()){
          ei.addContext(c);
        }
        throw ei;
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "validate UTF-8 character " << size << " at byte-offset "
        << (i.x_-value.begin());
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  friend bool operator<(Utf8String const& x, Utf8String const& y) noexcept
  {
    return x.value_ < y.value_;
  }
};

}
