// Copyright (c) 2022 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/Int.hh>
#include <cinttypes>
#include <vector>
#include <unistd.h>
#include <xju/snmp/SnmpV3SecParams.hh>
#include <xju/snmp/SnmpV3ScopedPduData.hh>
#include <iostream>
#include <xju/format.hh>
#include <xju/snmp/showFirstBytes.hh>

namespace xju
{
namespace snmp
{

class SnmpV3Message{
public:
  class IDTag{};
  class SecurityModelTag{};

  typedef xju::Int<IDTag,uint32_t> ID;
  typedef xju::Int<SecurityModelTag,uint32_t> SecurityModel;

  enum Flags{
    NO_AUTH = 0x00,
    AUTH = 0x01,
    AUTH_PRIV = 0x03,
    REPORTABLE = 0x04
  };

  SnmpV3Message(ID const id,
                size_t const maxSize,
                Flags const flags,
                SecurityModel const securityModel,
                SnmpV3SecParams securityParameters,
                SnmpV3ScopedPduData scopedPduData):
      id_(id),
      maxSize_(maxSize),
      flags_(flags),
      securityModel_(securityModel),
      securityParameters_(std::move(securityParameters)),
      scopedPduData_(std::move(scopedPduData))
  {
  }

  ID id_;
  size_t maxSize_;
  Flags flags_;
  SecurityModel securityModel_;
  SnmpV3SecParams securityParameters_;
  SnmpV3ScopedPduData scopedPduData_;

  //auth required? (Independent of priv.)
  bool auth() const { return flags_ & AUTH; }

  //priv required (noting priv not allowed without auth)
  // pre: auth()
  bool priv() const { return flags_ & AUTH_PRIV == AUTH_PRIV; }

  bool reportable() const { return flags_ & REPORTABLE == REPORTABLE; }

  friend bool operator<(SnmpV3Message const& a, SnmpV3Message const& b) throw();

  friend std::ostream& operator<<(std::ostream& s, SnmpV3Message const& x) throw(){
    return s << "message id " << x.id_
             << ", max size " << x.maxSize_
             << ", flags " << xju::format::hex(x.flags_)
             << ", security model " << x.securityModel_
             << ", security params (hex) " << showFirstBytes(1024,x.securityParameters_._)
             << ", scoped pdu data (hex) " << showFirstBytes(4096,x.scopedPduData_._);
  }
};

}
}
