// generated by Odinfile %encodeResponse.gen.sh
// note this file is only for include in encodeResponse.cc

#include "GenErr.hh"
#include "NoAccess.hh"
#include "NotWritable.hh"
#include "WrongType.hh"
#include "WrongLength.hh"
#include "WrongEncoding.hh"
#include "WrongValue.hh"
#include "NoCreation.hh"
#include "InconsistentName.hh"
#include "InconsistentValue.hh"
#include "ResourceUnavailable.hh"
#include "CommitFailed.hh"

namespace xju
{
namespace snmp
{
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  GenErr const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::GEN_ERR,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  NoAccess const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::NO_ACCESS,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  NotWritable const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::NOT_WRITABLE,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  WrongType const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::WRONG_TYPE,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  WrongLength const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::WRONG_LENGTH,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  WrongEncoding const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::WRONG_ENCODING,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  WrongValue const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::WRONG_VALUE,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  NoCreation const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::NO_CREATION,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  InconsistentName const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::INCONSISTENT_NAME,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  InconsistentValue const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::INCONSISTENT_VALUE,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  ResourceUnavailable const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::RESOURCE_UNAVAILABLE,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  CommitFailed const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::COMMIT_FAILED,//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
}
}
