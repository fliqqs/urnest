// Copyright (c) 2022 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/snmp/SnmpV3UsmMessage.hh>
#include <vector>
#include <xju/snmp/SnmpV3UsmAuthKey.hh>
#include <xju/snmp/SnmpV3Message.hh>
#include <xju/snmp/SnmpV3UsmSecurityParameters.hh>
#include <xju/snmp/decodeSnmpV3UsmSecurityParameters.hh>
#include <xju/snmp/encodeSnmpV3UsmMessage.hh>
#include <sstream>
#include <xju/Exception.hh>
#include <xju/format.hh>
#include <xju/snmp/decodeSnmpV3Message.hh>
#include <xju/snmp/decodeSnmpV3ScopedPDU.hh>
#include <xju/snmp/SnmpV3UsmDecrypter.hh>

namespace xju
{
namespace snmp
{


// decodes an SnmpV3Message using usm auth and/or priv
// - use NoAuthMacCalculator for noAuthNoPriv
// - use e.g. xju::crypt::macs::hmacsha512::Calculator for auth[No]Priv
// REVISIT: add priv
template<class MacCalculator, unsigned int TruncateMacTo>
SnmpV3UsmMessage decodeSnmpV3UsmMessage(
  std::vector<uint8_t> data,
  SnmpV3UsmAuthKey const& authKey,
  SnmpV3UsmDecrypter& decrypter) /*throw(
    // malformed
    xju::Exception)*/
{
  try{
    std::pair<SnmpV3Message, size_t> const x(decodeSnmpV3Message(data));
    auto const y(decodeSnmpV3UsmSecurityParameters(x.first.securityParameters_));

    xju::crypt::Mac const receivedMac(std::get<1>(y)._);
    MacCalculator mc(xju::crypt::MacKey(authKey._));
    if (receivedMac._.size() != TruncateMacTo){
      std::ostringstream s;
      s << "expected MAC of size " << TruncateMacTo << " but got MAC of size "
        << receivedMac._.size();
      throw xju::Exception(s.str(),XJU_TRACED);
    }

    SnmpV3ScopedPduData scopedPduData(
      decrypter.decryptScopedPduData(std::get<0>(y).userName_,
                                     std::get<0>(y).engineBoots_,
                                     std::get<0>(y).engineTime_,
                                     std::get<3>(y),
                                     x.first.scopedPduData_));

    SnmpV3UsmMessage const usmMessage(
      x.first.id_,
      x.first.maxSize_,
      x.first.flags_,
      std::get<0>(y),
      decodeSnmpV3ScopedPDU(scopedPduData));

    try{
      size_t const macOffsetInData(x.second+std::get<2>(y));
      // check we got the offset right
      xju::assert_equal(
        std::vector<uint8_t>(data.begin()+macOffsetInData,
                             data.begin()+macOffsetInData+TruncateMacTo),
        receivedMac._);
      std::fill(data.begin()+macOffsetInData, data.begin()+macOffsetInData+TruncateMacTo,0U);
      xju::crypt::Mac calculatedMac(mc.calculateMac(data));
      calculatedMac._.resize(TruncateMacTo);
      if (receivedMac != calculatedMac){
        std::ostringstream s;
        s << "expected MAC "
          << xju::format::join(calculatedMac._.begin(),calculatedMac._.end(),
                               xju::format::Hex(""), "")
          << "is not equal to received MAC "
          << xju::format::join(receivedMac._.begin(),receivedMac._.end(),
                               xju::format::Hex(""), "");
        throw xju::Exception(s.str(),XJU_TRACED);
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "authenticate, i.e. verify MAC of, received SnmpV3UsmMessage "
        << usmMessage;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
      
    return usmMessage;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "decode snmp v3 usm-secured message, using "
      << authKey._.size() << "-byte auth key, from (hex) data "
      << xju::format::join(data.begin(),data.end(),
                           xju::format::Hex(""),
                           "");
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}
