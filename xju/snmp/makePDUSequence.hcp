// Copyright (c) 2022 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <cinttypes>
#include <vector>
#include <utility>
#include <xju/snmp/Oid.hh>
#include <memory>
#include <xju/snmp/Value.hh>
#include <algorithm> //impl
#include <iterator> //impl
#include <xju/snmp/OidValue.hh> //impl
#include <xju/snmp/IntValue.hh> //impl
#include <xju/snmp/RequestId.hh>
#include <xju/snmp/SnmpVar.hh>
#include <xju/snmp/Sequence.hh> //impl
#include <xju/snmp/encodedLengthOfLength.hh> //impl
#include <xju/snmp/encodeLength.hh> //impl
#include <xju/assert.hh> //impl
#include <xju/format.hh> //impl
#include <xju/seq_less.hh> //impl
#include <xju/snmp/PDU.hh>

namespace xju
{
namespace snmp
{

namespace
{

uint64_t encodedLengthOfItems(
  std::vector<SnmpVar> const& items) throw()
{
  uint64_t result(0);
  for(auto x:items){
    result=result+x.encodedLength();
  }
  return result;
}

class V2cSequence : private xju::Int<V2cSequence,size_t>, //encoded length of items
                    public Value
{
public:
  V2cSequence(std::vector<SnmpVar> const& items,
              uint8_t sequenceType) throw():
      xju::Int<V2cSequence,size_t>(encodedLengthOfItems(items)),
      Value(1/*type*/+
            encodedLengthOfLength(value())+
            value()),
      items_(items),
      sequenceType_(sequenceType) {
  }
  std::vector<SnmpVar> const items_;
  uint8_t const sequenceType_;

  // Value::
  std::vector<uint8_t>::iterator encodeTo(
    std::vector<uint8_t>::iterator begin) const throw() override
  {
    auto at=begin;
    *at++=sequenceType_;
    at=encodeLength(at,value());
    for(SnmpVar x: items_) {
      at=x.encodeTo(at);
    }
    xju::assert_equal(at-begin, encodedLength_);
    return at;
  }
  // Value::
  std::string str() const throw() override
  {
    return xju::format::join(items_.begin(),items_.end(),
                             [](SnmpVar const& x) {
                               return xju::format::str(x);
                             },", ");
  }
  // Value::
  bool less(Value const& yy) const throw() override
  {
    auto const y{dynamic_cast<V2cSequence const&>(yy)};
    return xju::seq_less(items_.begin(),items_.end(),
                         y.items_.begin(),y.items_.end());
  }
  
};


}

std::shared_ptr<Value const> makePDUSequence(
  PDU const& pdu) throw()
{
  typedef std::shared_ptr<Value const> vp;

  return vp(new Sequence({
        vp(new IntValue(pdu.requestId_.value())),
        vp(new IntValue(pdu.error_)),//error
        vp(new IntValue(pdu.errorIndex_)),//errorIndex
        vp(new V2cSequence(pdu.vars_,0x30))},
      pdu.pduType_));
}

  
}
}


