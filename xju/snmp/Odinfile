%all==%all.tree:leaves

%all.tree==<<
%tests.tree

%tests.tree == <<
()+cmd=(test-SnmpV2cGetRequest.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-decodeSnmpV2cResponse.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-SnmpV2cVarResponse.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-SnmpV2cNextVarResponse.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-SnmpV2cSetRequest.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-Oid.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-Value.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-encode.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-encodeResponse.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-decodeSnmpV1Response.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-decodeSnmpV1GetRequest.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-decodeSnmpV1GetNextRequest.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-decodeSnmpV1SetRequest.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-decodeSnmpV2cGetRequest.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-decodeSnmpV2cGetNextRequest.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-validateResponse.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-SnmpV1Table.cc+(../..%cxx-opts):auto.cxx.exe):stdout
()+cmd=(test-IPv4Address.cc+(../..%cxx-opts):auto.cxx.exe):stdout

encodeResponse.gen.hh==()+cmd=(%encodeResponse.gen.sh):stdout

%encodeResponse.gen.sh == ! <<END
#!/bin/sh
names=$(cat <<EOF
  GenErr                GEN_ERR
  NoAccess              NO_ACCESS
  NotWritable           NOT_WRITABLE
  WrongType             WRONG_TYPE
  WrongLength           WRONG_LENGTH
  WrongEncoding         WRONG_ENCODING
  WrongValue            WRONG_VALUE
  NoCreation            NO_CREATION
  InconsistentName      INCONSISTENT_NAME
  InconsistentValue     INCONSISTENT_VALUE
  ResourceUnavailable   RESOURCE_UNAVAILABLE
  CommitFailed          COMMIT_FAILED
EOF
) &&
(cat <<EOF
// generated by Odinfile %encodeResponse.gen.sh
// note this file is only for include in encodeResponse.cc

EOF
) &&
echo "$names"|
while read className errorCode
do
  cat <<EOF
#include "${className}.hh"
EOF
done &&
(cat <<EOF

namespace xju
{
namespace snmp
{
EOF
) &&
echo "$names"|
while read className errorCode
do
  cat <<EOF
std::vector<uint8_t> encodeResponse(
  SnmpV2cSetRequest const& request,
  std::vector<Oid> const& paramOrder,
  ${className} const& error) throw()
{
  std::vector<SnmpV2cVarResponse> vars;
  std::transform(paramOrder.begin(),
                 paramOrder.end(),
                 std::back_inserter(vars),
                 [&](Oid const& oid) {
                   return SnmpV2cVarResponse(
                     oid,(*request.values_.find(oid)).second);
                 });
  std::vector<Oid>::const_iterator const errorIndex(
    std::find(paramOrder.begin(),paramOrder.end(),error.param_));
  xju::assert_not_equal(errorIndex,paramOrder.end());

  return encodePDU(
    request.community_,
    request.id_,
    (int)SnmpV2cResponse::ErrorStatus::${errorCode},//error
    errorIndex-paramOrder.begin()+1,//errorIndex
    vars,
    0xA2);
}
EOF
done
(cat <<EOF
}
}
EOF
)
END
