// Copyright (c) 2022 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <vector>
#include <cinttypes>
#include <xju/snmp/Community.hh>
#include <xju/snmp/RequestId.hh>
#include <utility>
#include <xju/snmp/Oid.hh>
#include <memory>
#include <xju/snmp/Value.hh>
#include <xju/snmp/Sequence.hh> //impl
#include <xju/snmp/IntValue.hh> //impl
#include <xju/snmp/StringValue.hh> //impl
#include <xju/assert.hh> //impl
#include <xju/snmp/makePDUSequence.hh> //impl
#include <xju/snmp/PDU.hh> //impl

namespace xju
{
namespace snmp
{
std::vector<uint8_t> encodeSnmpV1Message(
  Community const& community,
  RequestId requestId,
  uint64_t error,
  uint64_t errorIndex,
  std::vector<std::pair<Oid, std::shared_ptr<Value const>> > const& vars,
  uint8_t pduType // 0xA0 snmp v1 get etc
  ) throw()
{
  typedef std::shared_ptr<Value const> vp;

  std::vector<SnmpVar> v;
  std::transform(
    vars.begin(),
    vars.end(),
    std::back_inserter(v),
    [](auto v){return SnmpVar(v.first,v.second);});
  Sequence s({
      vp(new IntValue(0)), // 0 == SNMP version 1
      vp(new StringValue(std::vector<uint8_t>(community._.begin(),community._.end()))),
      vp(makePDUSequence(PDU(requestId, error, errorIndex, v, pduType)))},
    0x30);
  std::vector<uint8_t> result(s.encodedLength());
  xju::assert_equal(s.encodeTo(result.begin()),result.end());
  return result;
}


}
}
