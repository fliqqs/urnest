// Copyright (c) 2022 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <vector>
#include <xju/snmp/SnmpV3Message.hh>
#include <unistd.h>
#include <xju/snmp/SnmpV3UsmSecurityParameters.hh>
#include <xju/snmp/SnmpV3UsmAuthKey.hh>
#include <xju/snmp/SnmpV3ScopedPDU.hh>
#include <xju/crypt/MacCalculator.hh>
#include <algorithm>
#include <utility>
#include <xju/snmp/encode.hh>
#include <xju/snmp/SnmpV3UsmMessage.hh>
#include <xju/crypt/MacKey.hh>
#include <xju/snmp/SnmpV3UsmEncrypter.hh>

namespace xju
{
namespace snmp
{

class NoAuthMacCalculator: public xju::crypt::MacCalculator
{
public:
  static const unsigned int SIZE = 0;

  explicit NoAuthMacCalculator(xju::crypt::MacKey const&)
  {}
  virtual size_t macSize() const noexcept override{
    return 0U;
  }
  virtual xju::crypt::Mac calculateMac(std::vector<uint8_t> const& message) const override
  {
    return xju::crypt::Mac({});
  }
  virtual std::string name() const { return "none"; }
};

// encodes an SnmpV3Message using usm auth and/or priv
// - use NoAuthMacCalculator for noAuthNoPriv
// - use e.g. xju::crypt::macs::hmacsha512::Calculator for auth[No]Priv
// REVISIT: add priv
template<class MacCalculator, unsigned int TruncateMacTo>
std::vector<uint8_t> encodeSnmpV3UsmMessage(
  SnmpV3UsmMessage x,
  SnmpV3UsmAuthKey const& authKey,
  SnmpV3UsmEncrypter& encrypter) throw()
{
  MacCalculator mac{xju::crypt::MacKey(authKey._)};

  std::pair<SnmpV3UsmPrivData, SnmpV3ScopedPduData> priv(
    encrypter.encryptScopedPduData(x.securityParameters_.userName_,
                                   x.securityParameters_.engineBoots_,
                                   x.securityParameters_.engineTime_,
                                   encode(x.scopedPDU_)));
  auto wholeMessage(
    encode(SnmpV3Message(x.id_,
                         x.maxSize_,
                         x.flags_,
                         SnmpV3Message::SecurityModel(3), //USM
                         encode(x.securityParameters_,
                                xju::crypt::Mac(
                                  std::vector<uint8_t>(TruncateMacTo,0U)),
                                priv.first),
                         priv.second)));

  auto m(mac.calculateMac(wholeMessage));
  m._.resize(TruncateMacTo);
  return encode(SnmpV3Message(x.id_,
                              x.maxSize_,
                              x.flags_,
                              SnmpV3Message::SecurityModel(3), //USM
                              encode(std::move(x.securityParameters_),
                                     xju::crypt::Mac(m._),
                                     priv.first),
                              std::move(priv.second)));
}

}
}
