// Copyright (c) 2022 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <vector>
#include <cinttypes>
#include <xju/snmp/ContextEngineID.hh>
#include <algorithm>
#include <xju/crypt/MacKey.hh>

namespace xju
{
namespace snmp
{

// localise snmp password per RFC3414 A.2
// Hasher is e.g. xju::crypt::hashers::SHA512
template<class Hasher>
std::vector<uint8_t> localiseSnmpV3UsmPassword(
  ContextEngineID const& engineId,
  std::vector<uint8_t> const& password)
{
  std::vector<uint8_t> extended;
  extended.resize(1048576);
  auto const n(extended.size()/password.size());
  auto const r(extended.size()%password.size());
  for(auto i=0; i!= n; ++i){
    std::copy(password.begin(), password.end(),
              extended.begin()+i*password.size());
  }
  std::copy(password.begin(), password.begin()+r,
            extended.begin()+n*password.size());

  Hasher h;
  auto const k(h.hash(extended));
  extended.resize(0);
  std::copy(k.begin(), k.end(), std::back_inserter(extended));
  std::copy(engineId._.begin(), engineId._.end(), std::back_inserter(extended));
  std::copy(k.begin(), k.end(), std::back_inserter(extended));
  return h.hash(extended);
}


}
}
