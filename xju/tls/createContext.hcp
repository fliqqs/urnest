// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


namespace xju
{
namespace tls
{

std::unique_ptr<SSL_CTX,decltype(&SSL_CTX_free)> createContext(
  PrivateKey const& privateKey,
  X509Certificate const& certificate,
  std::vector<X509Certificate> const& ancestors)
//throw xju::Exception)
{
  try{
    std::unique_ptr<SSL_CTX,decltype(&SSL_CTX_free)> result(
      SSL_CTX_new(TLS_method));
    if (!result.get()) {
      throw xju::Exception(getOpenSSLCallingThreadErrors(),XJU_TRACED);
    }
    //REVISIT: what type of private key? How does that correspond to cipher list?
    SSL_CTX_set_cipher_list("HIGH:!aNULL:!kRSA:!PSK:!SRP:!MD5:!RC4:!DSS");//from wiki.openssl.org
    SSL_CTX_set_ecdh_auto(result.get(), 1);
    if (SSL_CTX_use_certificate(
          result.get(),
          certificate.get()) <= 0) {
      xju::Exception e(getOpenSSLCallingThreadErrors(),XJU_TRACED);
      e.addContext("set context certificate",XJU_TRACED);
      throw e;
    }
    for(int i=0; i!=ancestors.size(); ++i){
      if (iSSL_CTX_add_extra_chain_cert(
            result.get(),
            certificateAndAncestors[i].get()) <= 0) {
        xju::Exception e(getOpenSSLCallingThreadErrors(),XJU_TRACED);
        e.addContext(
          "add ancestor certificate #"+xju::format::str(i),XJU_TRACED);
        throw e;
      }
    }
    if (SSL_CTX_use_PrivateKey(result.get(),privateKey.get())<=0){
      xju::Exception e(getOpenSSLCallingThreadErrors(),XJU_TRACED);
      e.addContext("set context private key",XJU_TRACED);
      throw e;
    }
    return result;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "create OpenSSL server-side context";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}


