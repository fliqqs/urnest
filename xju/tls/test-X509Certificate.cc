// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#include <xju/tls/X509Certificate.hh>


#include <string>
#include <hcp/parser.hh>
#include <hcp/ast.hh>
#include <xju/tls/pemParser.hh>
#include <xju/tls/PEMItem.hh>

namespace xju
{
namespace tls
{
void test1() {

  {
    std::string const pk=R"--(openssl req -new -x509 -days 365 -key ~/tmp/tmp.key -out ca.crt
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:Queensland
Locality Name (eg, city) []:Brisbane
Organization Name (eg, company) [Internet Widgits Pty Ltd]:urnest
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:Trevor Taylor
Email Address []:urnest@onthenet.com.au
xju@xjutv:~/urnest$ cat ca.crt 
note signed with key of test-PrivateKey.cc
-----BEGIN CERTIFICATE-----
MIICnjCCAiSgAwIBAgIUcv2fz5mspG4AcdNdeoQe04A8ZLwwCgYIKoZIzj0EAwIw
gYUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApRdWVlbnNsYW5kMREwDwYDVQQHDAhC
cmlzYmFuZTEPMA0GA1UECgwGdXJuZXN0MRYwFAYDVQQDDA1UcmV2b3IgVGF5bG9y
MSUwIwYJKoZIhvcNAQkBFhZ1cm5lc3RAb250aGVuZXQuY29tLmF1MB4XDTIwMDUy
NDA3MDcxOVoXDTIxMDUyNDA3MDcxOVowgYUxCzAJBgNVBAYTAkFVMRMwEQYDVQQI
DApRdWVlbnNsYW5kMREwDwYDVQQHDAhCcmlzYmFuZTEPMA0GA1UECgwGdXJuZXN0
MRYwFAYDVQQDDA1UcmV2b3IgVGF5bG9yMSUwIwYJKoZIhvcNAQkBFhZ1cm5lc3RA
b250aGVuZXQuY29tLmF1MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEtLusCqT17q9G
UOiJM4UV/FuxzWGsnqHWJ6TkpWy1wTSdbHntfeZwAKJLZVilGfJecB4Cpll4ZOdg
LgMgl+1g9DArG67SfAbSPI2KKch5zp6tDknQ6zLo2UQdfa2qYPnQo1MwUTAdBgNV
HQ4EFgQUTsJWfm/3Yw0H5HRufvDvCe+vYqQwHwYDVR0jBBgwFoAUTsJWfm/3Yw0H
5HRufvDvCe+vYqQwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNoADBlAjBv
d8wr+p2EdlQUTB5c6NR+DF3PbYxYdrT3t+cAYUyFu2cHMTvJaJn6j7M9LwHrW60C
MQDpydgxpbh41Pvw/nos6ZrtK5kds7uUJfKRtwY0ypatIg/B2TagLN8i3jlfFR0o
R0g=
-----END CERTIFICATE-----)--";
    try{
      auto const x(hcp_parser::parseString(pk.begin(),pk.end(),pemParser()));
      auto const y(hcp_ast::findOnlyChildOfType<PEMItem>(x));
      X509Certificate cacert(y.getPayload());
      xju::assert_equal(cacert.getSubjectName(),cacert.getIssuerName());
    }
    catch(xju::Exception& e){
      std::cerr << readableRepr(e) << std::endl;
      xju::assert_never_reached();
    }
  }
  {
    std::string const pk=R"--(-----BEGIN CERTIFICATE-----
MIICnjCCAiSgAwIBAgIUcv2fz5mspG4AcdNdeoQe04A8ZLwwCgYIKoZIzj0EAwIw
gYUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApRdWVlbnNsYW5kMREwDwYDVQQHDAhC
cmlzYmFuZTEPMA0GA1UECgwGdXJuZXN0MRYwFAYDVQQDDA1UcmV2b3IgVGF5bG9y
MSUwIwYJKoZIhvcNAQkBFhZ1cm5lc3RAb250aGVuZXQuY29tLmF1MB4XDTIwMDUy
NDA3MDcxOVoXDTIxMDUyNDA3MDcxOVowgYUxCzAJBgNVBAYTAkFVMRMwEQYDVQQI
DApRdWVlbnNsYW5kMREwDwYDVQQHDAhCcmlzYmFuZTEPMA0GA1UECgwGdXJuZXN0
MRYwFAYDVQQDDA1UcmV2b3IgVGF5bG9yMSUwIwYJKoZIhvcNAQkBFhZ1cm5lc3RA
b250aGVuZXQuY29tLmF1MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEtLusCqT17q9G
LgMgl+1g9DArG67SfAbSPI2KKch5zp6tDknQ6zLo2UQdfa2qYPnQo1MwUTAdBgNV
HQ4EFgQUTsJWfm/3Yw0H5HRufvDvCe+vYqQwHwYDVR0jBBgwFoAUTsJWfm/3Yw0H
5HRufvDvCe+vYqQwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNoADBlAjBv
d8wr+p2EdlQUTB5c6NR+DF3PbYxYdrT3t+cAYUyFu2cHMTvJaJn6j7M9LwHrW60C
MQDpydgxpbh41Pvw/nos6ZrtK5kds7uUJfKRtwY0ypatIg/B2TagLN8i3jlfFR0o
R0g=
-----END CERTIFICATE-----)--";
    try{
      auto const x(hcp_parser::parseString(pk.begin(),pk.end(),pemParser()));
      auto const y(hcp_ast::findOnlyChildOfType<PEMItem>(x));
      try{
        X509Certificate cert(y.getPayload());
        xju::assert_never_reached();
      }
      catch(xju::Exception& e){
        
        xju::assert_startswith(readableRepr(e),std::string("Failed to decode certificate from DER 0x30 0x82 0x02 0x9e 0x30 0x82 0x02 0x24 0xa0 0x03 0x02 0x01 0x02 0x02 0x14 0x72 0xfd 0x9f 0xcf 0x99 0xac 0xa4 0x6e 0x00 0x71 0xd3 0x5d 0x7a 0x84 0x1e 0xd3 0x80 0x3c 0x64 0xbc 0x30 0x0a 0x06 0x08 0x2a 0x86 0x48 0xce 0x3d 0x04 0x03 0x02 0x30 0x81 0x85 0x31 0x0b 0x30 0x09 0x06 0x03 0x55 0x04 0x06 0x13 0x02 0x41 0x55 0x31 0x13 0x30 0x11 0x06 0x03 0x55 0x04 0x08 0x0c 0x0a 0x51 0x75 0x65 0x65 0x6e 0x73 0x6c 0x61 0x6e 0x64 0x31 0x11 0x30 0x0f 0x06 0x03 0x55 0x04 0x07 0x0c 0x08 0x42 0x72 0x69 0x73 0x62 0x61 0x6e 0x65 0x31 0x0f 0x30 0x0d 0x06 0x03 0x55 0x04 0x0a 0x0c 0x06 0x75 0x72 0x6e 0x65 0x73 0x74 0x31 0x16 0x30 0x14 0x06 0x03 0x55 0x04 0x03 0x0c 0x0d 0x54 0x72 0x65 0x76 0x6f 0x72 0x20 0x54 0x61 0x79 0x6c 0x6f 0x72 0x31 0x25 0x30 0x23 0x06 0x09 0x2a 0x86 0x48 0x86 0xf7 0x0d 0x01 0x09 0x01 0x16 0x16 0x75 0x72 0x6e 0x65 0x73 0x74 0x40 0x6f 0x6e 0x74 0x68 0x65 0x6e 0x65 0x74 0x2e 0x63 0x6f 0x6d 0x2e 0x61 0x75 0x30 0x1e 0x17 0x0d 0x32 0x30 0x30 0x35 0x32 0x34 0x30 0x37 0x30 0x37 0x31 0x39 0x5a 0x17 0x0d 0x32 0x31 0x30 0x35 0x32 0x34 0x30 0x37 0x30 0x37 0x31 0x39 0x5a 0x30 0x81 0x85 0x31 0x0b 0x30 0x09 0x06 0x03 0x55 0x04 0x06 0x13 0x02 0x41 0x55 0x31 0x13 0x30 0x11 0x06 0x03 0x55 0x04 0x08 0x0c 0x0a 0x51 0x75 0x65 0x65 0x6e 0x73 0x6c 0x61 0x6e 0x64 0x31 0x11 0x30 0x0f 0x06 0x03 0x55 0x04 0x07 0x0c 0x08 0x42 0x72 0x69 0x73 0x62 0x61 0x6e 0x65 0x31 0x0f 0x30 0x0d 0x06 0x03 0x55 0x04 0x0a 0x0c 0x06 0x75 0x72 0x6e 0x65 0x73 0x74 0x31 0x16 0x30 0x14 0x06 0x03 0x55 0x04 0x03 0x0c 0x0d 0x54 0x72 0x65 0x76 0x6f 0x72 0x20 0x54 0x61 0x79 0x6c 0x6f 0x72 0x31 0x25 0x30 0x23 0x06 0x09 0x2a 0x86 0x48 0x86 0xf7 0x0d 0x01 0x09 0x01 0x16 0x16 0x75 0x72 0x6e 0x65 0x73 0x74 0x40 0x6f 0x6e 0x74 0x68 0x65 0x6e 0x65 0x74 0x2e 0x63 0x6f 0x6d 0x2e 0x61 0x75 0x30 0x76 0x30 0x10 0x06 0x07 0x2a 0x86 0x48 0xce 0x3d 0x02 0x01 0x06 0x05 0x2b 0x81 0x04 0x00 0x22 0x03 0x62 0x00 0x04 0xb4 0xbb 0xac 0x0a 0xa4 0xf5 0xee 0xaf 0x46 0x2e 0x03 0x20 0x97 0xed 0x60 0xf4 0x30 0x2b 0x1b 0xae 0xd2 0x7c 0x06 0xd2 0x3c 0x8d 0x8a 0x29 0xc8 0x79 0xce 0x9e 0xad 0x0e 0x49 0xd0 0xeb 0x32 0xe8 0xd9 0x44 0x1d 0x7d 0xad 0xaa 0x60 0xf9 0xd0 0xa3 0x53 0x30 0x51 0x30 0x1d 0x06 0x03 0x55 0x1d 0x0e 0x04 0x16 0x04 0x14 0x4e 0xc2 0x56 0x7e 0x6f 0xf7 0x63 0x0d 0x07 0xe4 0x74 0x6e 0x7e 0xf0 0xef 0x09 0xef 0xaf 0x62 0xa4 0x30 0x1f 0x06 0x03 0x55 0x1d 0x23 0x04 0x18 0x30 0x16 0x80 0x14 0x4e 0xc2 0x56 0x7e 0x6f 0xf7 0x63 0x0d 0x07 0xe4 0x74 0x6e 0x7e 0xf0 0xef 0x09 0xef 0xaf 0x62 0xa4 0x30 0x0f 0x06 0x03 0x55 0x1d 0x13 0x01 0x01 0xff 0x04 0x05 0x30 0x03 0x01 0x01 0xff 0x30 0x0a 0x06 0x08 0x2a 0x86 0x48 0xce 0x3d 0x04 0x03 0x02 0x03 0x68 0x00 0x30 0x65 0x02 0x30 0x6f 0x77 0xcc 0x2b 0xfa 0x9d 0x84 0x76 0x54 0x14 0x4c 0x1e 0x5c 0xe8 0xd4 0x7e 0x0c 0x5d 0xcf 0x6d 0x8c 0x58 0x76 0xb4 0xf7 0xb7 0xe7 0x00 0x61 0x4c 0x85 0xbb 0x67 0x07 0x31 0x3b 0xc9 0x68 0x99 0xfa 0x8f 0xb3 0x3d 0x2f 0x01 0xeb 0x5b 0xad 0x02 0x31 0x00 0xe9 0xc9 0xd8 0x31 0xa5 0xb8 0x78 0xd4 0xfb 0xf0 0xfe 0x7a 0x2c 0xe9 0x9a 0xed 0x2b 0x99 0x1d 0xb3 0xbb 0x94 0x25 0xf2 0x91 0xb7 0x06 0x34 0xca 0x96 0xad 0x22 0x0f 0xc1 0xd9 0x36 0xa0 0x2c 0xdf 0x22 0xde 0x39 0x5f 0x15 0x1d 0x28 0x47 0x48 because\n"));
        xju::assert_contains(readableRepr(e),std::string("too long"));
      }
    }
    catch(xju::Exception& e){
      std::cerr << readableRepr(e) << std::endl;
      xju::assert_never_reached();
    }
  }
}

}
}



using namespace xju::tls;

int main(int argc, char* argv[])
{
  unsigned int n(0);
  test1(), ++n;
  std::cout << "PASS - " << n << " steps" << std::endl;
  return 0;
}

