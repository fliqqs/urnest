// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


namespace xju
{
namespace tls
{

class Socket
{
private:
  xju::ip::Socket& transport_;
  xju::tls::ServerCrypto& crypto_;
  
  std::tuple<
    std::unique_ptr<xju::io::OStream>,
    std::unique_ptr<xju::io::IStream>,
    xju::Optional<std::pair<Certificate,bool> > > x_;
  
public:
  // accept TLS connection on specified socket
  // by specified deadline using lisener's crypto
  // pre: lifetime(transport) includes lifetime(this)
  // pre: lifetime(crypto) includes lifetime(this)
  Socket(xju::ip::TCPSocket& transport,
         xju::tls::ServerCrypto& crypto,
         bool const requestClientCertificate,
         std::chrono::steady_clock::time_point const& deadline,
         bool closeOnExec=true) /*throw(
           xju::DeadlineReached,
           xju::Exception)*/:
      x_(crypto.accept(transport,
                       requestClientCertificate,
                       deadline,
                       closeOnExec)),
      output_(std::get<0>(x_)),
      input_(std::get<1>(x_)),
      peerCertifiate_(std::get<2>(x_))
  {
  }
  // connect to dest and perform TLS handshake by specified deadline
  // using specified crypto
  // pre: lifetime(transport) includes lifetime(this)
  // pre: lifetime(crypto) includes lifetime(this)
  Socket(xju::ip::TCPSocket& transport,
         xju::tls::ClientCrypto& crypto,
         std::chrono::steady_clock::time_point const& deadline,
         bool closeOnExec=true) /*throw(
           xju::DeadlineReached,
           // eg connection refused, unreachable
           xju::Exception)*/:
      x_(crypto.connect(transport,crypto,deadline,closeOnExec)),
      output_(std::get<0>(x_)),
      input_(std::get<1>(x_)),
      peerCertifiate_(std::get<2>(x_))
  {
  }
  // unencrypted data to encrypt and send to server
  // note: to gracefully close socket, clear output_
  //       then read input_ until it closes
  std::unique_ptr<xju::io::OStream>& output_;

  // decrypted data from server
  // note that closure of the input_ might indicate an error
  // has occurred, use shutdown() to collect any error
  std::unique_ptr<xju::io::OStream> const& input_;

  // peer certificate and whether it is valid
  // note: client may always decline to supply; server must always supply
  // note: client must perform any required host validation
  xju::Optional<std::pair<Certificate,bool> > const& peerCertifiate_;

  // shutdown the TLS session gracefully, returning up to
  // maxReturn bytes of data received before completing shutdown
  // (discarding the rest)
  std::vector<uint8_t> shutdown(size_t const maxReturn)
  // throw xju::Exception - error occured during or before shutdown
  {
    return crypto_.shutdown(transport_,
                            std::move(decrypted_),
                            std::move(encrypt_));
  }

  // non-graceful unless shutdown has previously been called
  ~Socket() noexcept
  {
    if (decrypted_.get()){
      crypto_.close(transport_,std::move(decrypted_),std::move(encrypt_));
    }
  }
};

}
}
