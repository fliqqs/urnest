// Copyright (c) 2019 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <string>
#include <chrono>
#include <iostream>
#include <thread>
#include <algorithm>
#include <xju/steadyNow.hh>
#include <vector>
#include <xju/doCmd.hh>
#include <xju/linux/ntpd/parseNtpqAssociations.hh>
#include <xju/Exception.hh>
#include <sstream>
#include <xju/DeadlineReached.hh>

namespace xju
{
namespace linux
{
namespace ntpd
{

namespace {
bool isSynced(std::string const& ntpqCommand,
              std::chrono::steady_clock::time_point const& deadline) throw(
                xju::DeadlineReached,
                xju::Exception)
{
  try{
    std::vector<std::string> const cmd{ntpqCommand,"-c","associations"};
    auto const cmdStdoutStderr{xju::doCmd(cmd,deadline)};
    auto const x{parseNtpqAssociations(cmdStdoutStderr.first)};
    auto const i(std::find_if(x.begin(),x.end(),
                              [](decltype(*x.begin()) const& y){
                                return isSysPeer(y.second);
                              }));
    return (i!=x.end());
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "check time sync status using ntpq command " << ntpqCommand;
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

void awaitSynced(
  std::chrono::milliseconds const& interval,
  std::chrono::steady_clock::time_point const& endTime,
  std::string const& ntpqCommand,
  std::ostream& stdout,
  std::ostream& stderr) noexcept
{
  stdout << "system clock not synchronised" << std::endl;
  
  while(xju::steadyNow()+interval<endTime){
    std::this_thread::sleep_until(xju::steadyNow()+interval);
    try{
      if (isSynced(ntpqCommand,xju::steadyNow()+interval)){
        stdout << "system clock synchronised" << std::endl;
        return;
      }
      stdout << "system clock not synchronised" << std::endl;
    }
    catch(xju::Exception const& e){
      stderr << readableRepr(e) << std::endl;
    }
  }
}

}

// monitor ntp synchronisation of system clock until endTime, checking
// at specified interval
//
// - writes "system clock not synchronised" when clock becomes unsynchronised
//   and at intervals while it remains unsynchronised
// - writes "system clock synchronised" when clock becomes synchonised again
//
void monitorNtpSync(
  std::chrono::milliseconds const& interval,
  std::chrono::steady_clock::time_point const& endTime,
  std::string const& ntpqCommand,
  std::ostream& stdout,
  std::ostream& stderr) noexcept
{
  while(xju::steadyNow()+interval<endTime){
    std::this_thread::sleep_until(xju::steadyNow()+interval);
    try{
      if (!isSynced(ntpqCommand,xju::steadyNow()+interval)){
        awaitSynced(interval,endTime,ntpqCommand,stdout,stderr);
      }
    }
    catch(xju::Exception const& e){
      stderr << readableRepr(e) << std::endl;
    }
  }
  std::this_thread::sleep_until(endTime);
}

}
}
}
