%all==%all.tree:leaves

%all.tree==<<
%test-py-exit
%verify-test-cmc.x1-fail
%py-newtype-tests.tree:leaves


%py-newtype-tests.tree==<<
%verify-test-newtype.x1-fail-1
%verify-test-newtype.x1-fail-2
%verify-test-newtype.x2-fail
%verify-test-newtype.x3-fail
%verify-test-newtype.x3-fail
%verify-test-newtype.x4-fail
%verify-test-newtype.x5-fail
%verify-test-newtype.x6-fail
%verify-test-newtype.x7-fail

%verify-test-cmc.x1-fail==(%test-cmc.x1.errs)+cmd=grep -q '"MRO"':stdout

%test-cmc.x1.errs==(test-cmc.x1.py)+(%py-opts):py3.exec.output:err

%verify-test-newtype.x1-fail-1==(%test-newtype.x1.errs)+cmd=fgrep -q '"Argument 1 to \\"f\\" has incompatible type \\"str\\"; expected \\"FirstName\\""':stdout
%verify-test-newtype.x1-fail-2==(%test-newtype.x1.errs)+cmd=fgrep -q '"Argument 1 to \\"f\\" has incompatible type \\"LastName\\"; expected \\"FirstName\\""':stdout
%test-newtype.x1.errs==(test-newtype.x1.py)+(%py-opts):py3.exec.output:err

%verify-test-newtype.x2-fail==(%test-newtype.x2.errs)+cmd=fgrep -q '"Argument 1 to \\"f\\" has incompatible type \\"FirstName\\"; expected \\"str\\""':stdout
%test-newtype.x2.errs==(test-newtype.x2.py)+(%py-opts):py3.exec.output:err

%verify-test-newtype.x3-fail==(%test-newtype.x3.errs)+cmd=fgrep -q '"Unsupported operand types for < (\\"FirstName\\" and \\"SecondName\\")"':stdout
%test-newtype.x3.errs==(test-newtype.x3.py)+(%py-opts):py3.exec.output:err

%verify-test-newtype.x4-fail==(%test-newtype.x4.errs)+cmd=fgrep -q '"Incompatible types in assignment (expression has type \\"Int[MinutesTag]\\", variable has type \\"Int[HoursTag]\\")"':stdout
%test-newtype.x4.errs==(test-newtype.x4.py)+(%py-opts):py3.exec.output:err

%verify-test-newtype.x5-fail==(%test-newtype.x5.errs)+cmd=fgrep -q '"Unsupported operand types for < (\\"Int[HoursType]\\" and \\"Int[MinutesType]\\")"':stdout
%test-newtype.x5.errs==(test-newtype.x5.py)+(%py-opts):py3.exec.output:err

%verify-test-newtype.x6-fail==(%test-newtype.x6.errs)+cmd=grep -q '"7.s type <class .__main__.Hours.> is not the same as 8.s type <class .__main__.Minutes.>"':stdout
%test-newtype.x6.errs==(test-newtype.x6.py)+(%py-opts):py3.exec.output:err

%verify-test-newtype.x7-fail==(%test-newtype.x7.errs)+cmd=grep -q '"7.s type <class .__main__.Hours.> is not the same as 8.s type <class .__main__.Minutes.>"':stdout
%test-newtype.x7.errs==(test-newtype.x7.py)+(%py-opts):py3.exec.output:err

%py-opts==<<
+(..%py-opts)

%test-py-exit.sh== ! <<
#!/bin/sh
status=$(cat "$1")
if [ $status != "1" ]
then
  echo "expected exit code 1, got $status" >&2 &&
  false
fi &&
errors=$(cat "$2") &&
if [ "$errors" != "not found" ]
then
  echo "$errors != 'not found'" >&2 &&
  false
fi

%test-py-exit.exec==(test-py-exit.py)+(%py-opts):py3.exec

%test-py-exit==()+cmd=(%test-py-exit.sh) (%test-py-exit.exec/status) (%test-py-exit.exec/output):stdout


