// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/crypt/I.hh>
#include <xju/format.hh>
#include <xju/BitCount.hh>

namespace xju
{
namespace crypt
{
namespace rsa
{

class PublicKey{
public:
  PublicKey(xju::crypt::I e,
            xju::crypt::I n) noexcept:
      e_(std::move(e)),
      n_(std::move(n))
  {
  }
  xju::BitCount keySize() const{
    auto const v(n_.value());
    xju::assert_equal(v[0],(uint8_t)0); //leading zero
    xju::assert_greater_equal(v[1],(uint8_t)0x80); //should have high bit set
    return xju::BitCount((v.size()-1)*8);
  }
  xju::crypt::I e_;
  xju::crypt::I n_;

  friend bool operator<(PublicKey const& a, PublicKey const& b) noexcept;

  friend std::ostream& operator<<(std::ostream& s, PublicKey const& x)
  {
    //REVISIT: print in same encoding as id_rsa.pub?
    auto const e(x.e_.value());
    auto const n(x.n_.value());
    std::string const nn(
      xju::format::join(n.begin(),n.end(),xju::format::Hex(""),""));
    return s << "e: "
             << xju::format::join(e.begin(),e.end(),xju::format::Hex(""),"")
             << ", n: " << nn;
  }
  
};

}
}
}
