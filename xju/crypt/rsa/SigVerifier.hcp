// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/crypt/SigVerifier.hh>
#include <xju/crypt/rsa/PublicKey.hh>
#include <utility> //impl
#include <xju/Exception.hh> //impl
#include <xju/crypt/verifySuccessful.hh> //impl
#include <xju/format.hh> //impl
#include <memory>
#include <xju/crypt/hash/sha1.hh> //impl
#include <xju/crypt/sexp_ptr.hh>

namespace xju
{
namespace crypt
{
namespace rsa
{

namespace
{
sexp_ptr makeGcryPublicKey(xju::crypt::rsa::PublicKey const& k)
{
  try{
    auto const n(k.n_.value());
    auto const e(k.e_.value());
    return sexp_ptr("(public-key(rsa(n%b)(e%b)))",
                    n.size(), n.data(),
                    e.size(), e.data());
  }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "build libgcrypt rsa public key context for RSA public key "
        << k;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
}

}

class SigVerifier : public xju::crypt::SigVerifier
{
public:
  explicit SigVerifier(xju::crypt::rsa::PublicKey publicKey):
      publicKey_(std::move(publicKey)),
      sexp_(makeGcryPublicKey(publicKey_))
  {
  }
  virtual void verifySignature(void const* x,size_t len,
                               Signature const& signature) override
  {
    try{
      // rfc8017 8.2.2 step 1
      if (signature.size()!=publicKey_.keySize().value()/8){
        std::ostringstream s;
        s << "signature size (" << signature.size()
          << " bytes) is not equal to key size ("
          << publicKey_.keySize().value()/8
          << " bytes)";
        throw xju::Exception(s.str(),XJU_TRACED);
      }

      std::vector<uint8_t> messageHash(
        xju::crypt::hash::sha1(
          std::vector<uint8_t>((uint8_t const*)x,
                               ((uint8_t const*)x)+len)));
      
      //sign message with private key
      xju::crypt::sexp_ptr data("(data (flags pkcs1) (hash sha1 %b))",
                                messageHash.size(),messageHash.data());
      
      xju::crypt::sexp_ptr sig(
        "(sig-val(rsa(s %b)))",
        signature.size(),signature.data());
      
      verifySuccessful(gcry_pk_verify(sig.get(),
                                      data.get(),
                                      sexp_.get()),XJU_TRACED);
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "verify that signature "
        << xju::format::join(signature.begin(),
                             signature.end(),
                             xju::format::Hex(""),
                             "")
        << " on " << len << " supplied data bytes"
        << " was signed by owner of RSA public key "
        << publicKey_;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
private:
  xju::crypt::rsa::PublicKey publicKey_;
  xju::crypt::sexp_ptr sexp_;
  
};

}
}
}


