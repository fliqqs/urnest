// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <string>
#include <vector>
#include <chrono>
#include <new>
#include <xju/Exception.hh>
#include <xju/pipe.hh> //impl
#include <sstream> //impl
#include <xju/Subprocess.hh> //impl
#include <xju/unistd.hh> //impl
#include <algorithm> //impl
#include <iterator> //impl

namespace xju
{
// run command by a deadline, capturing its stdout and stderr,
// killing subprocess on timeout
// - result.first is stdout
// - result.second is stderr
std::pair<std::string,std::string> doCmd(
  std::vector<std::string> const& cmd,
  std::chrono::steady_clock::time_point const& deadline) throw(
    std::bad_alloc,xju::Exception)
{
  std::chrono::milliseconds const timeout(
    std::chrono::duration_cast<std::chrono::milliseconds>(
      deadline-std::chrono::steady_clock::now()));
  try{
    auto p(xju::pipe(true,false)); // to capture stdout of subprocess
    auto pe(xju::pipe(true,false)); // to capture stderr of subprocess
    std::set<xju::io::Input const*> inputs({&*p.first,&*pe.first});
    int exitStatus(0);
    std::ostringstream output;
    std::ostream_iterator<char> oi(output);
    std::ostringstream cmdstderr;
    std::ostream_iterator<char> ei(cmdstderr);
    /*deliberate block*/ {
      Subprocess command(exitStatus,[&]() -> int { 
          p.second->useAsStdout(); // use writable end of pipe as stdout
          pe.second->useAsStderr(); // use writable end of pipe as stdout
          xju::exec(cmd[0],cmd);
          return 0;
        });
      p.second.reset();//close writable end of pipe in parent process
      pe.second.reset();//close writable end of pipe in parent process
      std::vector<char> buffer(512,0);
      for(auto now=std::chrono::steady_clock::now();
          now<deadline && inputs.size();
          now=std::chrono::steady_clock::now()){
        auto r=xju::io::select(inputs,{},deadline);
        if (r.first.find(&*p.first)!=r.first.end()){
          try{
            buffer.resize(512);
            buffer.resize(p.first->read(buffer.data(),512,now));
            std::copy(buffer.begin(),buffer.end(),oi);
          }
          catch(xju::io::Input::Closed const&)
          {
            inputs.erase(&*p.first);
          }
        }
        if (r.first.find(&*pe.first)!=r.first.end()){
          try{
            buffer.resize(512);
            buffer.resize(pe.first->read(buffer.data(),512,now));
            std::copy(buffer.begin(),buffer.end(),ei);
          }
          catch(xju::io::Input::Closed const&)
          {
            inputs.erase(&*pe.first);
          }
        }
      }
      if (std::chrono::steady_clock::now() >= deadline){
        throw xju::Exception("timeout",XJU_TRACED);
      }
      // note exiting this block will kill(9) the subprocess, but that
      // has no effect if it has exited already. Exiting this block
      // also "waits" for the subprocess, collecting its exit status
    }
    if (exitStatus!=0){
      std::ostringstream s;
      s << "command failed with status " << exitStatus
        << ", stdout "
        << xju::format::quote(xju::format::cEscapeString(output.str()))
        << " and stderr "
        << xju::format::quote(xju::format::cEscapeString(cmdstderr.str()));
      throw xju::Exception(s.str(),XJU_TRACED);
    }
    return std::make_pair(output.str(),cmdstderr.str());
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "run " << xju::format::join(cmd.begin(),cmd.end(),std::string(" "))
      << " within " << timeout.count() << "ms";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}
  
}

