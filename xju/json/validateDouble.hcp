// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/stringToDouble.hh>
#include <memory>
#include <xju/json/Element.hh>
#include <sstream>

namespace xju
{
namespace json
{
// return the value of x assuming it is a Double in range [min,max]
// - description, e.g. "a scaling factor" and fileAndLine appear in any
//   exception raised
// - note Double(long double) may throw xju::Exception
template<class Double=double>
Double validateDouble(
  std::string const& description,
  xju::Traced const& fileAndLine,
  std::shared_ptr<xju::json::Element const> const& x,
  Double const min = std::numeric_traits<Double>::min(),
  Double const max = std::numeric_traits<Double>::max()) const throw(
    // x is not a json::Number or
    // x is outside range [min,max]
    xju::Exception)
{
  try {
    Number const& number(x->asA<Number>());
    auto const result(xju::stringToDouble(number.value_));
    if (result<min || result>max){
      std::ostringstream s;
      s << result << " is not in range [" << min << ".." << max << "]";
      throw xju::Exception(s.str(),XJU_TRACED);
    }
    return Double(result);
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "validate JSON element " 
      << (*x) << " assuming it is " << description << " i.e. a double "
      << "in range ["<< min << ".." << max << "]";
    e.addContext(s.str(),fileAndLine);
    throw;
  }
}
  

}
}
