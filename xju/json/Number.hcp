// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/json/Element.hh>
#include <xju/stringToDouble.hh> //impl
#include <xju/stringToInt.hh> //impl
#include <string>
#include <sstream> //impl
#include <typeinfo> //impl

namespace xju
{
namespace json
{
class Number : public xju::json::Element
{
public:
  explicit Number(std::string const value) noexcept
    :value_(value)
  {
  }

  virtual void formatAsUtf8(
    std::ostream& to,
    xju::Utf8String const& firstLineIndent,
    xju::Utf8String const& otherLinesIndent,
    xju::Utf8String const& indentStep) const noexcept override
  {
    if (indentStep.size()){
      to << firstLineIndent;
    }
    to << value_;
  }
  virtual std::string str() const noexcept override
  {
    return value_;
  }

  // note this is not numeric ordering!
  virtual bool lessThan(Element const& y) const noexcept override
  {
    if (typeid(*this)!=typeid(y)){
      return std::string(typeid(*this).name())<typeid(y).name();
    }
    return value_ < static_cast<Number const&>(y).value_;
  }

protected:
  // Get the value of this element assuming it is a JSON Number
  // representable as a long double.
  virtual double asDouble_() const /*throw(
    // this element is not a Number or
    // it is too big or small to represent as a long double
    xju::Exception)*/ override
  {
    return xju::stringToDouble(value_);
  }

  int asInt_() const /*throw(
    // this element is not a Number or
    // its value is not a whole number or
    // its value is too big or small to represent as a std::intmax_t
    xju::Exception)*/ override
  {
    return xju::stringToInt(value_);
  }

  
private:
  std::string value_;
};

}
}
