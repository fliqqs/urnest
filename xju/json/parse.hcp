// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <memory>
#include <xju/Exception.hh>
#include <xju/assert.hh> //impl
#include <sstream> //impl
#include <xju/json/Element.hh>
#include <hcp/parser.hh> //impl
#include <xju/json/Number.hh> //impl
#include <hcp/ast.hh> //impl
#include <xju/Utf8String.hh>
#include <xju/json/Array.hh> //impl

namespace xju
{
namespace json
{

// parse s assuming it is valid JSON
std::shared_ptr<xju::json::Element const> parse(
  xju::Utf8String const& s) throw(
    // x is not valid JSON
    xju::Exception);

namespace
{

// Subclasses of each json Element type, to capture the
// line and column that each element was parsed at, which
// can then be included in diagnostics.
//
class ParsedNumber : public xju::json::Number
{
public:
  ParsedNumber(std::string const& value,
               unsigned int atLine,
               unsigned int atColumn) noexcept
    :xju::json::Number(value),
     atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << Number::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedString : public xju::json::String
{
public:
  ParsedString(Utf8String const& value,
               unsigned int atLine,
               unsigned int atColumn) noexcept
    :xju::json::String(value),
     atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << String::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedArray : public xju::json::Array
{
public:
  ParsedArray(std::vector<std::shared_ptr<Element const> > const& value,
              unsigned int atLine,
              unsigned int atColumn) noexcept
    :xju::json::Array(value),
     atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << Array::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

// hcp_ast::Item type tree mirroring json Element type tree
class AstElement : public hcp_ast::CompositeItem
{
public:
  AstElement(std::vector<hcp_ast::IR>& items,
             std::shared_ptr<xju::json::Element const> const& element) throw()
      : hcp_ast::CompositeItem(items),
        element_(element)
  {
  }
  std::shared_ptr<xju::json::Element const> const element_;
};

class AstNumber : public AstElement
{
public:
  explicit AstNumber(std::vector<hcp_ast::IR>& items) noexcept
      :AstElement(items,AstNumber::convert(items))
  {
  }
private:
  std::shared_ptr<xju::json::Number const> convert(
    std::vector<hcp_ast::IR>& items) noexcept
  {
    xju::assert_not_equal(items.size(),0U);
    return std::shared_ptr<xju::json::Number const>(
      new xju::json::ParsedNumber(
        std::string(items.front()->begin(),items.back()->end()),
        items.front()->begin().line_,
        items.front()->begin().column_));
  }
};

class AstString : public AstElement
{
public:
  explicit AstString(std::vector<hcp_ast::IR>& items,
                     Utf8String const& value) noexcept
    :AstElement(items,AstString::convert(items,value))
  {
  }
  class Item : public hcp_ast::Item
  {
  public:
    I begin_;
    I end_;
    
    virtual ~Item() throw() {
    }
    
    explicit Item(I begin, I end) throw():
        begin_(begin),
        end_(end) {
    }
    // Item::
    virtual I begin() const noexcept override {
      return begin_;
    }
    // Item::
    virtual I end() const noexcept override {
      return end_;
    }
    virtual std::string str() const noexcept override
    {
      return "JSON string";
    }
  };
private:

  std::shared_ptr<xju::json::String const> convert(
    std::vector<hcp_ast::IR>& items,
    Utf8String const& value) noexcept
  {
    xju::assert_not_equal(items.size(),0U);
    return std::shared_ptr<xju::json::String const>(
      new xju::json::ParsedString(
        value,
        items.front()->begin().line_,
        items.front()->begin().column_));
  }
};

class AstArray : public AstElement
{
public:
  explicit AstArray(std::vector<hcp_ast::IR>& items) noexcept
      :AstElement(items,AstArray::convert(items))
  {
  }
private:
  std::shared_ptr<xju::json::Array const> convert(
    std::vector<hcp_ast::IR>& items) noexcept
  {
    xju::assert_not_equal(items.size(),0U);
    auto const children(hcp_ast::findChildrenOfType<AstElement>(
                          hcp_ast::CompositeItem(items)));
    std::vector<std::shared_ptr<Element const> > arrayElements;
    std::transform(children.begin(),children.end(),
                   std::back_inserter(arrayElements),
                   [](AstElement const& x){
                     return x.element_;
                   });
    return std::shared_ptr<xju::json::Array const>(
      new xju::json::ParsedArray(
        arrayElements,
        items.front()->begin().line_,
        items.front()->begin().column_));
  }
};

hcp_parser::PR digit() noexcept
{
  static hcp_parser::PR result(hcp_parser::charInRange('0','9'));
  return result;
}

hcp_parser::PR nonZeroDigit() noexcept
{
  static hcp_parser::PR result(hcp_parser::charInRange('1','9'));
  return result;
}

hcp_parser::PR exponent() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::parseOneOfChars("eE")+
    hcp_parser::optional(hcp_parser::parseOneOfChars("+-"))+
    hcp_parser::atLeastOne(digit()));
  return result;
}

hcp_parser::PR number() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstNumber>(
        "number",
        hcp_parser::optional(hcp_parser::parseOneOfChars("-"))+
        (hcp_parser::parseLiteral("0")|
         (nonZeroDigit()+
          hcp_parser::zeroOrMore()*digit()))+
        (!hcp_parser::parseLiteral(".")|
         hcp_parser::parseLiteral(".")+
         hcp_parser::atLeastOne(digit()))+
        ((!hcp_parser::parseOneOfChars("eE"))|exponent())))+
    hcp_parser::eatWhite());
  return result;
}

struct StringLiteralParser : public hcp_parser::Parser
{
  class C1 : hcp_parser::Cause
  {
  public:
    explicit C1(char got,char want) noexcept
      :got_(got),
       want_(want)
    {
    }
    virtual std::string str() const throw() override
    {
      std::ostringstream s;
      s << "expected " << xju::format::quote(xju::format::cEscapeChar(want_))
        << ", got "  << xju::format::quote(xju::format::cEscapeChar(got_));
      return s.str();
    }
    char const got_;
    char const want_;
  };
  // Parser::
  virtual hcp_parser::ParseResult parse_(
    hcp_parser::I const at, hcp_parser::Options const& o) throw() 
  {
    std::ostringstream unescaped;
    auto i{at};
    if (*i != '"'){
      return hcp_parser::ParseResult(hcp_parser::Exception(
                                       xju::Shared(new C1(*i,'"')),
                                       i,
                                       XJU_TRACED));
    }
    while(*++i != '"'){
      try{
        if ((*i)=='\\'){
          switch(*++i){
          case '"': unescaped << '"'; break;
          case '\\':unescaped << '\\'; break;
          case '/': unescaped << '/'; break;
          case 'a': unescaped << '\a'; break;
          case 'b': unescaped << '\b'; break;
          case 'f': unescaped << '\c'; break;
          case 'n': unescaped << '\n'; break;
          case 'r': unescaped << '\r'; break;
          case 't': unescaped << '\t'; break;
          case 'u':{
            std::string s{*++i,*++i,*++i,*++i};
            uint16_t const v(xju::stringToUInt(s,16));
            if (xju::utf8::isSurrogateHigh(v)){
              std::string s{*++i,*++i,*++i,*++i};
              uint16_t const u(xju::stringToUInt(s,16));
              unescaped << std::string(xju::utf8::encodeCodePoint(
                                         xju::utf8::decodeSurrogatePair(u,v)));
            }
            else{
              unescaped << xju::utf8::encodeCodePoint(v);
            }
            break;
          }
          }
        }
        else {
          unescaped << xju::utf8::encodeCodePoint(
            xju::utf8::decodeCodePoint(i));
        }
      }
      catch(xju::Exception& e){
        return hcp_parser::ParseResult(hcp_parser::Exception(
                                         xju::Shared(new C2(e),i,XJU_TRACED)));
      }
    }
    return hcp_parser::ParseResult(
      std::make_pair(
        hcp_ast::IRs(
          1U,
          new AstString(
            hcp_ast::IRs(1U,new AstString::Item(at,i)),
            xju::Utf8String(unescaped.str())))));
  }
  virtual std::string target() const throw() {
    return "JSON string";
  }
};

hcp_parser::PR element() noexcept;

struct RecurseElement : public hcp_parser::Parser
{
  // Parser::
  virtual hcp_parser::ParseResult parse_(
    hcp_parser::I const at, hcp_parser::Options const& o) throw() 
  {
    return element()->parse_(at,o);
  }
  virtual std::string target() const throw() {
    return "element (recurse)";
  }
};
hcp_parser::PR elementRecurse() noexcept
{
  static hcp_parser::PR result{new RecurseElement};
  return result;
}
hcp_parser::PR array() noexcept
{
  static hcp_parser::PR result{
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstArray>(
        "array",
        hcp_parser::listOf(
          hcp_parser::parseLiteral("[")+hcp_parser::eatWhite(),
          elementRecurse(),
          hcp_parser::parseLiteral(",")+hcp_parser::eatWhite(),
          hcp_parser::parseLiteral("]")+hcp_parser::eatWhite())))};
  return result;
}

hcp_parser::PR element() noexcept
{
  static hcp_parser::PR result(
    array()|
    number()/*|
    bool()|
    string()|
    map()|
    null()
    ... */);
  return result;
}

}

// (declared above)
std::shared_ptr<xju::json::Element const> parse(
  xju::Utf8String const& json) throw(
    xju::Exception)
{
  std::string const& s{json};
  auto v(hcp_parser::parseString(s.begin(),s.end(),
                                 hcp_parser::eatWhite()+element()));
  return hcp_ast::findOnlyChildOfType<AstElement>(v).element_;
}

}
}
