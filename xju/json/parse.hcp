// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <memory>
#include <xju/Exception.hh>
#include <xju/assert.hh> //impl
#include <sstream> //impl
#include <xju/json/Element.hh>
#include <hcp/parser.hh> //impl
#include <xju/json/Number.hh> //impl
#include <hcp/ast.hh> //impl
#include <xju/Utf8String.hh>
#include <xju/json/Array.hh> //impl
#include <xju/json/Object.hh> //impl
#include <xju/json/String.hh> //impl
#include <xju/stringToUInt.hh> //impl
#include <xju/utf8/surrogate.hh> //impl
#include <xju/utf8/encodeCodePoint.hh> //impl
#include <xju/utf8/decodeCodePoint.hh> //impl
#include <xju/json/Null.hh> //impl
#include <xju/json/True.hh> //impl
#include <xju/json/False.hh> //impl

namespace xju
{
namespace json
{

// parse s assuming it is valid JSON
std::shared_ptr<xju::json::Element const> parse(
  xju::Utf8String const& s) /*throw(
    // x is not valid JSON
    xju::Exception)*/;

namespace
{

// Subclasses of each json Element type, to capture the
// line and column that each element was parsed at, which
// can then be included in diagnostics.
//
class ParsedNumber : public xju::json::Number
{
public:
  ParsedNumber(std::string const& value,
               unsigned int atLine,
               unsigned int atColumn) noexcept
    :xju::json::Number(value),
     atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << Number::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedString : public xju::json::String
{
public:
  ParsedString(Utf8String const& value,
               unsigned int atLine,
               unsigned int atColumn) noexcept
    :xju::json::String(value),
     atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << String::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedNull : public xju::json::Null
{
public:
  ParsedNull(unsigned int atLine,
             unsigned int atColumn) noexcept
    :atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << Null::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedTrue : public xju::json::True
{
public:
  ParsedTrue(unsigned int atLine,
             unsigned int atColumn) noexcept
    :atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << True::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedFalse : public xju::json::False
{
public:
  ParsedFalse(unsigned int atLine,
             unsigned int atColumn) noexcept
    :atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << False::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedArray : public xju::json::Array
{
public:
  ParsedArray(std::vector<std::shared_ptr<Element const> > const& value,
              unsigned int atLine,
              unsigned int atColumn) noexcept
    :xju::json::Array(value),
     atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << Array::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

class ParsedObject : public xju::json::Object
{
public:
  ParsedObject(
    std::map<xju::Utf8String,std::shared_ptr<Element const> > const& value,
    unsigned int atLine,
    unsigned int atColumn) noexcept
    :xju::json::Object(value),
     atLine_(atLine),
     atColumn_(atColumn)
  {
  }
  unsigned int atLine_;
  unsigned int atColumn_;

  virtual std::string str() const noexcept override
  {
    std::ostringstream s;
    s << Object::str() << " (at line " << atLine_
      << " column " << atColumn_ << ")";
    return s.str();
  }
};

// hcp_ast::Item type tree mirroring json Element type tree
class AstElement : public hcp_ast::Item
{
public:
  AstElement(hcp_ast::I begin, hcp_ast::I end,
             std::shared_ptr<xju::json::Element const> const& element) throw()
      : hcp_ast::Item(begin,end),
        element_(element)
  {
  }
  AstElement(std::vector<hcp_ast::IR> const& items,
             std::shared_ptr<xju::json::Element const> const& element) throw()
      : hcp_ast::Item(items),
        element_(element)
  {
  }
  std::shared_ptr<xju::json::Element const> const element_;
};

class AstNumber : public AstElement
{
public:
  explicit AstNumber(std::vector<hcp_ast::IR> const& items) noexcept
      :AstElement(items,AstNumber::convert(items))
  {
  }
private:
  std::shared_ptr<xju::json::Number const> convert(
    std::vector<hcp_ast::IR> const& items) noexcept
  {
    xju::assert_not_equal(items.size(),0U);
    return std::shared_ptr<xju::json::Number const>(
      new xju::json::ParsedNumber(
        std::string(items.front()->begin(),items.back()->end()),
        items.front()->begin().line_,
        items.front()->begin().column_));
  }
};

class AstNull : public AstElement
{
public:
  explicit AstNull(std::vector<hcp_ast::IR> const& items) noexcept
    :AstElement(items,
                std::shared_ptr<xju::json::Element>(new xju::json::Null))
  {
  }
};

class AstTrue : public AstElement
{
public:
  explicit AstTrue(std::vector<hcp_ast::IR> const& items) noexcept
    :AstElement(items,
                std::shared_ptr<xju::json::Element>(new xju::json::True))
  {
  }
};

class AstFalse : public AstElement
{
public:
  explicit AstFalse(std::vector<hcp_ast::IR> const& items) noexcept
    :AstElement(items,
                std::shared_ptr<xju::json::Element>(new xju::json::False))
  {
  }
};

class AstString : public AstElement
{
public:
  explicit AstString(hcp_ast::I begin, hcp_ast::I end,
                     Utf8String const& value) noexcept
    :AstElement(begin,end,AstString::convert(begin,value))
  {
  }
private:

  std::shared_ptr<xju::json::String const> convert(
    hcp_ast::I at,
    Utf8String const& value) noexcept
  {
    return std::shared_ptr<xju::json::String const>(
      new xju::json::ParsedString(
        value,
        at.line_,
        at.column_));
  }
};

class AstArray : public AstElement
{
public:
  explicit AstArray(std::vector<hcp_ast::IR>& items) noexcept
      :AstElement(items,AstArray::convert(items))
  {
  }
private:
  std::shared_ptr<xju::json::Array const> convert(
    std::vector<hcp_ast::IR>& items) noexcept
  {
    xju::assert_not_equal(items.size(),0U);
    auto const children(hcp_ast::findChildrenOfType<AstElement>(
                          hcp_ast::Item(items)));
    std::vector<std::shared_ptr<Element const> > arrayElements;
    std::transform(children.begin(),children.end(),
                   std::back_inserter(arrayElements),
                   [](AstElement const& x){
                     return x.element_;
                   });
    return std::shared_ptr<xju::json::Array const>(
      new xju::json::ParsedArray(
        arrayElements,
        items.front()->begin().line_,
        items.front()->begin().column_));
  }
};

class ObjectMemberTag{};
typedef hcp_ast::TaggedItem<ObjectMemberTag> ObjectMember;

class ObjectValueTag{};
typedef hcp_ast::TaggedItem<ObjectValueTag> ObjectValue;

class AstObject : public AstElement
{
public:
  explicit AstObject(std::vector<hcp_ast::IR>& items) noexcept
      :AstElement(items,AstObject::convert(items))
  {
  }
private:
  std::shared_ptr<xju::json::Object const> convert(
    std::vector<hcp_ast::IR>& items) noexcept
  {
    xju::assert_not_equal(items.size(),0U);
    auto const children(hcp_ast::findChildrenOfType<ObjectMember>(
                          hcp_ast::Item(items)));
    std::map<xju::Utf8String,std::shared_ptr<Element const> > objectElements;
    std::transform(children.begin(),children.end(),
                   std::inserter(objectElements,objectElements.end()),
                   [](ObjectMember const& x){
                     auto const key(
                       hcp_ast::findChildrenOfType<AstString>(x,1U).front());
                     auto const value(
                       hcp_ast::findChildrenOfType<ObjectValue>(x,1U).front());
                     return std::make_pair(
                       key.get().element_->asString(),
                       hcp_ast::findChildrenOfType<AstElement>(
                         value.get(),1U).front().get().element_);
                   });
    return std::shared_ptr<xju::json::Object const>(
      new xju::json::ParsedObject(
        objectElements,
        items.front()->begin().line_,
        items.front()->begin().column_));
  }
};

hcp_parser::PR digit() noexcept
{
  static hcp_parser::PR result(hcp_parser::charInRange('0','9'));
  return result;
}

hcp_parser::PR nonZeroDigit() noexcept
{
  static hcp_parser::PR result(hcp_parser::charInRange('1','9'));
  return result;
}

hcp_parser::PR exponent() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::parseOneOfChars("eE")+
    hcp_parser::optional(hcp_parser::parseOneOfChars("+-"))+
    hcp_parser::atLeastOne(digit()));
  return result;
}

hcp_parser::PR number() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstNumber>(
        "number",
        hcp_parser::optional(hcp_parser::parseOneOfChars("-"))+
        (hcp_parser::parseLiteral("0")|
         (nonZeroDigit()+
          hcp_parser::zeroOrMore()*digit()))+
        (!hcp_parser::parseLiteral(".")|
         hcp_parser::parseLiteral(".")+
         hcp_parser::atLeastOne(digit()))+
        ((!hcp_parser::parseOneOfChars("eE"))|exponent())))+
    hcp_parser::eatWhite());
  return result;
}
hcp_parser::PR null_() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstNull>(
        "null",
        hcp_parser::parseLiteral("null")))+
    hcp_parser::eatWhite());
  return result;
}

hcp_parser::PR true_() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstTrue>(
        "true",
        hcp_parser::parseLiteral("true")))+
    hcp_parser::eatWhite());
  return result;
}

hcp_parser::PR false_() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstFalse>(
        "false",
        hcp_parser::parseLiteral("false")))+
    hcp_parser::eatWhite());
  return result;
}

struct StringLiteralParser : public hcp_parser::Parser
{
  // Parser::
  virtual hcp_parser::ParseResult parse_(
    hcp_parser::I const at, hcp_parser::Options const& o) throw() 
  {
    try{
      std::ostringstream unescaped;
      auto i{at};
      if (*i != '"'){
        return hcp_parser::ParseResult(
          hcp_parser::Exception(
            std::shared_ptr<hcp_parser::Exception::Cause>(new C1(*i,'"')),
            i,
            XJU_TRACED));
      }
      ++i;
      while(*i != '"'){
        try{
          if ((*i)=='\\'){
            switch(*++i){
            case '"': unescaped << '"'; break;
            case '\\':unescaped << '\\'; break;
            case '/': unescaped << '/'; break;
            case 'a': unescaped << '\a'; break;
            case 'b': unescaped << '\b'; break;
            case 'f': unescaped << '\f'; break;
            case 'n': unescaped << '\n'; break;
            case 'r': unescaped << '\r'; break;
            case 't': unescaped << '\t'; break;
            case 'u':{
              std::string s{*++i,*++i,*++i,*++i};
              uint16_t const u(xju::stringToUInt(s,16));
              if (xju::utf8::surrogate::isSurrogateHigh(u)){
                ++i;
                if (*i!='\\' || *xju::next(i)!='u'){
                  return hcp_parser::ParseResult(
                    hcp_parser::Exception(
                      std::shared_ptr<hcp_parser::Exception::Cause>(
                        new C2(*i,*xju::next(i))),
                      i,
                      XJU_TRACED));
                }
                ++i;
                std::string s{*++i,*++i,*++i,*++i};
                uint16_t const v(xju::stringToUInt(s,16));
                unescaped << xju::utf8::encodeCodePoint(
                  xju::utf8::surrogate::decodeSurrogatePair(u,v));
              }
              else{
                unescaped << xju::utf8::encodeCodePoint(u);
              }
              break;
            }
            default:
              return hcp_parser::ParseResult(
                hcp_parser::Exception(
                  std::shared_ptr<hcp_parser::Exception::Cause>(
                    new C3(*i)),
                  i,
                  XJU_TRACED));
            }
            ++i;
          }
          else {
            auto const x{xju::utf8::decodeCodePoint(i)};
            unescaped << xju::utf8::encodeCodePoint(x.first);
            i=x.second;
          }
        }
        catch(xju::Exception& e){
          return hcp_parser::ParseResult(
            hcp_parser::Exception(
              std::shared_ptr<hcp_parser::Exception::Cause>(
                new hcp_parser::FixedCause(
                  readableRepr(e,false,true))),
              i,
              XJU_TRACED));
        }
      }
      xju::assert_equal(*i,'"');
      ++i;
      return hcp_parser::ParseResult(
        std::make_pair(
          hcp_ast::IRs(
            1U,
            hcp_ast::IR(new AstString(
                 at,i,
                 xju::Utf8String(unescaped.str())))),
            i));
    }
    catch(hcp_ast::I::EndOfInput const& e) {
      return hcp_parser::ParseResult(
        hcp_parser::Exception(
          std::shared_ptr<hcp_parser::Exception::Cause>(
            new hcp_parser::FixedCause(
              "end of input")),
          e.at_,
          XJU_TRACED));
    }
  }
    
  virtual std::string target() const throw() {
    return "JSON string";
  }

  class C1 : public hcp_parser::Exception::Cause
  {
  public:
    explicit C1(char got,char want) noexcept
      :got_(got),
       want_(want)
    {
    }
    virtual std::string str() const throw() override
    {
      std::ostringstream s;
      s << "expected " << xju::format::quote(xju::format::cEscapeChar(want_))
        << ", got "  << xju::format::quote(xju::format::cEscapeChar(got_));
      return s.str();
    }
    char const got_;
    char const want_;
  };
  class C2 : public hcp_parser::Exception::Cause
  {
  public:
    explicit C2(char got1,char got2) noexcept
      :got1_(got1),
       got2_(got2)
    {
    }
    virtual std::string str() const throw() override
    {
      std::ostringstream s;
      s << "expected \"\\u\""
        << ", got "  << xju::format::quote(xju::format::cEscapeChar(got1_)+
                                           xju::format::cEscapeChar(got2_));
      return s.str();
    }
    char const got1_;
    char const got2_;
  };
  class C3 : public hcp_parser::Exception::Cause
  {
  public:
    explicit C3(char got) noexcept
      :got_(got)
    {
    }
    virtual std::string str() const throw() override
    {
      std::ostringstream s;
      s << "expected one of \", \\, /, a, b, f, n, r, t, u, got (c-escaped) "
        << xju::format::quote(xju::format::cEscapeChar(got_));
      return s.str();
    }
    char const got_;
  };
};

hcp_parser::PR string() noexcept
{
  static hcp_parser::PR result(
    hcp_parser::PR(new StringLiteralParser)+
    hcp_parser::eatWhite());
  return result;
}

hcp_parser::PR element() noexcept;

struct RecurseElement : public hcp_parser::Parser
{
  // Parser::
  virtual hcp_parser::ParseResult parse_(
    hcp_parser::I const at, hcp_parser::Options const& o) throw() 
  {
    return element()->parse_(at,o);
  }
  virtual std::string target() const throw() {
    return "element (recurse)";
  }
};
hcp_parser::PR elementRecurse() noexcept
{
  static hcp_parser::PR result{new RecurseElement};
  return result;
}
hcp_parser::PR array() noexcept
{
  static hcp_parser::PR result{
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstArray>(
        "array",
        hcp_parser::listOf(
          hcp_parser::parseLiteral("[")+hcp_parser::eatWhite(),
          elementRecurse(),
          hcp_parser::parseLiteral(",")+hcp_parser::eatWhite(),
          hcp_parser::parseLiteral("]")+hcp_parser::eatWhite())))};
  return result;
}
hcp_parser::PR object() noexcept
{
  static hcp_parser::PR result{
    hcp_parser::PR(
      new hcp_parser::NamedParser<AstObject>(
        "object",
        hcp_parser::listOf(
          hcp_parser::parseLiteral("{")+hcp_parser::eatWhite(),
          hcp_parser::PR(
            new hcp_parser::NamedParser<ObjectMember>(
              "object member",
              string()+hcp_parser::parseLiteral(":")+hcp_parser::eatWhite()+
              hcp_parser::PR(
                new hcp_parser::NamedParser<ObjectValue>(
                  "object value",
                  elementRecurse())))),
          hcp_parser::parseLiteral(",")+hcp_parser::eatWhite(),
          hcp_parser::parseLiteral("}")+hcp_parser::eatWhite())))};
  return result;
}

hcp_parser::PR element() noexcept
{
  static hcp_parser::PR result(
    null_()|
    true_()|
    false_()|
    string()|
    number()|
    array()|
    object());
  return result;
}

}

// (declared above)
std::shared_ptr<xju::json::Element const> parse(
  xju::Utf8String const& json) /*throw(
    xju::Exception)*/
{
  std::string const& s{json};
  auto v(hcp_parser::parseString(s.begin(),s.end(),
                                 hcp_parser::eatWhite()+element()));
  return hcp_ast::findOnlyChildOfType<AstElement>(v).element_;
}

}
}
