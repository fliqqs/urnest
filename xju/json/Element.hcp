// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <iosfwd>
#include <iostream> //impl
#include <string>
#include <xju/Exception.hh>
#include <memory>
#include <map>
#include <xju/Utf8String.hh>

namespace xju
{
namespace json
{

// see corresponding header file for element subclasses:
//
//   Bool
//   String
//   Number
//   Array
//   Map
//   Null
//
class Element
{
public:
  virtual ~Element() noexcept {}

  // Get the value of this element assuming it is a JSON true or false.
  bool asBool() const throw(
    // this element is not a JSON true or false.
    xju::Exception)
  {
    try{
      return asBool_();
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get " << str() << " as a bool";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // Get the value of this element assuming it is a JSON number
  // representable as a double.
  double asDouble() const throw(
    // this element is not a number or
    // it is too big or small to represent as a double
    xju::Exception)
  {
    try{
      return asDouble_();
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get " << str() << " as a double";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  int asInt() const throw(
    // this element is not a number or
    // its value is not a whole number or
    // its value is too big or small to represent as an int
    xju::Exception)
  {
    try{
      return asInt_();
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get " << str() << " as an int";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  xju::Utf8String asString() const throw(
    // this element is not a string
    xju::Exception)
  {
    try{
      return asString_();
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get " << str() << " as a string";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // Get the value of this element assuming it is a JSON array.
  std::vector<std::shared_ptr<Element const> > const& asArray() const throw(
    // this element is not an array
    xju::Exception)
  {
    try{
      return asArray_();
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get " << str() << " as an array";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // Check whether this element has a member of
  // specified name assuming this element is a JSON object.
  bool hasMember(xju::Utf8String const& name) const throw(
    // this element is not a JSON object
    xju::Exception)
  {
    try{
      auto const o{asObject()};
      return o.find(name)!=o.end();
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "check whether " << str() << " has a " << xju::format::quote(name)
        << " member";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  
  // Get value of this element's member with specified name assuming
  // this element is a JSON object.
  Element const& getMember(xju::Utf8String const& name) const throw(
    // this element is not an object or
    // this object has no such element
    xju::Exception)
  {
    try{
      auto const o{asObject()};
      auto const i{o.find(name)};
      if (i==o.end()){
        std::ostringstream s;
        s << str() << " has no " << xju::format::quote(name) << " member";
        throw xju::Exception(s.str(),XJU_TRACED);
      }
      return *(*i).second;
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get value of " << str() << "'s " << xju::format::quote(name)
        << " member";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // Get this element assuming it is a JSON object.
  std::map<xju::Utf8String,std::shared_ptr<Element const> > const&
  asObject() const throw(
    xju::Exception)
  {
    try{
      return asObject_();
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get " << str() << " as an object";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // human readable description of element, no new-lines
  virtual std::string str() const noexcept = 0;

  // true iff (*this) < y
  // - note ordering is arbitrary and surprising especially in the case
  //   of Number elements since is comparison is by literal string value
  //
  virtual bool lessThan(Element const& y) const noexcept = 0;
  
protected:
  // see asBool() above
  // - note overridden by subclass(es)
  virtual bool asBool_() const throw(
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not true or false";
    throw xju::Exception(s.str(),XJU_TRACED);
  }
  
  // see asDouble() above
  // - note overridden by subclass(es)
  virtual double asDouble_() const throw(
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not a number";
    throw xju::Exception(s.str(),XJU_TRACED);
  }

  // see asInt() above
  // - note overridden by subclass(es)
  virtual int asInt_() const throw(
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not a number";
    throw xju::Exception(s.str(),XJU_TRACED);
  }

  // see asString() above
  // - note overridden by subclass(es)
  virtual xju::Utf8String asString_() const throw(
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not a string";
    throw xju::Exception(s.str(),XJU_TRACED);
  }

  // see asArray() above
  // - note overridden by subclass(es)
  virtual std::vector<std::shared_ptr<Element const> > const& asArray_() const
    throw(
      xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not an Array";
    throw xju::Exception(s.str(),XJU_TRACED);
  }

  // see asObject() above
  // - note overridden by subclass(es)
  virtual std::map<xju::Utf8String,std::shared_ptr<Element const> > const&
  asObject_() const throw(
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not an Object";
    throw xju::Exception(s.str(),XJU_TRACED);
  }
  
};

std::ostream& operator<<(std::ostream& s, Element const& x) {
  return s << x.str();
}

bool operator<(Element const& x, Element const& y) noexcept {
  return x.lessThan(y);
}

bool operator>(Element const& x, Element const& y) noexcept {
  return y.lessThan(x);
}

bool operator!=(Element const& x, Element const& y) noexcept {
  return y<x || x<y;
}

bool operator==(Element const& x, Element const& y) noexcept {
  return !(y!=x);
}

bool operator<=(Element const& x, Element const& y) noexcept {
  return !(y<x);
}

bool operator>=(Element const& x, Element const& y) noexcept {
  return !(y>x);
}

}
}
