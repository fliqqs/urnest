// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <iostreamfwd>
#include <iostream> //impl
#include <string>

namespace xju
{
namespace json
{

// see corresponding header file for element subclasses:
//
//   Bool
//   String
//   Double*
//   UInt*
//   Int*
//   Array
//   Map
//   Null
//
// * JSON numbers are stored as appropriate as a Double, UInt or Int
//   to allow maximum range and precision
//
class Element
{
public:
  virtual ~Element() noexcept {}

  template<class ElementSubClass>
  ElementSubClass const& asA() const throw(
    // *this is not a T
    xju::Exception);
  
  template<class ElementSubClass>
  bool isA() const noexcept;

  
  // human readable description of element, no new-lines
  virtual std::string str() const noexcept = 0;

  // true iff (*this) < y
  // note ordering of different-type elements is arbitrary; ordering
  // of same-type elements is the natural ordering of their values
  //
  virtual bool lessThan(Element const& y) const noexcept = 0;
  
};

std::ostream& operator<<(std::ostream& s, Element const& x) {
  return s << x.str();
}

bool operator<(Element const& x, Element const& y) noexcept {
  return x.lessThan(y);
}

}
}
