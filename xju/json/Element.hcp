// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <iostreamfwd>
#include <iostream> //impl
#include <string>

namespace xju
{
namespace json
{

// see corresponding header file for element subclasses:
//
//   Bool
//   String
//   Number
//   Array
//   Map
//   Null
//
class Element
{
public:
  virtual ~Element() noexcept {}

  // Get the value of this element assuming it is a Bool (JSON true or false).
  virtual bool asBool() const throw(
    // this element is not a Bool.
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not a Bool";
    throw xju::Exception(s.str(),XJU_TRACED);
  }
  
  // Get the value of this element assuming it is a JSON Number
  // representable as a double.
  virtual double asDouble() const throw(
    // this element is not a Number or
    // it is too big or small to represent as a double
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not a Number";
    throw xju::Exception(s.str(),XJU_TRACED);
  }

  std::intmax_t asInt() const throw(
    // this element is not a Number or
    // its value is not a whole number or
    // its value is too big or small to represent as a std::intmax_t
    xju::Exception)
  {
    std::ostringstream s;
    s << str() << " is not a Number";
    throw xju::Exception(s.str(),XJU_TRACED);
  }

  
  // human readable description of element, no new-lines
  virtual std::string str() const noexcept = 0;

  // true iff (*this) < y
  // - note ordering is arbitrary and surprising especially in the case
  //   of Number elements since is comparison is by literal string value
  //
  virtual bool lessThan(Element const& y) const noexcept = 0;
  
};

std::ostream& operator<<(std::ostream& s, Element const& x) {
  return s << x.str();
}

bool operator<(Element const& x, Element const& y) noexcept {
  return x.lessThan(y);
}

}
}
