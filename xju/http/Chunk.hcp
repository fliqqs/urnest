// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/Tagged.hh>
#include <string>
#include <utility>
#include <vector>
#include <xju/format.hh> //impl
#include <xju/http/encodeQuotedStringValue.hh> //impl

namespace xju
{
namespace http
{

class Chunk
{
public:
  class ExtNameTag{};
  class ExtValueTag{};

  typedef xju::Tagged<std::string, ExtNameTag> ExtName;
  typedef std::pair<std::string,bool/*quoted*/> ExtValue;
  
  // note quoted ExtValue is not encoded
  typedef std::pair<ExtName,ExtValue> Extension;
  typedef std::vector<Extension> Extensions;

  //pre: all extensions are valid, i.e.:
  // - name is a HTTP token
  // - value is a HTTP token unless quoted
  Chunk(std::vector<uint8_t> data, Extensions ext) noexcept:
      data_(std::move(data)),
      ext_(std::move(ext))
  {
  }
  std::vector<uint8_t> data_;
  Extensions ext_;
  
  friend bool operator<(Chunk const& a, Chunk const& b) noexcept;
};

std::ostream& operator<<(std::ostream& s, Chunk::ExtValue const& x)
{
  if (x.second){
    return s << xju::format::quote(encodeQuotedStringValue(x.first));
  }
  return s << x.first;
}

}
}
