// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <vector>
#include <cinttypes>
#include <iostream>
#include <unistd.h>
#include <xju/Exception.hh>
#include <new>
#include <sstream> //impl
namespace xju
{
namespace http
{

// note s must only throw std::bad_alloc or xju::Exception
std::vector<uint8_t> copyUnboundedBody(std::istream& s,size_t const maxSize)
  throw(
    //read failed or too big
    xju::Exception,
    std::bad_alloc)
{
  try{
    std::vector<uint8_t> result;
    for(size_t i=0; i!=maxSize; ++i)
    {
      auto const c(s.get());
      if (s.eof()){
        return result;
      }
      if (s.fail()){
        std::ostringstream s;
        s << "read of next byte failed having read " << i << " bytes";
        throw xju::Exception(s.str(),XJU_TRACED);
      }
      result.push_back(c & 0xff);
    }
    auto const c(s.get());
    if (s.eof()){
      return result;
    }
    std::ostringstream s;
    s << "read " << maxSize << " bytes and not yet at end of file";
    throw xju::Exception(s.str(),XJU_TRACED);
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "read HTTP unbounded body of max size " << maxSize
      << " from specified istream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}


