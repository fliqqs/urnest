// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <vector>
#include <cinttypes>
#include <iostream>
#include <unistd.h>
#include <xju/Exception.hh>
#include <sstream> //impl

namespace xju
{
namespace http
{

// note s must only throw std::bad_alloc or xju::Exception
std::vector<uint8_t> copyBody(std::istream& s, size_t const size) throw(
  // read failed
  xju::Exception,
  std::bad_alloc)
{
  try{
    std::vector<uint8_t> result;
    result.resize(size);
    for(size_t i=0; i!=size; ++i)
    {
      auto const c(s.get());
      if (s.fail()){
        std::ostringstream s;
        s << "read of next byte failed having read " << i << " bytes";
        throw xju::Exception(s.str(),XJU_TRACED);
      }
      result[i]=c & 0xff;
    }
    return result;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "copy HTTP body of size " << size;
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}
  
}
}
