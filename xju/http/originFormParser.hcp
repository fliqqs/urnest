// Copyright (c) 2019 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <hcp/parser.hh>
#include <xju/uri/parseURI.hh> //impl
#include <xju/uri/Path.hh>
#include <xju/uri/Query.hh>
#include <hcp/ast.hh>
#include <xju/uri/pctDecode.hh> //impl
#include <xju/uri/segmentChars.hh> //impl

namespace xju
{
namespace http
{

class OriginFormItem : public hcp_ast::Item
  {
  public:
    OriginFormItem(xju::uri::Path path,
                   xju::uri::Query query,
                   hcp_ast::I begin,
                   hcp_ast::I end) noexcept:
        hcp_ast::Item(begin,end),
        path_(std::move(path)),
        query_(std::move(query))
    {
    }
    xju::uri::Path path_;
    xju::uri::Query query_;
  };
}
}

namespace hcp_parser
{
template<>
hcp_parser::ParseResult hcp_parser::NamedParser<xju::http::OriginFormItem>::parse_(
  hcp_ast::I const at, 
  hcp_parser::Options const& options) noexcept
{
  auto const r{x_->parse(at,options)};
  if (!r.failed()){
    auto const segments{hcp_ast::findChildrenOfType<xju::uri::SegmentItem>(
        hcp_ast::Item((*r).first))};
    std::vector<xju::uri::Segment> path({xju::uri::Segment("")});
    std::transform(segments.begin(),segments.end(),
                   std::back_inserter(path),
                   [](decltype(*segments.begin()) const& x){
                     return xju::uri::Segment(
                       xju::uri::pctDecode(xju::uri::segmentChars(),
                                           hcp_ast::reconstruct(x.get())));
                   });
    auto query(xju::uri::getQuery((*r).first));
    return hcp_parser::ParseResult(
      hcp_parser::PV(
        {hcp_ast::IR(new xju::http::OriginFormItem(
                       std::move(path),
                       std::move(query),
                       at,
                       (*r).second))},
        (*r).second));
  }
  return r;
}

}

namespace xju
{
namespace http
{

// return RFC7230 (HTTP) origin-form Request Target parser
std::shared_ptr<hcp_parser::NamedParser<OriginFormItem> > originFormParser()
  noexcept
{
  static std::shared_ptr<hcp_parser::NamedParser<OriginFormItem> > result(
    new hcp_parser::NamedParser<OriginFormItem>(
      "RFC7230 (HTTP) origin-form Request Target",
      hcp_parser::atLeastOne(
        hcp_parser::parseLiteral("/")+xju::uri::segment())+
      (
        (hcp_parser::parseLiteral("?")+xju::uri::query())|
        !hcp_parser::parseLiteral("?")))
    );
  return result;
}

}
}
