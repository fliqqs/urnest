// Copyright (c) 2019 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/Tagged.hh>
#include <string>
#include <xju/path.hh>
#include <xju/Optional.hh>
#include <xju/uri/Path.hh> //impl
#include <xju/format.hh> //impl

namespace xju
{
namespace http
{

namespace
{
std::string encode(xju::path::AbsFile const& x) noexcept
{
  // convert x to xju::uri::Path so it gets correctly encoded
  xju::uri::Path p({xju::uri::Segment()}); // means absolute see xju::uri::Path
  std::transform(x.first.begin(),x.first.end(),
                 std::back_inserter(p),
                 [](xju::path::DirName const& y){
                   return xju::uri::Segment(y.value());
                 });
  p.push-back(xju::uri::Segment(x.second.value()));
  return xju::format::join(p.begin(),p.end(),std::string("/"));
}

}

class RequestTarget{
public:
  // origin-form
  RequestTarget(xju::path::AbsFile const& path) noexcept;

  // absolute-form
  RequestTarget(xju::uri::Authority const& authority,
                xju::path::AbsFile const& path) noexcept;

  // authority-form
  RequestTarget(xju::uri::Authority const& authority) noexcept;

  // asterisk-form
  RequestTarget() noexcept; // "*"

  xju::Optional<xju::uri::Authority> authority_;
  xju::Optional<xju::path::AbsFile> path_;

  friend bool operator<(RequestTarget const& a, RequestTarget const& b) noexcept;
  
  friend std::ostream& operator<<(std::ostream& s, RequestTarget const& x)
  {
    if (authority_.valid() && path_.valid()){
      return s << "http://" << authority_ << encode(path_);
    }
    if (authority_.valid()){
      return s << authority_;
    }
    if (path_.valid()){
      return s << encode(path_);
    }
    return s << "*";
  }
};

}
}
