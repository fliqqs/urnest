// Copyright (c) 2019 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/Tagged.hh>
#include <string>
#include <xju/path.hh>
#include <xju/Optional.hh>
#include <xju/uri/Path.hh> //impl
#include <xju/format.hh> //impl
#include <xju/uri/Authority.hh>
#include <xju/uri/Query.hh>
#include <xju/uri/Scheme.hh>

namespace xju
{
namespace http
{

class RequestTarget{
public:
  // origin-form
  RequestTarget(xju::path::AbsFile path,
                xju::uri::Query query) noexcept:
      path_(std::move(path)),
      query_(std::move(query))
  {
  }
  // absolute-form
  RequestTarget(xju::uri::Scheme scheme,
                xju::uri::Authority authority,
                xju::path::AbsFile path,
                xju::uri::Query query) noexcept:
      scheme_(std::move(scheme)),
      authority_(std::move(authority)),
      path_(std::move(path)),
      query_(std::move(query))
  {
  }

  // authority-form
  explicit RequestTarget(xju::uri::Authority authority) noexcept:
      authority_(std::move(authority))
  {
  }

  // asterisk-form
  RequestTarget() noexcept
  {
  }

  xju::Optional<xju::uri::Scheme> scheme_;
  xju::Optional<xju::uri::Authority> authority_;
  xju::Optional<xju::path::AbsFile> path_;
  xju::Optional<xju::uri::Query> query_; //only valid if path_.valid()
  
  friend bool operator<(RequestTarget const& a,
                        RequestTarget const& b) noexcept;
  
  friend std::ostream& operator<<(std::ostream& s, RequestTarget const& x)
  {
    if (x.scheme_.valid()){
      xju::assert_equal(x.authority_.valid(),true);
      xju::assert_equal(x.path_.valid(),true);
      s << x.scheme_.value() << "//" << x.authority_.value()
        << RequestTarget::encode(x.path_.value());
      if (x.query_.valid()){
        s << "?" << x.query_.value();
      }
      return s;
    }
    if (x.authority_.valid()){
      return s << x.authority_.value();
    }
    if (x.path_.valid()){
      s << RequestTarget::encode(x.path_.value());
      if (x.query_.valid()){
        s << "?" << x.query_.value();
      }
      return s;
    }
    return s << "*";
  }
private:
  static std::string encode(xju::path::AbsFile const& x) noexcept
  {
    // convert x to xju::uri::Path so it gets correctly encoded
    xju::uri::Path p({xju::uri::Segment("")}); // means absolute see xju::uri::Path
    std::transform(x.first.begin(),x.first.end(),
                   std::back_inserter(p),
                   [](xju::path::DirName const& y){
                     return xju::uri::Segment(y.value());
                   });
    p.push_back(xju::uri::Segment(x.second.value()));
    return xju::format::join(p.begin(),p.end(),std::string("/"));
  }

};

}
}
