// Copyright (c) 2019 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <string>
#include <xju/Optional.hh>
#include <xju/uri/Path.hh>
#include <xju/format.hh> //impl
#include <xju/uri/Authority.hh>
#include <xju/uri/Query.hh>
#include <xju/uri/Scheme.hh>
#include <iostream>
#include <xju/uri/URI.hh>
#include <xju/uri/Fragment.hh>

namespace xju
{
namespace http
{

class RequestTarget{
public:
  // origin-form
  // note path is absolute, i.e. always commences with an empty segment
  // pre: path.size() && path.front.size()==0
  RequestTarget(xju::uri::Path path,
                xju::uri::Query query) noexcept:
      path_(std::move(path)),
      query_(std::move(query))
  {
  }
  // absolute-form
  RequestTarget(xju::uri::Scheme scheme,
                xju::Optional<xju::uri::Authority> authority,
                xju::uri::Path path,
                xju::uri::Query query) noexcept:
      scheme_(std::move(scheme)),
      authority_(std::move(authority)),
      path_(std::move(path)),
      query_(std::move(query))
  {
  }

  // authority-form
  explicit RequestTarget(xju::uri::Authority authority) noexcept:
      authority_(std::move(authority))
  {
  }

  // asterisk-form
  RequestTarget() noexcept
  {
  }

  xju::Optional<xju::uri::Scheme> scheme_;
  xju::Optional<xju::uri::Authority> authority_;
  xju::Optional<xju::uri::Path> path_;
  xju::Optional<xju::uri::Query> query_;
  
  friend bool operator<(RequestTarget const& a,
                        RequestTarget const& b) noexcept;
  
  friend std::ostream& operator<<(std::ostream& s, RequestTarget const& x)
  {
    if (x.scheme_.valid()){
      return s << xju::uri::URI(x.scheme_.value(),
                                x.authority_,
                                x.path_.value(),
                                x.query_.value(),
                                xju::uri::Fragment(""));
    }
    if (x.authority_.valid()){
      return s << x.authority_.value();
    }
    if (x.path_.valid()){
      s << xju::format::join(x.path_.value().begin(),
                             x.path_.value().end(),
                             std::string("/"));
      if (x.query_.valid() && x.query_.value()._.size()){
        s << "?" << x.query_.value();
      }
      return s;
    }
    return s << "*";
  }
};

}
}
