// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <cinttypes> //impl
#include <sstream> //impl
#include <xju/format.hh> //impl
#include <xju/Exception.hh> //impl
#include <vector>
#include <cinttypes>
#include <utility>
#include <iterator>
#include <cctype> //impl

namespace xju
{
namespace base64 
{

namespace{
  // value is in result low 6 bits
  uint8_t valueOf(char x)
    // xju::Exception - x not valid base64 char
  {
    if (x>='A'&&x<='Z'){
      return (x-'A');
    }
    else if (x>='a' && x <='z'){
      return 26+(x-'a');
    }
    else if (x>='0' && x<='9'){
      return 52+(x-'0');
    }
    else if (x=='+'){
      return 62;
    }
    else if (x!='/'){
      std::ostringstream s;
      s << xju::format::quote("'",xju::format::cEscapeChar(x))
        << " is not a valid base64 char A-Za-z0-9+/";
      throw xju::Exception(s.str(),XJU_TRACED);
    }
    return 63;
  }
  // accumulate 6-bit value of c into existingBits
  // i.e. into lowest existingBits.second bits of existingBits.first
  std::pair<uint16_t,int> accumulate(
    std::pair<uint16_t,int> const& existingBits,
    char const c)
    // xju::Exception - c is not valid (not part of alphabet)
  {
    return std::make_pair(
      (existingBits.first<<6)+valueOf(c),existingBits.second+6);
  }
  // consume available byte if any from existingBits
  // i.e. remove top 8 bits of existingBits.first if it contains
  // at least 8 bits (i.e. if existingBits.second>=8
  // return remaining bits
  std::pair<uint16_t,int> consume(
    std::pair<uint16_t,int> const& existingBits,
    std::back_insert_iterator<std::vector<uint8_t> > to)
  {
    if (existingBits.second>=8){
      int const extraBits(existingBits.second-8);
      uint16_t const r(existingBits.first>>extraBits);
      *to++=r;
      return std::make_pair(existingBits.first-(r<<extraBits),extraBits);
    }
    return existingBits;
  }
  
  bool isSpace(char x) noexcept
  {
    return std::isspace(x);
  }
  bool isPad(char x) noexcept
  {
    return x=='=';
  }
}

// decode string begin:end assuming it is rfc4648-base64 encoded
// - note tolerates embedded whitespace anywhere in string
//   except within or after trailing padding
std::vector<uint8_t> decode(std::string::const_iterator const begin,
                            std::string::const_iterator const end)
// xju::Exception - base64 input string is invalid
{
  std::vector<uint8_t> result;
  std::pair<uint16_t,int> accumulator(0,0);
  auto i(begin);
  size_t offset(0);
  size_t nchars(0);
  try{
    while(i!=end){
      auto const c(*i);
      if (isPad(c)){
        break;
      }
      if (!isSpace(c)){
        accumulator=accumulate(accumulator,c);
        ++nchars;
        accumulator=consume(accumulator,std::back_inserter(result));
      }
      ++i;++offset;
    }
    auto const remainingPadding((4-(nchars%4))%4);
    int p(1);
    try{
      for(; p<=remainingPadding; ++p){
        if (i==end){
          throw xju::Exception("end of base64 string",XJU_TRACED);
        }
        auto const c(*i);
        if (!isPad(c)){
          std::ostringstream s;
          s << "got non-padding character "
            << xju::format::quote("'",xju::format::cEscapeChar(c));
          throw xju::Exception(s.str(),XJU_TRACED);
        }
        ++i;
        ++offset;
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "read padding character #" << p << " of " << remainingPadding;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
    if (i!=end){
      std::ostringstream s;
      s << (end-i) << " extra characters after base64 padding";
      throw xju::Exception(s.str(),XJU_TRACED);
    }
    return result;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "decode at offset " << offset;
    e.addContext(s.str(),XJU_TRACED);
    e.addContext("decode rfc4648-base64-encoded string",XJU_TRACED);
    throw;
  }
}

std::vector<uint8_t> decode(std::string const& x)
// xju::Exception - base64 input string is invalid
{
  return decode(x.begin(),x.end());
}

}
}
