// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/IBuf.hh>
#include <unistd.h>
#include <algorithm> //impl
#include <utility>
#include <vector>
#include <limits>

namespace xju
{

class MemIBuf : public IBuf
{
public:
  // provide data in blocks of size inc
  // - last block might be smaller
  explicit MemIBuf(std::vector<uint8_t> data,
                   size_t inc=std::numeric_limits<size_t>::max()) noexcept:
      data_(std::move(data)),
      rem_(data_.size()),
      inc_(inc)
  {
  }
  template<class InputIterator>
  MemIBuf(InputIterator begin, InputIterator end,
          size_t inc=std::numeric_limits<size_t>::max()):
      data_(begin,end),
      rem_(data_.size()),
      inc_(inc)
  {
  }
  // IBuf::
  // post: result.second-result.first<=inc
  std::pair<uint8_t const*,uint8_t const*> underflow() override
  {
    auto const inc(std::min(inc_,(size_t)(end()-mark())));
    auto const result(std::make_pair(mark(),mark()+inc));
    rem_-=inc;
    return result;
  }

private:
  std::vector<uint8_t> const data_;
  size_t const inc_;
  size_t rem_;
  inline uint8_t const* end() const noexcept{ return &data_[data_.size()];}
  inline uint8_t const* mark() const noexcept{ return end()-rem_; }
};

}
