// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/path.hh>
#include <set>
#include <xju/dirent.hh>
#include <sys/types.h> //impl
#include <memory> //impl

namespace xju
{
namespace file
{
namespace {
class D
{
public:
  void operator()(DIR* x){
    xju::syscall(xju::closedir,XJU_TRACED)(x);
  }
};

}

// directory entries excluding "." and ".."
std::set<xju::path::AbsFile> ls(xju::path::AbsolutePath const& directory)
// xju::SysCallFailed
{
  try{
    std::set<xju::path::AbsFile> result;
    auto const name(xju::path::str(directory));
    std::unique_ptr<DIR,D> d(
      xju::syscall(xju::opendir,XJU_TRACED,true,(DIR*)0)(name.c_str()));
    for(auto x=xju::readdir(d.get(),XJU_TRACED);
        x!=0;
        x=xju::readdir(d.get(),XJU_TRACED))
    {
      xju::path::FileName f(x->d_name);
      if (f!=xju::path::FileName(".") && f!=xju::path::FileName("..")){
        result.insert({directory,f});
      }
    }
    return result;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "list directory " << directory << " entries excluding '.' and '..'";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}
