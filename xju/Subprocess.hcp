// Copyright (c) 2015 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
// Create, run and wait for a subprocess to exit, executing a specified
// function in that process, capturing the subprocess exit status.
//
// See doCmd.hcp for example use
//
#include "xju/Exception.hh"
#include "xju/unistd.hh"
#include "xju/signal.hh" //impl
#include "xju/wait.hh"
#include <memory>
#include <sys/types.h>
#include "xju/NonCopyable.hh"

namespace xju
{

class Subprocess : NonCopyable
{
public:
  // call start() in Subprocess with process id pid_, set exitStatus
  // to exit status of Subprocess, which is result of start() unless
  // Subprocess calls exec, is killed or aborts (see waitpid manpage
  // for interpretation of exitStatus via WIFEXITED, WEXITSTATUS etc)
  // - exitStatus is not valid until destuctor completes
  // - destructor issues kill(9) and waits until Subprocess exits
  // - exitStatus must outlive Subprocess
  // int start() throw()
  template<class F>
  Subprocess(int& exitStatus, F start) /*throw(
    std::bad_alloc,
    xju::Exception)*/:
      exitStatus_(exitStatus),
      stop_(new Stop),
      pid_(xju::syscall(xju::fork,XJU_TRACED)())
  {
    if (!pid_) {
      ::exit(start());
    }
  }
  // as above, but destructor calls stop(pid_) before waiting for
  // Subprocess to terminate
  // 
  // int start() throw()
  // void stop(pid_t pid) throw()
  template<class F1, class F2>
  Subprocess(int& exitStatus, F1 start, F2 stop) /*throw(
    std::bad_alloc,
    xju::Exception)*/:
      exitStatus_(exitStatus),
      stop_(new Stop2<F2>(stop)),
      pid_(xju::syscall(xju::fork,XJU_TRACED)())
  {
    if (!pid_) {
      ::exit(start());
    }
  }
  void kill(int signal) /*throw(
    xju::Exception)*/
  {
    xju::syscall(xju::kill,XJU_TRACED)(pid_,signal);
  }

  ~Subprocess() throw()
  {
    (*stop_)(pid_);
    xju::syscall(xju::waitpid,XJU_TRACED)(pid_,&exitStatus_,0);
  }
  
private:
  int& exitStatus_;

  class Stop
  {
  public:
    virtual ~Stop() noexcept {}
    
    virtual void operator()(pid_t pid) noexcept
    {
      xju::syscall(xju::kill,XJU_TRACED)(pid, 9);
    }
  };
  

  std::unique_ptr<Stop> stop_;
  pid_t const pid_;

  template<class F>
  class Stop2: public Stop
  {
  public:
    Stop2(F stop) noexcept:
      stop_(stop)
    {
    }
    virtual void operator()(pid_t pid) noexcept
    {
      stop_(pid);
    }
    F stop_;
  };
};

  
}
