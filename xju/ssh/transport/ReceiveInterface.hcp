// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/Message.hh>
#include <unistd.h>

namespace xju
{
namespace ssh
{
namespace transport
{
class ReceiveInterface
{
public:
  virtual ~ReceiveInterface() noexcept{}

  // Receive message.
  //
  // As well as non-transport i.e. non rfc4253
  // messages i.e. non xju::ssh::transport::MSG messages, result could
  // also be xju::ssh::transport::MSG:: IGNORE, UNIMPLEMENTED, DEBUG
  // SERVICE_REQUEST, SERVICE_ACCEPT. All other transport messages are
  // handled internally (except see PeerDisconnect below) and never returned.
  //
  // Note any exception is "fatal", receiveMessage may not be called
  // again after exception.
  //
  // post: result.size()>0
  virtual Message receiveMessage(size_t maxSize) = 0;
    // PeerDisconnect - peer sent DISCONNECT
  
};

}
}
}
