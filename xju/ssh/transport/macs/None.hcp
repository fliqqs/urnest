// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/PacketAuthenticationAlgorithm.hh>

namespace xju
{
namespace ssh
{
namespace transport
{
namespace macs
{

class None: public PacketAuthenticationAlgorithm
{
public:
  None() noexcept:
    PacketAuthenticationAlgorithm(BitCount(0))
  {
  }
  virtual std::unique_ptr<xju::crypt::MacVerifier> macVerifier(
    xju::crypt::MacKey key) override
  {
    return std::unique_ptr<xju::crypt::MacVerifier>(new Verifier);
  }

  virtual std::unique_ptr<xju::crypt::MacCalculator> macCalculator(
    xju::crypt::MacKey key) override
  {
    return std::unique_ptr<xju::crypt::MacCalculator>(new Calculator);
  }

private:
  class Verifier: public xju::crypt::MacVerifier
  {
  public:
    virtual size_t macSize() const noexcept override { return 0; }
    virtual void verifyMac(xju::crypt::Mac const& mac,
                           std::vector<uint8_t> const& message) const override
    {
    }
  };
  class Calculator: public xju::crypt::MacCalculator
  {
  public:
    virtual size_t macSize() const noexcept override { return 0; }
    virtual xju::crypt::Mac calculateMac(
      std::vector<uint8_t> const& message) const override
    {
      return xju::crypt::Mac({});
    }
  };
  
};

}
}
}
}


