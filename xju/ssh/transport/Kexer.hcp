// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/I.hh>
#include <xju/ssh/transport/O.hh>
#include <xju/ssh/transport/Ident.hh>
#include <utility>
#include <string>
#include <xju/ssh/transport/HostKeyAlgorithm.hh>
#include <vector>
#include <xju/ssh/transport/K.hh>
#include <xju/ssh/transport/H.hh>

namespace xju
{
namespace ssh
{
namespace transport
{

class Kexer
{
public:
  virtual ~Kexer() noexcept
  {
  }
  virtual std::pair<K,H> exchangeKeys(
    I::RekeyLock& i,
    O::RekeyLock& o,
    Ident const& ourIdent,
    std::pair<std::string,Ident> const& peerPreambleAndIdent,
    messages::KexInit const& ourKexInit,
    messages::KexInit const& peerKexInit,
    HostKeyAlgorithm& hostKeyAlgorithm,
    bool ignoreFirstMessageReceived) = 0;

  virtual bool requiresEncryptionCapableHostKey() const noexcept = 0;
  virtual bool requiresSignatureCapableHostKey() const noexcept = 0;
  
};

}
}
}
