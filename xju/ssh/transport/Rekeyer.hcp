// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/I.hh>
#include <xju/ssh/transport/O.hh>
#include <xju/ssh/transport/Algorithms.hh>
#include <xju/ssh/transport/Ident.hh>
#include <utility>
#include <vector>
#include <string>
#include <xju/Lock.hh> //impl
#include <xju/assert.hh> //impl
#include <memory> //impl
#include <xju/DeadlineReached.hh> //impl
#include <xju/steadyNow.hh> //impl
#include <xju/Mutex.hh>
#include <xju/Condition.hh>
#include <memory>
#include <xju/ssh/transport/SessionId.hh>
#include <sstream> //impl
#include <xju/format.hh> //impl
#include <xju/Exception.hh> //impl
#include <optional> //impl
#include <xju/ssh/transport/makeKexInitRequest.hh> //impl
#include <xju/ssh/transport/chooseKexer.hh> //impl
#include <xju/ssh/transport/chooseHostKeyAlgorithm.hh> //impl
#include <xju/ssh/transport/resizeHash.hh> //impl
#include <xju/ssh/transport/CipherKey.hh> //impl
#include <xju/ssh/transport/CipherIV.hh> //impl
#include <xju/ssh/transport/messages/NewKeys.hh> //impl

namespace xju
{
namespace ssh
{
namespace transport
{

class Rekeyer
{
public:
  // performs initial key exchange
  // pre: i, o, algorithms will outlive this
  Rekeyer(I& i, O& o, Algorithms const& algorithms,
          Ident ourIdent,
          std::pair<std::vector<std::string>,Ident> peerPreambleAndIdent,
          size_t maxAcceptedKexInitSize):
      ourIdent_(std::move(ourIdent)),
      peerPreambleAndIdent_(std::move(peerPreambleAndIdent)),
      maxAcceptedKexInitSize_(maxAcceptedKexInitSize),
      o_(o),
      i_(i),
      algorithms_(algorithms),
      changed_(guard_),
      sessionId_(doInitialKex())
  {
  }
  Ident const ourIdent_;
  std::pair<std::vector<std::string>,Ident> const peerPreambleAndIdent_;
  size_t maxAcceptedKexInitSize_;
  
  // commences rekeying
  void startRekeying()
  {
    xju::Lock l(guard_);
    try{
      xju::assert_equal(!ol_.get(),true);
      ol_=std::unique_ptr<O::RekeyLock>(
        new O::RekeyLock(o_,OurKexInit(makeKexInitRequest(algorithms_))));
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "start rekeying SSH session "
        << sessionId_;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // pre: calling thread has caught I::Rekeying
  void finishRekeying()
  // Message - in transit message received - call again
  {
    xju::Lock l(guard_);
    if (ol_.get()){
      // since this method always runs to completion in the case
      // of peer-initiated rekey, this must be a local-initiated rekey
      // (via startRekeying above) and we cannot have recieved
      // peer KexInit yet
      changed_.signal(l);
      I::RekeyLock il(i_);
      auto ol(std::move(ol_));
      doKex(l,il,*ol,sessionId_);
    }
    else{
      // Not local, so must be peer-initiated and when we receive
      // the peer KexInit we always finish rekey before returning.
      // Note that even though there is a window where a receiver
      // thread can catch a Rekeying but another thread could finish
      // that rekeying before the first thread calls finishRekeying, it
      // won't happen because no other thread will call rekeying (only
      // one receive thread + one transmit thread allowed, and only the
      // receive thread is allowed to call finishRekeying).
      changed_.signal(l);
      I::RekeyLock il(i_);
      O::RekeyLock ol(o_,OurKexInit(makeKexInitRequest(algorithms_)));
      doKex(l,il,ol,sessionId_);
    }
  }
  
  void waitTillRekeyed(std::chrono::steady_clock::time_point const& deadline)
  {
    xju::Lock l(guard_);
    //REVISIT: what if fail during rekeying?
    while(ol_.get())
    {
      if (xju::steadyNow()>deadline){
        throw xju::DeadlineReached(xju::Exception("deadline reached",XJU_TRACED));
      }
      changed_.wait(l,deadline);
    }
  }
  
private:
  I& i_;
  O& o_;
  Algorithms const& algorithms_;
  
  xju::Mutex guard_;
  xju::Condition changed_;
  std::unique_ptr<O::RekeyLock> ol_;

public:
  SessionId const sessionId_;
  
private:
  //REVISIT: make this a free function
  SessionId doKex(xju::Lock const& l,
                  I::RekeyLock& il,
                  O::RekeyLock& ol,
                  std::optional<SessionId> const& sessionId)
  {
    xju::assert_equal(l.holds(guard_),true);
    try{
      ClientKexInit const clientKexInit(algorithms_.chooseClientKexInit(
                                          ol.sent_,
                                          il.peerKexInit_));
      ServerKexInit const serverKexInit(algorithms_.chooseServerKexInit(
                                          ol.sent_,
                                          il.peerKexInit_));
      std::set<HostKeyAlgorithmName> const clientRequestedHostKeyAlgorithmNames(
        clientKexInit.value().serverHostKeyAlgorithmNames_.begin(),
        clientKexInit.value().serverHostKeyAlgorithmNames_.end());
      std::set<HostKeyAlgorithmName> const serverProposedHostKeyAlgorithmNames(
        serverKexInit.value().serverHostKeyAlgorithmNames_.begin(),
        serverKexInit.value().serverHostKeyAlgorithmNames_.end());
      
      auto kexer=chooseKexer(
        clientKexInit.value().kexAlgorithms_,
        serverKexInit.value().kexAlgorithms_,
        clientRequestedHostKeyAlgorithmNames,
        serverProposedHostKeyAlgorithmNames,
        std::map<KexAlgorithmName,std::reference_wrapper<Kexer> >(
          algorithms_.kexers_.begin(),
          algorithms_.kexers_.end()),
        std::map<HostKeyAlgorithmName,std::reference_wrapper<HostKeyAlgorithm> >(
          algorithms_.hostKeyers_.begin(),
          algorithms_.hostKeyers_.end()));
      
      std::pair<K,H> kh(
        kexer.first.get().exchangeKeys(
          il,ol,
          ourIdent_,
          peerPreambleAndIdent_,
          clientKexInit,
          serverKexInit,
          chooseHostKeyAlgorithm(
            clientKexInit.value().serverHostKeyAlgorithmNames_,
            std::set<HostKeyAlgorithmName>(
              serverKexInit.value().serverHostKeyAlgorithmNames_.begin(),
              serverKexInit.value().serverHostKeyAlgorithmNames_.end()),
            kexer.first.get().requiresEncryptionCapableHostKey(),
            kexer.first.get().requiresSignatureCapableHostKey(),
            std::map<HostKeyAlgorithmName,
            std::reference_wrapper<HostKeyAlgorithm> >(
              algorithms_.hostKeyers_.begin(),
              algorithms_.hostKeyers_.end())),
          il.peerKexInit_.value().firstKexPacketFollows_&&!kexer.second));
      
      // rfc4253 7.2.  Output from Key Exchange
      SessionId result(sessionId.has_value()?sessionId.value():
                       SessionId(kh.second.value()));
      auto const& k(kh.first);
      auto const& h(kh.second);
      auto hashFunction([&kexer](std::vector<uint8_t> const& data){
                          return kexer.first.get().hash(data);});

      auto& decryptionCipherAlgorithm(
        algorithms_.chooseDecryptionCipher(ol.sent_,il.peerKexInit_));
      auto& encryptionCipherAlgorithm(
        algorithms_.chooseEncryptionCipher(ol.sent_,il.peerKexInit_));
      auto& macVerifierAlgorithm(algorithms_.chooseMacVerifierAlgorithm(
                                   ol.sent_,
                                   il.peerKexInit_));
      auto& macCalculatorAlgorithm(algorithms_.chooseMacCalculatorAlgorithm(
                                     ol.sent_,
                                     il.peerKexInit_));

      CipherKey decrypterKey(
        resizeHash(
          kexer.first.get().hash(
            algorithms_.decryptionCipherKeyData(k,h,result)),
          decryptionCipherAlgorithm.keySize_,
          k,h,
          hashFunction));

      CipherIV decrypterIV(
        resizeHash(
          hashFunction(algorithms_.decryptionCipherIVData(k,h,result)),
          BitCount(decryptionCipherAlgorithm.ivSize_*8),
          k,h,
          hashFunction));
      
      CipherKey encrypterKey(
        resizeHash(
          hashFunction(algorithms_.encryptionCipherKeyData(k,h,result)),
          encryptionCipherAlgorithm.keySize_,
          k,h,
          hashFunction));
      
      CipherIV encrypterIV(
        resizeHash(
          hashFunction(algorithms_.encryptionCipherIVData(k,h,result)),
          BitCount(encryptionCipherAlgorithm.ivSize_*8),
          k,h,hashFunction));

      xju::crypt::MacKey packetAuthenticatorMacKey(
        resizeHash(
          hashFunction(algorithms_.macVerifierKeyData(k,h,result)),
          macVerifierAlgorithm.keySize_,
          k,h,hashFunction));

      xju::crypt::MacKey macCalculatorKey(
        resizeHash(
          hashFunction(algorithms_.macCalculatorKeyData(k,h,result)),
          macCalculatorAlgorithm.keySize_,
          k,h,hashFunction));
        
      // rfc4253 7.3.  Taking Keys Into Use
      ol.encodeAndSend(messages::NewKeys());
      il.receiveAndDecode<messages::NewKeys>(2048); //REVISIT: how much?
      
      il.setDecrypter(
        decryptionCipherAlgorithm.decrypter(
          std::move(decrypterKey),
          std::move(decrypterIV)));
      
      ol.setEncrypter(
        encryptionCipherAlgorithm.encrypter(
          std::move(encrypterKey),
          std::move(encrypterIV)));
        
      il.setPacketAuthenticator(
        macVerifierAlgorithm.macVerifier(
          std::move(packetAuthenticatorMacKey)));
      
      ol.setMacCalculator(
        macCalculatorAlgorithm.macCalculator(
          std::move(macCalculatorKey)));
      
      return result;
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "do key exchange on SSH session";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  SessionId doInitialKex()
  {
    try{
      O::RekeyLock ol(o_,OurKexInit(makeKexInitRequest(algorithms_)));
      xju::Lock l(guard_);
      try{
        try{
          auto m(i_.receiveMessage(maxAcceptedKexInitSize_));
          std::ostringstream s;
          s << "expected KexInit (type "
            << xju::format::hex((char)MSG::KEXINIT)<< ") message, received " << m;
          throw xju::Exception(s.str(),XJU_TRACED);
        }
        catch(xju::Exception& e){
          std::ostringstream s;
          s << "receive expected KexInit message";
          e.addContext(s.str(),XJU_TRACED);
          throw;
        }
      }
      catch(I::Rekeying const&){
        I::RekeyLock il(i_);
        return doKex(l,il,ol,std::optional<SessionId>());
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "do initial key exchange on SSH session";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
};

}
}
}
