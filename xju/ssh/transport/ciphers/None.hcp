// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/CipherAlgorithm.hh>
#include <xju/ssh/transport/encodePacket.hh> //impl
#include <xju/ssh/transport/decodePacket.hh> //impl
#include <sstream> //impl
#include <xju/Exception.hh> //impl
#include <stdlib.h> //impl

namespace xju
{
namespace ssh
{
namespace transport
{
namespace ciphers
{

namespace
{
class NoneEncrypter : public xju::ssh::transport::Encrypter
{
public:
  Padding encryptPacket(std::vector<uint8_t> const& body,
                         xju::net::ostream& to) override
  {
    try{
      return encodePacket(body,to,8,drand48());
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "write unencrypted SSH transport packet of body size "
        << body.size()
        << "-bytes to stream";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
};
class NoneDecrypter : public xju::ssh::transport::Decrypter
{
public:
  std::pair<Message,Padding> decryptPacket(
    xju::net::istream& from,
    size_t const maxBytes) override
  {
    try{
      auto x(decodePacket(from, maxBytes));
      return {Message(std::move(x.first)),x.second};
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "read unencrypted SSH transport packet from stream";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  
};
}

class None: public xju::ssh::transport::CipherAlgorithm
{
public:
  None() noexcept:
    CipherAlgorithm(BitCount(0U),0U)
  {
  }
  
  virtual std::unique_ptr<xju::ssh::transport::Encrypter> encrypter(
    CipherKey cipherKey,
    CipherIV cipherIV) override
  {
    return std::unique_ptr<xju::ssh::transport::Encrypter>(
      new NoneEncrypter);
  }
  virtual std::unique_ptr<xju::ssh::transport::Decrypter> decrypter(
    CipherKey cipherKey,
    CipherIV cipherIV) override
  {
    return std::unique_ptr<xju::ssh::transport::Decrypter>(
      new NoneDecrypter);
  }
};

}
}
}
}
