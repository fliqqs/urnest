// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/CipherAlgorithm.hh>
#include <utility> //impl
#include <xju/crypt/verifySuccessful.hh> //impl
#include <gcrypt.h>
#include <memory> //impl
#include <sstream> //impl
#include <xju/format.hh> //impl
#include <xju/ssh/transport/encodePacket.hh> //impl
#include <xju/ssh/transport/CipherKey.hh> //impl
#include <xju/ssh/transport/CipherIV.hh> //impl
#include <xju/ssh/transport/Padding.hh> //impl
#include <xju/MemOBuf.hh> //impl
#include <unistd.h> //impl
#include <xju/assert.hh> //impl
#include <vector> //impl
#include <cinttypes> //impl
#include <xju/MemIBuf.hh> //impl
#include <xju/net/istream.hh> //impl
#include <xju/ssh/transport/decodePacket.hh> //impl

namespace xju
{
namespace ssh
{
namespace transport
{
namespace ciphers
{

namespace
{
void delete_cipher(gcry_cipher_handle* x)
{
  gcry_cipher_close(x);
}

typedef std::unique_ptr<gcry_cipher_handle,decltype(&delete_cipher)> Vptr;

Vptr makeCipher(CipherKey const& cipherKey,
                CipherIV const& cipherIV)
{
  try{
    auto gcryMode=GCRY_CIPHER_MODE_CTR;
    gcry_cipher_handle* hd;
    xju::crypt::verifySuccessful(gcry_cipher_open(&hd,
                                                  GCRY_CIPHER_AES256,
                                                  gcryMode, 0),
                                 XJU_TRACED);
    Vptr result(hd,delete_cipher);
    xju::crypt::verifySuccessful(gcry_cipher_setkey(
                                   hd,
                                   cipherKey.value().data(),
                                   cipherKey.value().size()),
                                 XJU_TRACED);
    if (gcryMode==GCRY_CIPHER_MODE_CTR){
      xju::crypt::verifySuccessful(gcry_cipher_setctr(
                                     hd,
                                     cipherIV.value().data(),
                                     cipherIV.value().size()),
                                   XJU_TRACED);
    }
    else{
      xju::crypt::verifySuccessful(gcry_cipher_setiv(
                                     hd,
                                     cipherIV.value().data(),
                                     cipherIV.value().size()),
                                   XJU_TRACED);
    }
    return result;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "create libgcrypt AES256 cipher with key "
      << xju::format::join(cipherKey.value().begin(),
                           cipherKey.value().end(),
                           xju::format::Hex(),
                           " ")
      << " and IV "
      << xju::format::join(cipherIV.value().begin(),
                           cipherIV.value().end(),
                           xju::format::Hex(),
                           " ");
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

Padding encodeToBuf(std::vector<uint8_t> const& body, xju::MemOBuf& b,
                    size_t const blockSize)
{
  xju::net::ostream s(b);
  return encodePacket(body, s, blockSize, drand48());
}

class AES256ctrEncrypter : public xju::ssh::transport::Encrypter
{
public:
  CipherKey const cipherKey_;
  CipherIV const cipherIV_;
  
  AES256ctrEncrypter(
    CipherKey cipherKey,
    CipherIV cipherIV) try:
      cipherKey_(std::move(cipherKey)),
      cipherIV_(std::move(cipherIV)),
      impl_(makeCipher(cipherKey_,cipherIV_))
  {
  }
  catch(xju::Exception& e){
    e.addContext("make AES256ctrEncrypter",XJU_TRACED);
    throw;
  }
  virtual Padding encryptPacket(std::vector<uint8_t> const& body,
                                xju::net::ostream& to) override
  {
    try{
      size_t const blockSize(128/8);

      xju::MemOBuf b(1024U);
      Padding const padding(encodeToBuf(body, b, blockSize));
      size_t const length(b.data().second-b.data().first);
      xju::assert_equal(length%blockSize, 0U);
      try{
        
        // rfc4253 6
        // encrypt in place
        xju::crypt::verifySuccessful(gcry_cipher_encrypt(
                                       impl_.get(),
                                       &(*b.data().first),
                                       length,
                                       &(*b.data().first),
                                       length),
                                     XJU_TRACED);
        to.put(b.data().first, b.data().second);
        return padding;
      }
      catch(xju::Exception& e){
        std::ostringstream s;
        s << "encrypt " << length << "-byte (including "
          << padding.size() << "-byte padding) encoded packet";
        e.addContext(s.str(),XJU_TRACED);
        throw;
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "pad, encode and encrypt " << body.size() << "-byte packet body "
        << "using AES256 encryption";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
private:
  Vptr impl_;
};

class AES256ctrDecrypter : public xju::ssh::transport::Decrypter
{
public:
  CipherKey const cipherKey_;
  CipherIV const cipherIV_;

  AES256ctrDecrypter(
    CipherKey cipherKey,
    CipherIV cipherIV) try:
      cipherKey_(std::move(cipherKey)),
      cipherIV_(std::move(cipherIV)),
      impl_(makeCipher(cipherKey_,cipherIV_))
  {
  }
  catch(xju::Exception& e){
    e.addContext("make AES256ctrDecrypter",XJU_TRACED);
    throw;
  }
  virtual std::pair<Message,Padding> decryptPacket(
    xju::net::istream& from,
    size_t const maxBytes) override
  {
    try{
      // rfc4253 6
      // - encrypted packet is multiple of cipher block size 128 bits for AES
      size_t const blockSize(128/8);
      
      // - decrypt 1st block so we can extract length and
      //   deduce how many blocks
      std::vector<uint8_t> block(blockSize);
      std::vector<uint8_t> decrypted(blockSize);
      try{
        from.getN(blockSize, block.begin());
        xju::crypt::verifySuccessful(
          gcry_cipher_decrypt(
            impl_.get(),
            decrypted.data(), blockSize,
            block.data(), blockSize),
          XJU_TRACED);
      }
      catch(xju::Exception& e){
        std::ostringstream s;
        s << "read and decrypt first "
          << blockSize << "-byte block of AES256-encrypted packet";
        e.addContext(s.str(),XJU_TRACED);
        throw;
      }
      uint32_t packetLength(decrypted[0]);
      packetLength = (packetLength<<8)+decrypted[1];
      packetLength = (packetLength<<8)+decrypted[2];
      packetLength = (packetLength<<8)+decrypted[3];
      // packet length excludes 4-byte length itself
      uint32_t const length(packetLength+4);
      if (length>maxBytes){
        std::ostringstream s;
        s << "deduced size " << length
          << " (which includes 4-byte packet length itself) would exceed "
          << " max allowed " << maxBytes;
        throw xju::Exception(s.str(),XJU_TRACED);
      }
      if (length%blockSize){
        std::ostringstream s;
        s << "decoded packet length "
          << length << " bytes is not a multiple of "
          << blockSize << " (AES256 block size)";
        throw xju::Exception(s.str(),XJU_TRACED);
      }
      uint32_t const totalBlocks(length/blockSize);
      // - decrypt length/cipher-block-size-1 blocks
      for(size_t i=1; i < totalBlocks; ++i){
        try{
          from.getN(blockSize, block.begin());
          decrypted.resize(decrypted.size()+blockSize);
          xju::crypt::verifySuccessful(
            gcry_cipher_decrypt(
              impl_.get(),
              &decrypted[i*blockSize], blockSize,
              block.data(), blockSize),
            XJU_TRACED);
        }
        catch(xju::Exception& e){
          std::ostringstream s;
          s << "read and decrypt " << blockSize << "-byte block "
            << (i+1) << " of "
            << totalBlocks;
          e.addContext(s.str(),XJU_TRACED);
          throw;
        }
      }
      // - then decode packet
      {
        xju::MemIBuf b(std::move(decrypted));
        xju::net::istream s(b);
        auto result(decodePacket(s, maxBytes));
        return {Message(std::move(result.first)),result.second};
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "read and decode ssh packet of max size "
        << maxBytes
        << " bytes (including 4-byte packet length) from AES256 encrypted stream";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
private:
  Vptr impl_;
};

}

class AES256ctr: public xju::ssh::transport::CipherAlgorithm
{
public:
  AES256ctr() noexcept:
    CipherAlgorithm(BitCount(256U),16U)
  {
  }
  // pre: cipherKey.size() == 64
  // pre: cipherIV.size() == 16
  // post: 
  virtual std::unique_ptr<xju::ssh::transport::Encrypter> encrypter(
    CipherKey cipherKey,
    CipherIV cipherIV) override
  {
    return std::unique_ptr<xju::ssh::transport::Encrypter>(
      new AES256ctrEncrypter(std::move(cipherKey),std::move(cipherIV)));
  }
  // pre: cipherKey.size() == 64
  // pre: cipherIV.size() == 16
  virtual std::unique_ptr<xju::ssh::transport::Decrypter> decrypter(
    CipherKey cipherKey,
    CipherIV cipherIV) override
  {
    return std::unique_ptr<xju::ssh::transport::Decrypter>(
      new AES256ctrDecrypter(std::move(cipherKey),std::move(cipherIV)));
  }
};

}
}
}
}
