// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/Algorithms.hh>
#include <vector>
#include <utility>
#include <xju/ssh/transport/HostKeyAlgorithmName.hh>
#include <functional>
#include <xju/ssh/transport/ClientHostKeyAlgorithm.hh>
#include <xju/ssh/transport/messages/KexInit.hh>
#include <xju/Exception.hh> //impl
#include <sstream> //impl
#include <xju/MemOBuf.hh> //impl
#include <xju/net/ostream.hh> //impl

namespace xju
{
namespace ssh
{
namespace transport
{

class ClientAlgorithms : public Algorithms
{
public:
  typedef std::vector<std::pair<
                        HostKeyAlgorithmName,
                        std::reference_wrapper<ClientHostKeyAlgorithm> >
                      > ClientHostKeyAlgorithms;
  
  ClientAlgorithms(
    Algorithms::Kexers kexers,
    ClientAlgorithms::ClientHostKeyAlgorithms hostKeyers,
    Algorithms::CipherAlgorithms ciphers,
    Algorithms::PacketAuthenticationAlgorithms packetAuthenticators):
      Algorithms(std::move(kexers),
                 HostKeyAlgorithms(hostKeyers.begin(),hostKeyers.end()),
                 std::move(ciphers),
                 std::move(packetAuthenticators))
  {
  }
  
  virtual messages::KexInit const& chooseClientKexInit(
    OurKexInit const& ourKexInit,
    PeerKexInit const& peerKexInit) const override
  {
    return ourKexInit.value();
  }
  virtual messages::KexInit const& chooseServerKexInit(
    OurKexInit const& ourKexInit,
    PeerKexInit const& peerKexInit) const override
  {
    return peerKexInit.value();
  }
  virtual CipherAlgorithm& chooseEncryptionCipher(
    OurKexInit const& ourKexInit,
    PeerKexInit const& peerKexInit) const override
  {
    try{
      xju::assert_not_equal(ourKexInit.value().clientOutCipherNames_.size(),0);
      xju::assert_not_equal(ourKexInit.value().serverOutCipherNames_.size(),0);
      if (peerKexInit.value().clientOutCipherNames_.size()==0){
        throw xju::Exception("peer KexInit contains no client-out cipher names",XJU_TRACED);
      }
      if (peerKexInit.value().serverOutCipherNames_.size()==0){
        throw xju::Exception("peer KexInit contains no server-out cipher names",XJU_TRACED);
      }
      return chooseClientEncryptionCipher(ClientKexInit(ourKexInit.value()),
                                          ServerKexInit(peerKexInit.value()));
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "choose client encrypter algorithm";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  virtual CipherAlgorithm& chooseDecryptionCipher(
    OurKexInit const& ourKexInit,
    PeerKexInit const& peerKexInit) const override
  {
    try{
      xju::assert_not_equal(ourKexInit.value().clientOutCipherNames_.size(),0);
      xju::assert_not_equal(ourKexInit.value().serverOutCipherNames_.size(),0);
      if (peerKexInit.value().clientOutCipherNames_.size()==0){
        throw xju::Exception("peer KexInit contains no client-out cipher names",XJU_TRACED);
      }
      if (peerKexInit.value().serverOutCipherNames_.size()==0){
        throw xju::Exception("peer KexInit contains no server-out cipher names",XJU_TRACED);
      }
      return chooseServerEncryptionCipher(ClientKexInit(ourKexInit.value()),
                                          ServerKexInit(peerKexInit.value()));
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "choose client decrypter algorithm";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  virtual PacketAuthenticationAlgorithm& chooseMacCalculatorAlgorithm(
    OurKexInit const& ourKexInit,
    PeerKexInit const& peerKexInit) const override
  {
    try{
      xju::assert_not_equal(ourKexInit.value().clientOutPacketAuthenticatorNames_.size(),0);
      xju::assert_not_equal(ourKexInit.value().serverOutPacketAuthenticatorNames_.size(),0);
      if (peerKexInit.value().clientOutPacketAuthenticatorNames_.size()==0){
        throw xju::Exception("peer KexInit contains no client-out packet authenticator names",XJU_TRACED);
      }
      if (peerKexInit.value().serverOutPacketAuthenticatorNames_.size()==0){
        throw xju::Exception("peer KexInit contains no server-out packet authenticator names",XJU_TRACED);
      }
      return chooseClientMacAlgorithm(ClientKexInit(ourKexInit.value()),
                                      ServerKexInit(peerKexInit.value()));
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "choose client MAC calculator algorithm";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  virtual PacketAuthenticationAlgorithm& chooseMacVerifierAlgorithm(
    OurKexInit const& ourKexInit,
    PeerKexInit const& peerKexInit) const override
  {
    try{
      xju::assert_not_equal(ourKexInit.value().clientOutPacketAuthenticatorNames_.size(),0);
      xju::assert_not_equal(ourKexInit.value().serverOutPacketAuthenticatorNames_.size(),0);
      if (peerKexInit.value().clientOutPacketAuthenticatorNames_.size()==0){
        throw xju::Exception("peer KexInit contains no client-out packet authenticator names",XJU_TRACED);
      }
      if (peerKexInit.value().serverOutPacketAuthenticatorNames_.size()==0){
        throw xju::Exception("peer KexInit contains no server-out packet authenticator names",XJU_TRACED);
      }
      return chooseServerMacAlgorithm(ClientKexInit(ourKexInit.value()),
                                      ServerKexInit(peerKexInit.value()));
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "choose client MAC verifier algorithm";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // rfc4253 Initial IV server to client (before hash)
  virtual std::vector<uint8_t> decryptionCipherIVData(
    K const& k,
    H const& h,
    SessionId const& sessionId) const override
  {
    xju::MemOBuf b(1024);
    {
      xju::net::ostream s(b);
      encode(s,k.value());
      s.put(h.value().begin(),h.value().end());
      s.put8('B');
      s.put(sessionId.value().begin(),sessionId.value().end());
    }
    auto const data(b.data());
    return std::vector<uint8_t>(data.first,data.second);
  }

  // rfc4253 Initial IV client to server (before hash)
  virtual std::vector<uint8_t> encryptionCipherIVData(
    K const& k,
    H const& h,
    SessionId const& sessionId) const override
  {
    xju::MemOBuf b(1024);
    {
      xju::net::ostream s(b);
      encode(s,k.value());
      s.put(h.value().begin(),h.value().end());
      s.put8('A');
      s.put(sessionId.value().begin(),sessionId.value().end());
    }
    auto const data(b.data());
    return std::vector<uint8_t>(data.first,data.second);
  }

  // rfc4253 Encryption key server to client (before hash)
  virtual std::vector<uint8_t> decryptionCipherKeyData(
    K const& k,
    H const& h,
    SessionId const& sessionId) const override
  {
    xju::MemOBuf b(1024);
    {
      xju::net::ostream s(b);
      encode(s,k.value());
      s.put(h.value().begin(),h.value().end());
      s.put8('D');
      s.put(sessionId.value().begin(),sessionId.value().end());
    }
    auto const data(b.data());
    return std::vector<uint8_t>(data.first,data.second);
  }

  // rfc4253 Encryption key client to server (before hash)
  virtual std::vector<uint8_t> encryptionCipherKeyData(
    K const& k,
    H const& h,
    SessionId const& sessionId) const override
  {
    xju::MemOBuf b(1024);
    {
      xju::net::ostream s(b);
      encode(s,k.value());
      s.put(h.value().begin(),h.value().end());
      s.put8('C');
      s.put(sessionId.value().begin(),sessionId.value().end());
    }
    auto const data(b.data());
    return std::vector<uint8_t>(data.first,data.second);
  }
  
  // rfc4253 Integrity key server to client (before hash)
  virtual std::vector<uint8_t> macVerifierKeyData(
    K const& k,
    H const& h,
    SessionId const& sessionId) const override
  {
    xju::MemOBuf b(1024);
    {
      xju::net::ostream s(b);
      encode(s,k.value());
      s.put(h.value().begin(),h.value().end());
      s.put8('F');
      s.put(sessionId.value().begin(),sessionId.value().end());
    }
    auto const data(b.data());
    return std::vector<uint8_t>(data.first,data.second);
  }

  // rfc4253 Integrity key client to server (before hash)
  virtual std::vector<uint8_t> macCalculatorKeyData(
    K const& k,
    H const& h,
    SessionId const& sessionId) const override
  {
    xju::MemOBuf b(1024);
    {
      xju::net::ostream s(b);
      encode(s,k.value());
      s.put(h.value().begin(),h.value().end());
      s.put8('E');
      s.put(sessionId.value().begin(),sessionId.value().end());
    }
    auto const data(b.data());
    return std::vector<uint8_t>(data.first,data.second);
  }
  
};

}
}
}


