// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <vector>
#include <xju/ssh/transport/identParser.hh>
#include <xju/Optional.hh>
#include <string>
#include <xju/net/istream.hh>
#include <xju/net/ostream.hh>
#include <future> //impl
#include <xju/ssh/transport/readIdentificationString.hh> //impl
#include <xju/ssh/transport/writeIdentificationString.hh> //impl
#include <utility> //impl
#include <sstream> //impl
#include <xju/format.hh> //impl
#include <xju/Exception.hh> //impl
#include <xju/ssh/transport/Ident.hh>
#include <utility>

namespace xju
{
namespace ssh
{
namespace transport
{

template<class Future>
void checkWriteOK(Future& f){
  try{
    try{
      f.get();
    }
    catch(xju::Exception& e){
      throw;
    }
    catch(std::exception const& f){
      throw xju::Exception(f.what(),XJU_TRACED);
    }
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "send identification string to peer";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

std::pair<
  std::vector<std::string>, //preamble lines without trailing \r\n
  Ident
  > shakeHands(xju::net::istream& i,
               xju::net::ostream& o,
               Ident const& ourIdent)
{
  try{
    auto w=std::async(std::launch::async,
                      [&ourIdent,&o](){
                        writeIdentificationString(o,ourIdent);
                      });
    try{
      auto const r(readIdentificationString(i));

      try{
        checkWriteOK(w);
      }
      catch(xju::Exception const& e){
        std::ostringstream s;
        s << " although received SSH preeamble "
          << xju::format::join(std::get<0>(r).begin(),
                               std::get<0>(r).end(),
                               [](std::string const& x){
                                 return xju::format::quote(
                                   xju::format::cEscapeString(x));
                               },
                               std::string(", "))
          << " and SSH version "
          << xju::format::cEscapeString(std::get<1>(r).value())
          << " and software version "
          << xju::format::cEscapeString(std::get<2>(r).value())
          << " from peer";
        throw xju::Exception(readableRepr(e)+s.str(),XJU_TRACED);
      }
      return {std::get<0>(r),
              Ident(std::get<1>(r),
                    std::get<2>(r),
                    std::get<3>(r))};
    }
    catch(xju::Exception& e){
      std::string writeFailure;
      try{
        checkWriteOK(w);
      }
      catch(xju::Exception const& ee){
        writeFailure=readableRepr(ee);
      }
      std::ostringstream s;
      s << "receive SSH software identification string from peer";
      e.addContext(s.str(),XJU_TRACED);
      if (writeFailure.size()){
        throw xju::Exception(
          writeFailure + " and " + readableRepr(e),XJU_TRACED);
      }
      throw xju::Exception(
        readableRepr(e)+
        " although successfully sent identification string to peer",XJU_TRACED);
    }
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "send SSH Ident " << ourIdent
      << " to peer and receive its"
      << " preamble, SSH software version and comment strings";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}
}
