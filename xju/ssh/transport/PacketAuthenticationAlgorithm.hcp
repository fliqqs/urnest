// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/crypt/MacVerifier.hh>
#include <xju/crypt/MacCalculator.hh>
#include <memory>
#include <xju/BitCount.hh>
#include <xju/crypt/MacKey.hh>

namespace xju
{
namespace ssh
{
namespace transport
{
class PacketAuthenticationAlgorithm
{
public:
  virtual ~PacketAuthenticationAlgorithm() noexcept {}

  explicit PacketAuthenticationAlgorithm(xju::BitCount keySize) noexcept:
      keySize_(std::move(keySize))
  {
  }
  xju::BitCount const keySize_;

  // pre: key.value().size()*8 >= keySize_
  virtual std::unique_ptr<xju::crypt::MacVerifier> macVerifier(
    xju::crypt::MacKey key) = 0;

  // pre: key.size()*8 >= keySize_
  virtual std::unique_ptr<xju::crypt::MacCalculator> macCalculator(
    xju::crypt::MacKey key) = 0;
  
};

}
}
}


