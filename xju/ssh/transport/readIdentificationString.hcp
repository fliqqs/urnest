// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <tuple>
#include <vector>
#include <xju/ssh/transport/identParser.hh>
#include <string>
#include <xju/net/istream.hh>
#include <hcp/parser.hh> //impl
#include <xju/startsWith.hh> //impl
#include <sstream> //impl
#include <xju/Optional.hh>

namespace xju
{
namespace ssh
{
namespace transport
{
std::tuple<
  std::vector<std::string>, //preamble lines without trailing \r\n
  SSHVersion, //ssh version
  SoftwareVersion, //software version
  xju::Optional<std::string> //comment
  > readIdentificationString(xju::net::istream& s)
// std::bad_alloc
// xju::Exception - e.g. stream read failed
{
  std::vector<std::string> preamble;
  try{
    std::string x;
    for(x=s.readThrough("\r\n",255); //255 from rfc4253
        !xju::startsWith(x,std::string("SSH-"));
        x=s.readThrough("\r\n",255))
      {
        preamble.push_back(std::string(x.begin(),x.end()-2));
      }
      auto const y(hcp_parser::parseString(x.begin(),x.end(),identParser()));
      SSHVersion sshVersion(
        hcp_ast::reconstruct(
          hcp_ast::findOnlyChildOfType<SSHVersionItem>(y)));
      SoftwareVersion softwareVersion(
        hcp_ast::reconstruct(
          hcp_ast::findOnlyChildOfType<SoftwareVersionItem>(y)));
      xju::Optional<std::string> comment;
      {
        auto const c(hcp_ast::findChildrenOfType<IdentCommentItem>(y));
        if (c.size()){
          comment=hcp_ast::reconstruct(c.front());
        }
      }
      return std::make_tuple(preamble,
                             sshVersion,
                             softwareVersion,
                             comment);
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "read SSH identification string from istream having read "
      << preamble.size() << " preamble lines: "
      << xju::format::join(preamble.begin(),
                           preamble.end(),
                           [](auto const& x){
                             return xju::format::quote(
                               xju::format::cEscapeString(x));
                           },
                           ", ");

    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}


}
}
}


