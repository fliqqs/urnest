// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/Kexer.hh>
#include <xju/ssh/transport/messages/KexDHInit.hh> //impl
#include <xju/ssh/transport/messages/KexDHReply.hh> //impl
#include <xju/MemOBuf.hh> //impl
#include <xju/crypt/SigVerifier.hh> //impl
#include <xju/crypt/I.hh> //impl
#include <xju/ssh/transport/ClientHostKeyAlgorithm.hh> //impl
#include <xju/ssh/encode.hh> //impl
#include <xju/ssh/transport/OurKexInit.hh>
#include <xju/ssh/transport/ClientKexInit.hh>
#include <xju/ssh/transport/ServerKexInit.hh>
#include <xju/crypt/countBitsSetIn.hh> //impl
#include <xju/crypt/Hasher.hh>

namespace xju
{
namespace ssh
{
namespace transport
{
namespace kexers
{

namespace
{
uint32_t weakRandomUint16(){
  uint16_t result;
  gcry_randomize(&result,2,GCRY_WEAK_RANDOM);
  return result;
}

}

// RFC4253 8. Diffie-Hellman Key Exchange
class DHGroup14Client : public Kexer
{
public:
  xju::crypt::Hasher* const hasher_; // non null

  explicit DHGroup14Client(xju::crypt::Hasher& hasher) noexcept:
      hasher_(&hasher)
  {
  }
  
  //pre: hostKeyAlgorithm is a ClientHostKeyAlgorithm
  virtual std::pair<K,H> exchangeKeys(
    I::RekeyLock& i,
    O::RekeyLock& o,
    Ident const& ourIdent,
    std::pair<std::vector<std::string>, //preamble lines without trailing \r\n
              Ident> const& peerPreambleAndIdent,
    ClientKexInit const& clientKexInit,
    ServerKexInit const& serverKexInit,
    HostKeyAlgorithm const& hostKeyAlgorithm,
    bool ignoreFirstMessageReceived) override
  {
    try{
      static xju::crypt::I const g(2); //  rfc3526 - generator for a subgroup of GF(p)
      static xju::crypt::I const p({
          0x00,
          0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
          0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
          0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,
          0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
          0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,
          0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
          0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,
          0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
          0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,
          0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
          0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,
          0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
          0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,
          0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
          0x49,0x28,0x66,0x51,0xEC,0xE4,0x5B,0x3D,
          0xC2,0x00,0x7C,0xB8,0xA1,0x63,0xBF,0x05,
          0x98,0xDA,0x48,0x36,0x1C,0x55,0xD3,0x9A,
          0x69,0x16,0x3F,0xA8,0xFD,0x24,0xCF,0x5F,
          0x83,0x65,0x5D,0x23,0xDC,0xA3,0xAD,0x96,
          0x1C,0x62,0xF3,0x56,0x20,0x85,0x52,0xBB,
          0x9E,0xD5,0x29,0x07,0x70,0x96,0x96,0x6D,
          0x67,0x0C,0x35,0x4E,0x4A,0xBC,0x98,0x04,
          0xF1,0x74,0x6C,0x08,0xCA,0x18,0x21,0x7C,
          0x32,0x90,0x5E,0x46,0x2E,0x36,0xCE,0x3B,
          0xE3,0x9E,0x77,0x2C,0x18,0x0E,0x86,0x03,
          0x9B,0x27,0x83,0xA2,0xEC,0x07,0xA2,0x8F,
          0xB5,0xC5,0x5D,0xF0,0x6F,0x4C,0x52,0xC9,
          0xDE,0x2B,0xCB,0xF6,0x95,0x58,0x17,0x18,
          0x39,0x95,0x49,0x7C,0xEA,0x95,0x6A,0xE5,
          0x15,0xD2,0x26,0x18,0x98,0xFA,0x05,0x10,
          0x15,0x72,0x8E,0x5A,0x8A,0xAC,0xAA,0x68,
          0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF});
      
      // Openssl crypto/bn/bn_dh.c says q = (p - 1) /2 and gives a constant.
      // (openssh uses openssl's DH).
      // libssh at time of writing could use libgrypt or openssl libcrypto
      // and the random range used was different depending which; both seemed
      // wrong, so follow openssl/openssh.
      // To get random number x in range 1 < x < q use random y in range
      // 0 <= y < q-2 then add 2.
      static xju::crypt::I const q_minus_2(
        xju::crypt::I({
          0x00,
          0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,
          0x45,0x56,0x55,0x34,0x0A,0xB9,0x47,0x2D,
          0x4C,0x7D,0x02,0x88,0x8A,0xE9,0x13,0x0C,
          0x75,0x4A,0xB5,0x72,0x1C,0xCA,0xA4,0xBE,
          0x4A,0xAC,0x0B,0x8C,0xEF,0x15,0xE5,0xFB,
          0x37,0xA6,0x29,0x64,0xDA,0xE2,0xAE,0xF8,
          0x76,0x03,0xD1,0x47,0xCD,0x93,0xC1,0xD1,
          0x0C,0x07,0x43,0x01,0xF1,0xCF,0x3B,0x96,
          0x17,0x1B,0x67,0x1D,0x19,0x48,0x2F,0x23,
          0x65,0x0C,0x10,0xBE,0x78,0xBA,0x36,0x04,
          0x25,0x5E,0x4C,0x02,0xB3,0x86,0x1A,0xA7,
          0xB8,0x4B,0x4B,0x36,0xCF,0x6A,0x94,0x83,
          0x10,0x42,0xA9,0x5D,0x0E,0x31,0x79,0xAB,
          0xEE,0x51,0xD6,0xCB,0xC1,0xB2,0xAE,0x91,
          0x7E,0x92,0x67,0xAF,0x34,0x8B,0x1F,0xD4,
          0x0E,0x2A,0xE9,0xCD,0xCC,0x6D,0x24,0x1B,
          0x50,0xB1,0xDF,0x82,0xE1,0x00,0x3E,0x5C,
          0xF6,0x72,0x2D,0x9E,0x24,0x94,0x33,0x28,
          0xBE,0x25,0x8F,0xF3,0xD7,0x4F,0x92,0x08,
          0xAD,0x44,0xCF,0xD2,0xF7,0x1C,0x35,0xFD,
          0x7A,0x03,0x5B,0xF6,0x85,0xFF,0xAE,0x5B,
          0xD3,0x1B,0xF6,0xB5,0x7A,0x26,0x21,0x74,
          0x31,0x2F,0x3F,0x63,0xF2,0x42,0xDA,0xBB,
          0xB6,0xA8,0xE1,0x22,0xA7,0xF0,0x9A,0xB6,
          0xF9,0x2F,0x8A,0x1B,0x98,0x15,0x85,0x36,
          0xE6,0x9D,0x21,0x8D,0xF7,0xCA,0x8C,0xD9,
          0xC7,0x1A,0x02,0x6E,0x28,0xA5,0x04,0x3C,
          0x1D,0x89,0xCD,0x91,0x01,0x05,0xDF,0x53,
          0x45,0x33,0xE6,0x3A,0x94,0x81,0x27,0x04,
          0xC0,0x6E,0x0E,0x68,0x62,0x63,0x31,0x45,
          0x10,0xB4,0x61,0x1A,0xE4,0x87,0xED,0x51,
          0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF})-2);
          
      xju::crypt::I x(randl(q_minus_2)+2);
      auto e(xju::crypt::powm(g,x,p)); // e = g^x mod p;

      // openssh will reject e if it has < 4 x 1-bits so redo above until
      // we achieve that REVISIT: where did we see that?
      while(xju::crypt::countBitsSetIn(e.value())<xju::BitCount(4))
      {
        x=randl(q_minus_2)+2;
        e=xju::crypt::powm(g,x,p); // e = g^x mod p;
      }

      // C sends e to S.
      o.encodeAndSend(messages::KexDHInit(e));
      
      // S sends (K_S || f || s) to C
      messages::KexDHReply const r(
        i.receiveAndDecode<messages::KexDHReply>(100000));

      // C verifies that K_S really is the host key for S
      std::unique_ptr<xju::crypt::SigVerifier> sigVerifier(
        dynamic_cast<ClientHostKeyAlgorithm const&>(
          hostKeyAlgorithm).verifyBonafide(
            r.hostKeyAndCertificates_,
            xju::BitCount(r.hostSignature_.size()*8)));

      // REVISIT: check f in range [1, p-1], see rfc4253 8.
      
      // C then computes K = f^x mod p,
      K k(xju::crypt::powm(r.f_,x,p)); // K = f^x mod p

      // H = hash(V_C || V_S || I_C || I_S || K_S || e || f || K)
      xju::MemOBuf b(1024);
      {
        xju::net::ostream s(b);
        xju::ssh::encode(s,ourIdent);
        xju::ssh::encode(s,peerPreambleAndIdent.second);
        // rfc4253 does not make it clear, but I_C and I_S
        // are encoded as strings, i.e. with a preceding length
        {
          xju::MemOBuf b(1024);
          {
            xju::net::ostream s(b);
            xju::ssh::encode(s,clientKexInit.value());
          }
          s.put32(b.data().second-b.data().first)
            .put(b.data().first,b.data().second);
        }
        {
          xju::MemOBuf b(1024);
          {
            xju::net::ostream s(b);
            xju::ssh::encode(s,serverKexInit.value());
          }
          s.put32(b.data().second-b.data().first)
            .put(b.data().first,b.data().second);
        }
        s.put32(r.hostKeyAndCertificates_.size())
          .put(r.hostKeyAndCertificates_.begin(),
               r.hostKeyAndCertificates_.end());
        xju::ssh::encode(s,e);
        xju::ssh::encode(s,r.f_);
        xju::ssh::encode(s,k.value());
      }
      std::vector<uint8_t> data(b.data().first,b.data().second);
      try{
        H const h(hasher_->hash(data));
        try{
          // and verifies the signature s on H.
          sigVerifier->verifySignature(h.value().data(),h.value().size(),
                                       r.hostSignature_);
          return std::pair<K,H>(std::move(k),std::move(h));
        }
        catch(xju::Exception& e){
          std::ostringstream s;
          s << "verify signature on " << hasher_->name() << " hash "
            << "(" << h.value().size() << " bytes)"
            << xju::format::join(h.value().begin(),h.value().end(),xju::format::Hex(""), "");
          e.addContext(s.str(),XJU_TRACED);
          throw;
        }
      }
      catch(xju::Exception& ee){
        auto const pval(p.value());
        auto const gval(g.value());
        auto const eval(e.value());
          
        std::ostringstream s;
        s << "verify signature on hash of V_C || V_S || I_C || I_S || K_S || e || f || K "
          << "(" << data.size() << " bytes) "
          << xju::format::join(data.begin(),data.end(),xju::format::Hex(""), "")
          << " noting our signed p="
          << xju::format::join(pval.begin(),pval.end(),
                               xju::format::Hex(""),"") << ", g="
          << xju::format::join(gval.begin(),gval.end(),
                               xju::format::Hex(""),"") << " and e="
          << xju::format::join(eval.begin(),eval.end(),
                               xju::format::Hex(""),"");
        ee.addContext(s.str(),XJU_TRACED);
        throw;
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "exchange keys with SSH-"
        << peerPreambleAndIdent.second.sshVersion_.value()
        << "-"
        << peerPreambleAndIdent.second.softwareVersion_.value()
        << (peerPreambleAndIdent.second.comment_.valid()?
            " "+peerPreambleAndIdent.second.comment_.value():
            std::string())
        << " via Diffie-Hellman Group14 "
        << hasher_->name() << " exchange";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  virtual bool requiresEncryptionCapableHostKey() const noexcept override
  {
    return false;
  }
  virtual bool requiresSignatureCapableHostKey() const noexcept override
  {
    return true;
  }
  virtual std::vector<uint8_t> hash(std::vector<uint8_t> const& data) const
    override
  {
    return hasher_->hash(data);
  }

};

}
}
}
}
