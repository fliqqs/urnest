// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ssh/transport/Kexer.hh>
#include <xju/ssh/transport/messages/KexDHInit.hh> //impl
#include <xju/ssh/transport/messages/KexDHReply.hh> //impl
#include <xju/MemOBuf.hh> //impl
#include <xju/crypt/SigVerifier.hh> //impl
#include <xju/crypt/I.hh> //impl
#include <xju/ssh/transport/ClientHostKeyAlgorithm.hh> //impl
#include <xju/ssh/encode.hh> //impl
#include <xju/ssh/transport/OurKexInit.hh>
#include <xju/ssh/transport/ClientKexInit.hh>
#include <xju/ssh/transport/ServerKexInit.hh>
#include <xju/crypt/hashers/SHA1.hh> //impl

namespace xju
{
namespace ssh
{
namespace transport
{
namespace kexers
{

namespace
{
uint32_t strongRandomUint8(){
  uint8_t result;
  gcry_randomize(&result,1,GCRY_STRONG_RANDOM);
  return result;
}

}

// RFC4253 8. Diffie-Hellman Key Exchange
class DHGroup1SHA1Client : public Kexer
{
public:
  //pre: hostKeyAlgorithm is a ClientHostKeyAlgorithm
  virtual std::pair<K,H> exchangeKeys(
    I::RekeyLock& i,
    O::RekeyLock& o,
    Ident const& ourIdent,
    std::pair<std::vector<std::string>, //preamble lines without trailing \r\n
              Ident> const& peerPreambleAndIdent,
    ClientKexInit const& clientKexInit,
    ServerKexInit const& serverKexInit,
    HostKeyAlgorithm const& hostKeyAlgorithm,
    bool ignoreFirstMessageReceived) override
  {
    try{
      static int const q = 128; //order of subgroup (from libssh2)
      static int const g = 2; //  rfc2409 - generator for a subgroup of GF(p)
      static xju::crypt::I const p({
          0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
          0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
          0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,
          0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
          0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,
          0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
          0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,
          0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
          0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,
          0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
          0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,
          0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
          0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,
          0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
          0x49,0x28,0x66,0x51,0xEC,0xE6,0x53,0x81,
          0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF});
      xju::crypt::I const x=strongRandomUint8()%(q-2)+2; // 1<x<q
      auto const e(xju::crypt::powm(xju::crypt::I(g),x,p)); // e = g^x mod p;
      
      // C sends e to S.
      o.encodeAndSend(messages::KexDHInit(e));
      
      // S sends (K_S || f || s) to C
      messages::KexDHReply const r(
        i.receiveAndDecode<messages::KexDHReply>(100000));

      // C verifies that K_S really is the host key for S
      std::unique_ptr<xju::crypt::SigVerifier> sigVerifier(
        dynamic_cast<ClientHostKeyAlgorithm const&>(
          hostKeyAlgorithm).verifyBonafide(
            r.hostKeyAndCertificates_,
            xju::BitCount(r.hostSignature_.size()*8)));

      // C then computes K = f^x mod p,
      K k(xju::crypt::powm(r.f_,x,p)); // K = f^x mod p

      // H = hash(V_C || V_S || I_C || I_S || K_S || e || f || K)
      xju::MemOBuf b(1024);
      {
        xju::net::ostream s(b);
        xju::ssh::encode(s,ourIdent);
        xju::ssh::encode(s,peerPreambleAndIdent.second);
        xju::ssh::encode(s,clientKexInit.value());
        xju::ssh::encode(s,serverKexInit.value());
        s.put32(r.hostKeyAndCertificates_.size())
          .put(r.hostKeyAndCertificates_.begin(),
               r.hostKeyAndCertificates_.end());
        xju::ssh::encode(s,e);
        xju::ssh::encode(s,r.f_);
        xju::ssh::encode(s,k.value());
      }
      xju::crypt::hashers::SHA1 sha1;
      H const h(sha1.hash(
                  std::vector<uint8_t>(b.data().first,b.data().second)));

      // and verifies the signature s on H.
      sigVerifier->verifySignature(h.value().data(),h.value().size(),
                                   r.hostSignature_);
      return std::pair<K,H>(std::move(k),std::move(h));
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "exchange keys with SSH-"
        << peerPreambleAndIdent.second.sshVersion_.value()
        << "-"
        << peerPreambleAndIdent.second.softwareVersion_.value()
        << (peerPreambleAndIdent.second.comment_.valid()?
            " "+peerPreambleAndIdent.second.comment_.value():
            std::string())
        << " via Diffie-Hellman Group1 SHA1 exchange";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  virtual bool requiresEncryptionCapableHostKey() const noexcept override
  {
    return false;
  }
  virtual bool requiresSignatureCapableHostKey() const noexcept override
  {
    return true;
  }
  virtual std::vector<uint8_t> hash(std::vector<uint8_t> const& data) const
    override
  {
    return xju::crypt::hashers::SHA1().hash(data);
  }

};

}
}
}
}
