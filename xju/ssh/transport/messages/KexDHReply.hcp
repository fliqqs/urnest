// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <utility> //impl
#include <iostream>
#include <xju/format.hh> //impl
#include <sstream> //impl
#include <xju/ssh/transport/MSG.hh>
#include <xju/crypt/I.hh> //impl
#include <xju/crypt/Signature.hh>
#include <xju/crypt/I.hh>

namespace xju
{
namespace ssh
{
namespace transport
{
namespace messages
{

class KexDHReply
{
public:
  static const MSG type_{MSG::KEXDH_REPLY};

  //REVISIT: is hostKeyAndCertificates encoded format identifier and blob
  //         or just blob?
  explicit KexDHReply(std::vector<uint8_t> hostKeyAndCertificates,
                      xju::crypt::I f,
                      xju::crypt::Signature hostSignature) noexcept:
      hostKeyAndCertificates_(hostKeyAndCertificates),
      f_(std::move(f)),
      hostSignature_(hostSignature)
  {
  }
  std::vector<uint8_t> hostKeyAndCertificates_;
  xju::crypt::I f_;
  xju::crypt::Signature hostSignature_;

  friend bool operator<(KexDHReply const& a, KexDHReply const& b) noexcept;
};

std::ostream& operator<<(std::ostream& s, KexDHReply const& x)
{
  s << "host key and certificates=0x"
    << xju::format::join(
      x.hostKeyAndCertificates_.begin(),
      x.hostKeyAndCertificates_.end(),
      [](uint8_t const& x){ return xju::format::hex(x,"");},
      std::string());
  auto const v=x.f_.value();
  s << ", f=0x"
    << xju::format::join(
      v.begin(),
      v.end(),
      [](uint8_t const& x){ return xju::format::hex(x,"");},
      std::string());
  s << ", host signature=0x"
    << xju::format::join(
      x.hostSignature_.begin(),
      x.hostSignature_.end(),
      [](uint8_t const& x){ return xju::format::hex(x,"");},
      std::string());
  return s;
}

}
}
}
}
