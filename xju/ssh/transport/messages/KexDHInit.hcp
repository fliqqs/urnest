// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/mpi/I.hh>
#include <utility> //impl
#include <iostream>
#include <xju/format.hh> //impl
#include <xju/net/ostream.hh>
#include <sstream> //impl
#include <xju/net/istream.hh>
#include <xju/ssh/decode.hh>
#include <xju/ssh/transport/MSG.hh>

namespace xju
{
namespace ssh
{
namespace transport
{
namespace messages
{

class KexDHInit
{
public:
  static const MSG type_{MSG::KEXDH_INIT};
  
  explicit KexDHInit(xju::mpi::I e) noexcept:
      e_(std::move(e))
  {
  }
  xju::mpi::I e_;

  friend bool operator<(KexDHInit const& a, KexDHInit const& b) noexcept;
};

std::ostream& operator<<(std::ostream& s, KexDHInit const& x)
{
  auto const v(x.e_.value());
  return s << "e=0x"
           << xju::format::join(
             v.begin(),
             v.end(),
             [](uint8_t const& x){ return xju::format::hex(x,"");},
             std::string());
}

}
}
}
}

namespace xju
{
namespace ssh
{

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::KexDHInit const& x)
{
  try{
    auto const v(x.e_.value());
    s.put8((uint8_t)transport::messages::KexDHInit::type_);
    s.put32(v.size());
    s.put(v.begin(),v.end());
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode KexDHInit " << e << " to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// note assumes type byte (KEXINIT) already read and verified
template<>
transport::messages::KexDHInit decoder<transport::messages::KexDHInit>::dec(
  xju::net::istream& s)
{
  try{
    using namespace transport;
    std::vector<uint8_t> v(s.get32());
  
    s.getN(v.size(),v.begin());
    return transport::messages::KexDHInit(xju::mpi::I(v));
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "decode KexDHInit " << e << " from input stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}
