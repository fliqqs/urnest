// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/UserName.hh>
#include <xju/ssh/userauth/ServiceName.hh>
#include <xju/ssh/userauth/MethodName.hh>
#include <xju/ssh/userauth/MSG.hh> //impl

namespace xju
{
namespace ssh
{
namespace userauth
{
namespace messages
{

class Request
{
public:
  Request(xju::UserName userName,
          ServiceName serviceName,
          MethodName methodName) noexcept:
      userName_(std::move(userName)),
      serviceName_(std::move(serviceName)),
      methodName_(std::move(methodName))
  {
  }

  xju::UserName userName_;
  xju::ServiceName serviceName_;
  xju::MethodName methodName_;
  
  friend bool operator<(Request const& a, Request const& b) noexcept;
};

}
}
}
}

namespace xju
{
namespace ssh
{

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          userauth::messages::Request const& x)
{
  s.put8((uint8_t)userauth::MSG::REQUEST);
  encode(s,x.userName_);
  encode(s,x.serviceName_);
  encode(s,x.methodName_);
  return s;
}

// note assumes type byte (REQUEST) already read and verified
template<>
userauth::messages::Request decoder<userauth::messages::Request>::dec(
  xju::net::istream& s)
{
  using namespace userauth;
  
  xju::UserName userName(decode<xju::UserName>(s));
  xju::ServiceName serviceName(decode<xju::ServiceName>(s));
  xju::MethodName methodName(decode<xju::MethodName>(s));
  return Request(std::move(userName),
                 std::move(serviceName),
                 std::move(methodName));
}

}
}

    
