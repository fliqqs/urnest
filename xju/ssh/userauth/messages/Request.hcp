// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/UserName.hh>
#include <xju/ssh/misc/ServiceName.hh>
#include <xju/ssh/userauth/MethodName.hh>
#include <xju/ssh/userauth/MSG.hh> //impl
#include <xju/format.hh>
#include <iostream>

namespace xju
{
namespace ssh
{
namespace userauth
{
namespace messages
{

class Request
{
public:
  virtual ~Request() noexcept {}
  
  Request(xju::UserName userName,
          xju::ssh::misc::ServiceName serviceName,
          MethodName methodName) noexcept:
      userName_(std::move(userName)),
      serviceName_(std::move(serviceName)),
      methodName_(std::move(methodName))
  {
  }

  xju::UserName userName_;
  xju::ssh::misc::ServiceName serviceName_;
  MethodName methodName_;
  
  friend bool operator<(Request const& a, Request const& b) noexcept;

  friend std::ostream& operator<<(std::ostream& s, Request const& x){
    using namespace xju::format;
    return
      s << "username " << quote(cEscapeString(x.userName_.value()))
        << ", service name " << quote(cEscapeString(x.serviceName_.value()))
        << ", method name " << quote(cEscapeString(x.methodName_.value()));
  }
};

}
}
}
}
