// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/net/ostream.hh>
#include <string>
#include <xju/Tagged.hh>
#include <xju/format.hh>
#include <xju/Int.hh>
#include <cinttypes>

#include <xju/crypt/I.hh> //impl
#include <xju/ssh/userauth/MSG.hh> //impl
#include <xju/ssh/userauth/messages/Banner.hh> //impl
#include <xju/ssh/userauth/messages/Failure.hh> //impl
#include <xju/ssh/userauth/messages/Request.hh> //impl
#include <xju/ssh/transport/MSG.hh> //impl
#include <xju/ssh/transport/Ident.hh> //impl
#include <xju/ssh/transport/messages/KexInit.hh> //impl
#include <xju/ssh/transport/messages/KexDHReply.hh> //impl
#include <xju/ssh/transport/messages/KexDHInit.hh> //impl
#include <xju/ssh/userauth/messages/Success.hh> //impl
#include <xju/ssh/transport/messages/NewKeys.hh>
#include <xju/ssh/userauth/messages/RSAPublicKeyRequest.hh>
#include <xju/crypt/rsa/PublicKey.hh>
#include <xju/crypt/Signature.hh>
#include <xju/ssh/transport/messages/Disconnect.hh>
#include <xju/ssh/transport/messages/ServiceRequest.hh>
#include <xju/ssh/transport/messages/ServiceAccept.hh>
#include <xju/ssh/transport/messages/Ignore.hh>
#include <vector>

namespace xju
{
namespace crypt
{
class I;
class Signer;
namespace rsa
{
class Signer;
class PrivateKey;
class PublicKey;
}
}
namespace ssh
{
namespace userauth
{
enum class MSG;
namespace messages
{
class Banner;
class Failure;
class Request;
class Success;
}
}
namespace transport
{
enum class MSG;
class Ident;
namespace messages{
class KexInit;
class KexDHReply;
class KexDHInit;
class NewKeys;
}
}

// Encode x to s per RFC4251's
// "Data Type Representations Used in the SSH Protocols".
xju::net::ostream& encode(xju::net::ostream& s, bool const x)
{
  return s.put8(x?1:0);
}
xju::net::ostream& encode(xju::net::ostream& s, uint8_t const x)
{
  return s.put8(x);
}
xju::net::ostream& encode(xju::net::ostream& s, uint16_t const x)
{
  return s.put16(x);
}
xju::net::ostream& encode(xju::net::ostream& s, uint32_t const x)
{
  return s.put32(x);
}
xju::net::ostream& encode(xju::net::ostream& s, std::string const& x)
{
  return s.put32(x.size()).put(x.begin(),x.end());
}

template<class Tag>
xju::net::ostream& encode(xju::net::ostream& s,xju::Tagged<std::string,Tag> const& x)
{
  return encode(s,x.value());
}
template<class Tag>
xju::net::ostream& encode(xju::net::ostream& s,
                          std::vector<xju::Int<Tag,uint32_t> > const& x)
{
  
  return s.put32(x.value());
}
template<class Tag>
xju::net::ostream& encode(xju::net::ostream& s,xju::Tagged<std::vector<uint8_t>,Tag> const& x)
{
  return s.put32(x._.size()).put(x._.begin(),x._.end());
}

xju::net::ostream& encode(xju::net::ostream& s,xju::crypt::Signature const& x)
{
  return s.put32(x.size()).put(x.begin(),x.end());
}

template<class Tag>
xju::net::ostream& encode(xju::net::ostream& s,std::vector<xju::Tagged<std::string,Tag> > const& x)
{
  
  return encode(s,xju::format::join(x.begin(),x.end(),std::string(",")));
}

xju::net::ostream& encode(xju::net::ostream& s, xju::crypt::I const& x)
{
  auto v(x.value());
  return s.put32(v.size()).put(v.begin(),v.end());
}

xju::net::ostream& encode(xju::net::ostream& s, userauth::MSG const& x){
  return s.put8((uint8_t)x);
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          userauth::messages::Banner const& x)
{
  s.put8((uint8_t)userauth::MSG::BANNER);
  encode(s,x.message_);
  encode(s,x.language_);
  return s;
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          userauth::messages::Failure const& x)
{
  s.put8((uint8_t)userauth::MSG::FAILURE);
  encode(s,x.canContinue_);
  encode(s,x.partialSuccess_);
  return s;
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          userauth::messages::Success const& x)
{
  s.put8((uint8_t)userauth::MSG::SUCCESS);
  return s;
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          userauth::messages::Request const& x)
{
  s.put8((uint8_t)userauth::MSG::REQUEST);
  encode(s,x.userName_);
  encode(s,x.serviceName_);
  encode(s,x.methodName_);
  return s;
}

// encode x to s per rfc4253 ssh-rsa encoding rule
xju::net::ostream& encode(xju::net::ostream& s,
                          xju::crypt::rsa::PublicKey const& x)
{
  encode(s, std::string("ssh-rsa"));
  encode(s, x.e_);
  encode(s, x.n_);
  return s;
}

// encode x and y to s per rfc4253 ssh-rsa encoding rules
xju::net::ostream& encode(xju::net::ostream& s,
                          xju::crypt::rsa::PublicKey const& x,
                          xju::crypt::Signature      const& signature)
{
  encode(s, x);
  encode(s, std::string("ssh-rsa"));
  encode(s, signature);
  return s;
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          userauth::messages::RSAPublicKeyRequest const& x)
{
  encode(s, (userauth::messages::Request const&)x);
  encode(s, true);
  encode(s, std::string("ssh-rsa"));
  encode(s, x.publicKey_, x.signature_);
  return s;
}

xju::net::ostream& encode(xju::net::ostream& s, transport::MSG const& x){
  return s.put8((uint8_t)x);
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::KexInit const& x)
{
  try{
    s.put8((uint8_t)transport::MSG::KEXINIT);
    s.put(x.cookie_.begin(),x.cookie_.end());
    encode(s,x.kexAlgorithms_);
    encode(s,x.serverHostKeyAlgorithmNames_);
    encode(s,x.clientOutCipherNames_);
    encode(s,x.serverOutCipherNames_);
    encode(s,x.clientOutPacketAuthenticatorNames_);
    encode(s,x.serverOutPacketAuthenticatorNames_);
    encode(s,x.clientOutCompressorNames_);
    encode(s,x.serverOutCompressorNames_);
    encode(s,x.clientOutLanguageNames_);
    encode(s,x.serverOutLanguageNames_);
    encode(s,x.firstKexPacketFollows_);
    s.put32(0);
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode KexInit message " << x;
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::KexDHReply const& x)
{
  try{
    s.put8((uint8_t)transport::messages::KexDHReply::type_);
    s.put32(x.hostKeyAndCertificates_.size());
    s.put(x.hostKeyAndCertificates_.begin(),
          x.hostKeyAndCertificates_.end());

    auto const v(x.f_.value());
    s.put32(v.size());
    s.put(v.begin(),v.end());
    
    s.put32(x.hostSignature_.size());
    s.put(x.hostSignature_.begin(),
          x.hostSignature_.end());
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode KexDHReply " << x << " to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::KexDHInit const& x)
{
  try{
    auto const v(x.e_.value());
    s.put8((uint8_t)transport::messages::KexDHInit::type_);
    s.put32(v.size());
    s.put(v.begin(),v.end());
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode KexDHInit " << x << " to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::NewKeys const& x)
{
  try{
    s.put8((uint8_t)transport::messages::NewKeys::type_);
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode NewKeys to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::Disconnect const& x)
{
  try{
    encode(s, xju::ssh::transport::MSG::DISCONNECT);
    encode(s, x.reason_);
    encode(s, x.description_);
    encode(s, x.languageTag_);
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode Disconnect (" << x << ") to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::ServiceRequest const& x)
{
  try{
    encode(s, xju::ssh::transport::MSG::SERVICE_REQUEST);
    encode(s, x.service_);
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode Service Request " << x << " to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::ServiceAccept const& x)
{
  try{
    encode(s, xju::ssh::transport::MSG::SERVICE_ACCEPT);
    encode(s, x.service_);
    return s;
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode Service Accept " << x << " to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

// encode x to s including initial type byte
xju::net::ostream& encode(xju::net::ostream& s,
                          transport::messages::Ignore const& x)
{
  try{
    encode(s, xju::ssh::transport::MSG::IGNORE);
    return s.put32(x.data_.size()).put(x.data_.begin(),x.data_.end());
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "encode Ignore " << x << " to output stream";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

xju::net::ostream& encode(xju::net::ostream& s, transport::Ident const& x)
{
  std::ostringstream st;
  st << "SSH-" << x.sshVersion_.value() << "-" << x.softwareVersion_;
  if (x.comment_.valid()){
    st << " " << x.comment_.value();
  }
  encode(s,st.str());
  return s;
}



}
}
