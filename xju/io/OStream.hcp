// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <xju/io/Output.hh>
#include <unistd.h>
#include <chrono>

#include <sstream> //impl
#include "xju/format.hh" //impl
#include "xju/syscall.hh" //impl
#include "xju/unistd.hh" //impl
#include <algorithm> //impl
#include <limits> //impl
#include <xju/io/select.hh> //impl

namespace xju
{
namespace io
{
class OStream : public Output
{
public:
  // write bytes from buffer until bufferSize bytes written or
  // deadline reached or output closed
  // - return number of bytes written
  // - writes what is possible immediately if deadline has already passed
  // - returns immediately if output closes before deadline
  size_t write(void const* buffer, 
               size_t bufferSize,
               std::chrono::steady_clock::time_point deadline) /*throw(
                 std::bad_alloc,
                // eg disk error
                 xju::Exception)*/ {
    std::chrono::duration<float> const timeout(
      deadline-std::chrono::steady_clock::now());
    size_t bytesWrote(0);
    try {
      uint8_t const* p((uint8_t const*)buffer);
      while(bytesWrote<bufferSize &&
            xju::io::select({this},deadline).size()) {
        size_t const thisWrite=xju::syscall(xju::write,XJU_TRACED)(
          fileDescriptor(),
          p,
          std::min(bufferSize-bytesWrote,
                   (size_t)std::numeric_limits<ssize_t>::max()));
        if (thisWrite==0) {
          if (bytesWrote) {
            return bytesWrote;
          }
          throw Output::Closed(*this,XJU_TRACED);
        }
        bytesWrote+=thisWrite;
      }
      return bytesWrote;
    }
    catch(xju::Exception& e)
    {
      std::ostringstream s;
      s << "write bytes to " << (*this)
        << "for " << xju::format::float_(timeout.count()) 
        << "s or " << (bufferSize-bytesWrote) 
        << " more (of " << bufferSize << " total) bytes written "
        << "or output closed";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  void useAsStdout() throw()
  {
    xju::syscall(xju::dup2,XJU_TRACED)(fileDescriptor(),1);
  }
  
  void useAsStderr() throw()
  {
    xju::syscall(xju::dup2,XJU_TRACED)(fileDescriptor(),2);
  }
  
};


}
}


