// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <xju/io/Output.hh>
#include <unistd.h>
#include <chrono>

#include <sstream> //impl
#include "xju/format.hh" //impl
#include "xju/syscall.hh" //impl
#include "xju/unistd.hh" //impl
#include <algorithm> //impl
#include <limits> //impl
#include <xju/io/select.hh> //impl
#include <xju/steadyNow.hh> //impl
#include <xju/DeadlineReached.hh> //impl

namespace xju
{
namespace io
{
class OStream : public Output
{
public:
  // write bytes from buffer until bufferSize bytes written or
  // deadline reached
  // - return number of bytes written
  // - writes what is possible immediately if deadline has already passed
  // - returns immediately if output closes before deadline but some bytes
  //   have been written (returns how many)
  size_t write(
    void const* buffer, 
    size_t bufferSize,
    std::chrono::steady_clock::time_point deadline)
    // std::bad_alloc
    // Output::Closed - output closed before any bytes written
    //   note pipe generates EPIPE by default so to get Output::Closed for
    //   pipe, ensure EPIPE is blocked
    // xju::Exception - eg disk error
  {
    size_t bytesWrote(0);
    try {
      uint8_t const* p((uint8_t const*)buffer);
      while(bytesWrote<bufferSize &&
            xju::io::select({this},deadline).size()) {
        try{
          size_t const thisWrite=xju::syscall(xju::write,XJU_TRACED)(
            fileDescriptor(),
            p,
            std::min(bufferSize-bytesWrote,
                     (size_t)std::numeric_limits<ssize_t>::max()));
          if (thisWrite==0) {
            if (bytesWrote) {
              return bytesWrote;
            }
            throw Output::Closed(*this,XJU_TRACED);
          }
          bytesWrote+=thisWrite;
        }
        catch(xju::SyscallFailed const& e){
          if (e._errno==EPIPE){
            if (bytesWrote){
              return bytesWrote;
            }
            throw Output::Closed(*this,XJU_TRACED);
          }
          throw;
        }
      }
      return bytesWrote;
    }
    catch(xju::Exception& e)
    {
      std::ostringstream s;
      s << "write more of max " << bufferSize << " bytes, having written "
        << bytesWrote << " bytes, to " << (*this) << " by deadline";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // write bufferSize bytes of buffer by deadline
  void writeAll(void const* buffer, 
                size_t bufferSize,
                std::chrono::steady_clock::time_point deadline)
    // Output::Closed - output closed, some bytes might have been written
    // DeadlineReached - before all bytes could be written
    // xju::Exception - other
  {
    size_t rit(0);
    try{
      do{
        rit+=write(((uint8_t const*)buffer)+rit,bufferSize-rit,deadline);
      }
      while(xju::steadyNow()<deadline && rit<bufferSize);
      if (rit!=bufferSize){
        throw xju::DeadlineReached(
          xju::Exception("deadline reached",XJU_TRACED));
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "write " << (bufferSize-rit) << " more bytes, having written "
        << rit << ", to " << (*this) << " by deadline";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  void useAsStdout() throw()
  {
    xju::syscall(xju::dup2,XJU_TRACED)(fileDescriptor(),1);
  }
  
  void useAsStderr() throw()
  {
    xju::syscall(xju::dup2,XJU_TRACED)(fileDescriptor(),2);
  }
  
};


}
}


