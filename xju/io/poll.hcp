// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//
#include <utility>
#include <set>
#include <chrono>
#include <new>

#include <xju/io/Input.hh> //impl
#include <xju/io/Output.hh> //impl

#include <xju/syscall.hh> //impl
#include <xju/unistd.hh> //impl
#include <xju/format.hh> //impl
#include <xju/syscall.hh>
#include <poll.h>
#include <map>
#include <xju/io/PollInputState.hh>
#include <xju/io/PollOutputState.hh>

namespace xju
{
namespace io
{
class Input;
class Output;


// wait at most until deadline for one of the specified inputs or outputs
// to be readable/writable/have an exceptional input condition
// (see poll(2) manpage) or have an error or hangup condition;
// return as soon as one is, returning all that are
// - returns empty sets when deadline is reached
// - returns those inputs/outputs that are already readable/writable etc if
//   deadline has already passed
// post: result.first.size()||result.second.size()||deadline reached
// post: returned PollInputState/PollOutputState is bit-wise OR of present
//       states and is never 0
std::pair<std::map<xju::io::Input const*,PollInputState>,
          std::map<xju::io::Output const*,PollOutputState> > poll(
  std::set<xju::io::Input const*> const& inputs,
  std::set<xju::io::Output const*> const& outputs,
  std::chrono::steady_clock::time_point const& deadline,
  std::set<xju::io::Input const*> const& exceptInputs={}) /*throw(
    std::bad_alloc)*/
{
  std::pair<std::map<Input const*,PollInputState>,
            std::map<Output const*,PollOutputState > > result;
  nfds_t const nfds(inputs.size()+outputs.size());
  struct pollfd p[nfds];
  do {
    auto i(&p[0]);
    for(auto x : inputs) {
      short pri(exceptInputs.find(x)!=exceptInputs.end()?POLLPRI:0);
      (*i++)={x->fileDescriptor(),(short)(POLLIN|pri),0};
    }
    for(auto x : outputs) {
      (*i++)={x->fileDescriptor(),POLLOUT,0};
    }
    auto const now(std::chrono::steady_clock::now());
    std::chrono::system_clock::duration timeout(deadline-now);
    if (timeout<std::chrono::seconds(0)){
      timeout=std::chrono::seconds(0);
    }
    std::chrono::seconds const tv_sec(
      std::chrono::duration_cast<std::chrono::seconds>(timeout));
    auto const tv_nsec(
      std::chrono::duration_cast<std::chrono::nanoseconds>(timeout-tv_sec));
    struct timespec timeout_{tv_sec.count(),tv_nsec.count()};
    int const n=::ppoll(p,nfds,&timeout_,0);
    switch(n) {
    case 0:
      break;
    case -1:
      if (errno != EINTR)
      {
        xju::assert_equal(errno,ENOMEM);
        throw std::bad_alloc();
      }
      break;
    default:
    {
      auto i(&p[0]);
      for(auto x : inputs) {
        if ((*i).revents & (POLLIN|POLLPRI|POLLERR|POLLHUP)){
          result.first.insert({x,(PollInputState)(*i).revents});
        }
        ++i;
      }
      for(auto x : outputs) {
        if ((*i).revents & (POLLOUT|POLLERR|POLLHUP)){
          result.second.insert({x,(PollOutputState)(*i).revents});
        }
        ++i;
      }
    }
    }
  }
  while(result.first.size()==0 &&
        result.second.size()==0 &&
        std::chrono::steady_clock::now()<deadline);
  return result;
}

// as above but without any outputs or excepts
// 
std::map<xju::io::Input const*,PollInputState>
poll(
  std::set<Input const* > const& inputs,
  std::chrono::steady_clock::time_point const& deadline) /*throw(
    xju::SyscallFailed)*/
{
  return poll(inputs,std::set<Output const* >(),deadline).first;
}

// as above but without any outputs, except per bool
// 
std::map<xju::io::Input const*,PollInputState> poll(
  std::map<Input const*,bool> const& inputs, //bool true selects for pri too
  std::chrono::steady_clock::time_point const& deadline) /*throw(
    xju::SyscallFailed)*/
{
  std::set<Input const*> r;
  std::set<Input const*> p;
  for(auto x: inputs){
    r.insert(x.first);
    if (x.second){
      p.insert(x.first);
    }
  }
  return poll(r,std::set<Output const* >(),deadline,p).first;
}

// as above but without any inputs
// 
std::map<Output const*,PollOutputState > poll(
  std::set<Output const* > const& outputs,
  std::chrono::steady_clock::time_point const& deadline) /*throw(
    std::bad_alloc)*/
{
  return poll(std::set<Input const*>(),outputs,deadline).second;
}

}
}
