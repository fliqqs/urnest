// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/io/IStream.hh>
#include <chrono>
#include <xju/ByteBuffer.hh>
#include <xju/DeadlineReached.hh> //impl
#include <xju/io/select.hh> //impl
#include <xju/steadyNow.hh> //impl
#include <xju/net/istream.hh>

namespace xju
{
namespace io
{

class IBuf : public xju::IBuf
{
public:
  IBuf(xju::io::IStream& x,
       std::chrono::steady_clock::time_point deadline,
       size_t const size) noexcept:
      x_(x),
      deadline_(std::move(deadline)),
      data_(size)
  {
  }

  class DeadlineOverride
  {
  public:
    // override s deadline for lifetime of this
    DeadlineOverride(IBuf& s,
                     std::chrono::steady_clock::time_point deadline):
        s_(s),
        old_(s.deadline_)
    {
      s.deadline_=deadline;
    }
    ~DeadlineOverride() noexcept
    {
      s_.deadline_=old_;
    }
  private:
    IBuf& s_;
    std::chrono::steady_clock::time_point const old_;
  };

  //xju::IBuf::underflow
  std::pair<uint8_t const*, uint8_t const*> underflow() override
  // xju::Exception
  {
    try{
      data_.clear();
      auto const space(data_.contigSpace());
      xju::io::select({&x_},deadline_);
      data_.appended(x_.read(space.first,space.second,xju::steadyNow()));
      if (data_.size()==0){
        throw xju::DeadlineReached(xju::Exception("deadline reached",XJU_TRACED));
      }
      ByteBuffer const& b(data_);
      auto const result(b.contigData());
      return std::make_pair(result.first,result.first+result.second);
    }
    catch(xju::Exception& e)
    {
      std::ostringstream s;
      s << "read some data into " << x_ << " by deadline";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
private:
  xju::io::IStream& x_;
  std::chrono::steady_clock::time_point deadline_;
  xju::ByteBuffer data_;
};

}
}
