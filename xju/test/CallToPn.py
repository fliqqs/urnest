#!/bin/env python

import sys

template='''\
//generated by xju/test/CallToPn.py

#include <xju/test/CallTo.hh>

namespace xju
{{
namespace test
{{

template<class T,class U{pClasses}>
class CallToV{nParams} : public CallToVoid
{{
public:
  explicit CallToV{nParams}(
    T& x,void 
    (U::*f)({fParams}){params})
      : x_(x),
        f_(f){paramInits}
  {{
  }}
  T& x_;
  void (U::* const f_)({fParams});{paramMembers}
}};


template<class T,class U,class R{pClasses}>
class CallToR{nParams} : public CallToR<R>
{{
public:
  explicit CallToR{nParams}(
    T& x,
    R (U::*f)({fParams}){params})
      : x_(x),
        f_(f){paramInits}
  {{
  }}
  T& x_;
  R (U::* const f_)({fParams});{paramMembers}
}};

}}
}}
'''

nParams=int(sys.argv[1])
pClasses=''.join([',class P{n}'.format(**vars())
                  for n in range(1,nParams+1)])
fParams=','.join(['P{n}'.format(**vars())
                  for n in range(1,nParams+1)])
params=  ''.join([',\n    P{n} const& p{n}'.format(**vars())
                  for n in range(1,nParams+1)])
paramInits=''.join([',\n        p{n}_(p{n})'.format(**vars())
                    for n in range(1,nParams+1)])
paramMembers=''.join(['\n  P{n} const& p{n}_;'.format(**vars())
                      for n in range(1,nParams+1)])

print template.format(**vars())
