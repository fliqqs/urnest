//generated by xju/test/CallToPn.py

#include <xju/test/CallTo.hh>

namespace xju
{
namespace test
{

template<class T,class U>
class CallToV0 : public CallToVoid
{
public:
  explicit CallToV0(
    T& x,void 
    (U::*f)())
      : x_(x),
        f_(f)
  {
  }
  T& x_;
  void (U::* const f_)();
};


template<class T,class U,class R>
class CallToR0 : public CallToR<R>
{
public:
  explicit CallToR0(
    T& x,
    R (U::*f)())
      : x_(x),
        f_(f)
  {
  }
  T& x_;
  R (U::* const f_)();
};

template<class T,class U>
class CallToVc0 : public CallToVoid
{
public:
  explicit CallToVc0(
    T const& x,void 
    (U::*f)() const)
      : x_(x),
        f_(f)
  {
  }
  T const& x_;
  void (U::* const f_)() const;
};


template<class T,class U,class R>
class CallToRc0 : public CallToR<R>
{
public:
  explicit CallToRc0(
    T const& x,
    R (U::*f)() const)
      : x_(x),
        f_(f)
  {
  }
  T const& x_;
  R (U::* const f_)() const;
};

}
}

