//generated by xju/test/CallToPn.py

#include <xju/test/CallTo.hh>

namespace xju
{
namespace test
{

template<class T,class U,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToV7 : public CallToVoid
{
public:
  explicit CallToV7(
    T& x,
    void (U::*f)(P1,P2,P3,P4,P5,P6,P7),
    P1 const& p1,
    P2 const& p2,
    P3 const& p3,
    P4 const& p4,
    P5 const& p5,
    P6 const& p6,
    P7 const& p7)
      : x_(x),
        f_(f),
        p1_(p1),
        p2_(p2),
        p3_(p3),
        p4_(p4),
        p5_(p5),
        p6_(p6),
        p7_(p7)
  {
  }
  T& x_;
  void (U::* const f_)(P1,P2,P3,P4,P5,P6,P7);
  P1 p1_;
  P2 p2_;
  P3 p3_;
  P4 p4_;
  P5 p5_;
  P6 p6_;
  P7 p7_;
};

template<class T,class U,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToV7_ : public CallToVoid
{
public:
  explicit CallToV7_(
    T& x,
    void (U::*f)(P1,P2,P3,P4,P5,P6,P7))
      : x_(x),
        f_(f)
  {
  }
  T& x_;
  void (U::* const f_)(P1,P2,P3,P4,P5,P6,P7);

  std::shared_ptr<CallToV7<T,U, P1, P2, P3, P4, P5, P6, P7> > operator()(
    P1 p1,
    P2 p2,
    P3 p3,
    P4 p4,
    P5 p5,
    P6 p6,
    P7 p7){
    return std::shared_ptr<CallToV7<T,U, P1, P2, P3, P4, P5, P6, P7> >(
      new CallToV7<T,U, P1, P2, P3, P4, P5, P6, P7>(x_, f_, p1, p2, p3, p4, p5, p6, p7));
  }
};

template<class T,class U,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
CallToV7_<T,U, P1, P2, P3, P4, P5, P6, P7> callTo(
    T& x,
    void (U::*f)(P1,P2,P3,P4,P5,P6,P7))
{
  return CallToV7_<T,U, P1, P2, P3, P4, P5, P6, P7>(x,f);
}

template<class T,class U,class R,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToR7 : public CallToR<R>
{
public:
  explicit CallToR7(
    T& x,
    R (U::*f)(P1,P2,P3,P4,P5,P6,P7),
    P1 const& p1,
    P2 const& p2,
    P3 const& p3,
    P4 const& p4,
    P5 const& p5,
    P6 const& p6,
    P7 const& p7)
      : x_(x),
        f_(f),
        p1_(p1),
        p2_(p2),
        p3_(p3),
        p4_(p4),
        p5_(p5),
        p6_(p6),
        p7_(p7)
  {
  }
  T& x_;
  R (U::* const f_)(P1,P2,P3,P4,P5,P6,P7);
  P1 p1_;
  P2 p2_;
  P3 p3_;
  P4 p4_;
  P5 p5_;
  P6 p6_;
  P7 p7_;

};

template<class T,class U,class R,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToR7_ : public CallToR<R>
{
public:
  explicit CallToR7_(
    T& x,
    R (U::*f)(P1,P2,P3,P4,P5,P6,P7))
      : x_(x),
        f_(f)
  {
  }
  T& x_;
  R (U::* const f_)(P1,P2,P3,P4,P5,P6,P7);

  std::shared_ptr<CallToR7<T,U,R, P1, P2, P3, P4, P5, P6, P7> > operator()(
    P1 p1,
    P2 p2,
    P3 p3,
    P4 p4,
    P5 p5,
    P6 p6,
    P7 p7){
    return std::shared_ptr<CallToR7<T,U,R, P1, P2, P3, P4, P5, P6, P7> >(
      new CallToR7<T,U,R, P1, P2, P3, P4, P5, P6, P7>(x_, f_, p1, p2, p3, p4, p5, p6, p7));
  }
};

template<class T,class U,class R,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
CallToR7_<T,U,R, P1, P2, P3, P4, P5, P6, P7> callTo(
    T& x, 
    R (U::*f)(P1,P2,P3,P4,P5,P6,P7))
{
  return CallToR7_<T,U,R, P1, P2, P3, P4, P5, P6, P7>(x,f);
}


template<class T,class U,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToVc7 : public CallToVoid
{
public:
  explicit CallToVc7(
    T& x,
    void (U::*f)(P1,P2,P3,P4,P5,P6,P7) const ,
    P1 const& p1,
    P2 const& p2,
    P3 const& p3,
    P4 const& p4,
    P5 const& p5,
    P6 const& p6,
    P7 const& p7)
      : x_(x),
        f_(f),
        p1_(p1),
        p2_(p2),
        p3_(p3),
        p4_(p4),
        p5_(p5),
        p6_(p6),
        p7_(p7)
  {
  }
  T& x_;
  void (U::* const f_)(P1,P2,P3,P4,P5,P6,P7) const;
  P1 p1_;
  P2 p2_;
  P3 p3_;
  P4 p4_;
  P5 p5_;
  P6 p6_;
  P7 p7_;
};

template<class T,class U,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToVc7_ : public CallToVoid
{
public:
  explicit CallToVc7_(
    T& x,
    void (U::*f)(P1,P2,P3,P4,P5,P6,P7) const)
      : x_(x),
        f_(f)
  {
  }
  T& x_;
  void (U::* const f_)(P1,P2,P3,P4,P5,P6,P7) const;

  std::shared_ptr<CallToVc7<T,U, P1, P2, P3, P4, P5, P6, P7> > operator()(
    P1 p1,
    P2 p2,
    P3 p3,
    P4 p4,
    P5 p5,
    P6 p6,
    P7 p7){
    return std::shared_ptr<CallToVc7<T,U, P1, P2, P3, P4, P5, P6, P7> >(
      new CallToVc7<T,U, P1, P2, P3, P4, P5, P6, P7>(x_, f_, p1, p2, p3, p4, p5, p6, p7));
  }
};

template<class T,class U,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
CallToVc7_<T,U, P1, P2, P3, P4, P5, P6, P7> callTo(
    T& x,
    void (U::*f)(P1,P2,P3,P4,P5,P6,P7) const)
{
  return CallToVc7_<T,U, P1, P2, P3, P4, P5, P6, P7>(x,f);
}

template<class T,class U,class R,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToRc7 : public CallToR<R>
{
public:
  explicit CallToRc7(
    T& x,
    R (U::*f)(P1,P2,P3,P4,P5,P6,P7) const ,
    P1 const& p1,
    P2 const& p2,
    P3 const& p3,
    P4 const& p4,
    P5 const& p5,
    P6 const& p6,
    P7 const& p7)
      : x_(x),
        f_(f),
        p1_(p1),
        p2_(p2),
        p3_(p3),
        p4_(p4),
        p5_(p5),
        p6_(p6),
        p7_(p7)
  {
  }
  T& x_;
  R (U::* const f_)(P1,P2,P3,P4,P5,P6,P7) const;
  P1 p1_;
  P2 p2_;
  P3 p3_;
  P4 p4_;
  P5 p5_;
  P6 p6_;
  P7 p7_;

};

template<class T,class U,class R,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToRc7_ : public CallToR<R>
{
public:
  explicit CallToRc7_(
    T& x,
    R (U::*f)(P1,P2,P3,P4,P5,P6,P7) const)
      : x_(x),
        f_(f)
  {
  }
  T& x_;
  R (U::* const f_)(P1,P2,P3,P4,P5,P6,P7) const;

  std::shared_ptr<CallToRc7<T,U,R, P1, P2, P3, P4, P5, P6, P7> > operator()(
    P1 p1,
    P2 p2,
    P3 p3,
    P4 p4,
    P5 p5,
    P6 p6,
    P7 p7){
    return std::shared_ptr<CallToRc7<T,U,R, P1, P2, P3, P4, P5, P6, P7> >(
      new CallToRc7<T,U,R, P1, P2, P3, P4, P5, P6, P7>(x_, f_, p1, p2, p3, p4, p5, p6, p7));
  }
};

template<class T,class U,class R,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
CallToRc7_<T,U,R, P1, P2, P3, P4, P5, P6, P7> callTo(
    T& x, 
    R (U::*f)(P1,P2,P3,P4,P5,P6,P7) const)
{
  return CallToRc7_<T,U,R, P1, P2, P3, P4, P5, P6, P7>(x,f);
}


}
}

