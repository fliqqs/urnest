//generated by xju/test/CallToPn.py

#include <xju/test/CallTo.hh>

namespace xju
{
namespace test
{

template<class T,class U,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToV7 : public CallToVoid
{
public:
  explicit CallToV7(
    T& x,void 
    (U::*f)(P1,P2,P3,P4,P5,P6,P7),
    P1 const& p1,
    P2 const& p2,
    P3 const& p3,
    P4 const& p4,
    P5 const& p5,
    P6 const& p6,
    P7 const& p7)
      : x_(x),
        f_(f),
        p1_(p1),
        p2_(p2),
        p3_(p3),
        p4_(p4),
        p5_(p5),
        p6_(p6),
        p7_(p7)
  {
  }
  T& x_;
  void (U::* const f_)(P1,P2,P3,P4,P5,P6,P7);
  P1 const& p1_;
  P2 const& p2_;
  P3 const& p3_;
  P4 const& p4_;
  P5 const& p5_;
  P6 const& p6_;
  P7 const& p7_;
};


template<class T,class U,class R,class P1,class P2,class P3,class P4,class P5,class P6,class P7>
class CallToR7 : public CallToR<R>
{
public:
  explicit CallToR7(
    T& x,
    R (U::*f)(P1,P2,P3,P4,P5,P6,P7),
    P1 const& p1,
    P2 const& p2,
    P3 const& p3,
    P4 const& p4,
    P5 const& p5,
    P6 const& p6,
    P7 const& p7)
      : x_(x),
        f_(f),
        p1_(p1),
        p2_(p2),
        p3_(p3),
        p4_(p4),
        p5_(p5),
        p6_(p6),
        p7_(p7)
  {
  }
  T& x_;
  R (U::* const f_)(P1,P2,P3,P4,P5,P6,P7);
  P1 const& p1_;
  P2 const& p2_;
  P3 const& p3_;
  P4 const& p4_;
  P5 const& p5_;
  P6 const& p6_;
  P7 const& p7_;
};

}
}

