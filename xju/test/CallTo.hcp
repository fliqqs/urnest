// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/Mutex.hh>
#include <xju/Condition.hh>
#include <memory>
#include <xju/assert.hh> //impl
#include <xju/Lock.hh> //impl
#include <type_traits>
#include <xju/steadyNow.hh> //impl

namespace xju
{
namespace test
{

class CallTo
{
public:
  virtual ~CallTo()  noexcept {}
};

class CallToVoid : public CallTo
{
public:
  explicit CallToVoid() noexcept:
      changed_(guard_)
  {
  }
  void awaitReturn(std::chrono::steady_clock::time_point deadline) const {
    xju::Lock l(guard_);
    while(!result_.get() && xju::steadyNow()<deadline){
      changed_.wait(l,deadline);
    }
    xju::assert_not_equal(result_.get(),(void*)0); //deadline reached?
    (*result_)();
  }
  
  void return_() noexcept {
    xju::Lock l(guard_);
    xju::assert_equal(result_.get(),(void*)0);
    result_=std::shared_ptr<Result>(new Success);
    changed_.signal(l);
  }
  
  template<class E>
  void raise(E e) noexcept {
    xju::Lock l(guard_);
    xju::assert_equal(result_.get(),(void*)0);
    result_=std::shared_ptr<Result>(new Failure<E>(e));
    changed_.signal(l);
  }
private:
  class Result
  {
  public:
    virtual ~Result() noexcept {}
    virtual void operator()() = 0;
  };
  class Success : public Result
  {
  public:
    virtual void operator()() noexcept override
    {
    }
  };
  
  template<class E>
  class Failure : public Result
  {
  public:
    explicit Failure(E e) noexcept
        :e_(std::move(e))
    {
    }
    virtual void operator()() override
    {
      throw e_;
    }
  private:
    E e_;
  };

  mutable xju::Mutex guard_;
  mutable xju::Condition changed_;
  std::shared_ptr<Result> result_;
  
};

template<class R>
class CallToR : public CallTo
{
public:
  explicit CallToR() noexcept
    : changed_(guard_)
  {
  }
  R awaitResult(std::chrono::steady_clock::time_point deadline) const {
    xju::Lock l(guard_);
    while(!result_.get()){
      changed_.wait(l,deadline);
    }
    xju::assert_not_equal(result_.get(),(void*)0);//deadline reached
    return (*result_)();
  }
  
  void return_(R r) noexcept {
    xju::Lock l(guard_);
    xju::assert_equal(result_.get(),(void*)0);
    result_=std::shared_ptr<Result>(new Success(r));
    changed_.signal(l);
  }
  
  template<class E>
  void raise(E e) noexcept {
    xju::Lock l(guard_);
    xju::assert_equal(result_.get(),(void*)0);
    result_=std::shared_ptr<Result>(new Failure<E>(e));
    changed_.signal(l);
  }
private:
  class Result
  {
  public:
    virtual ~Result() noexcept {}
    virtual R operator()() = 0;
  };
  class Success : public Result
  {
  public:
    Success(R r) noexcept
        :r_(r)
    {
    }
    virtual R operator()() noexcept override
    {
      return r_;
    }
    R r_;
  };
  
  template<class E>
  class Failure : public Result
  {
  public:
    explicit Failure(E e) noexcept
        :e_(std::move(e))
    {
    }
    virtual R operator()() override
    {
      throw e_;
    }
  private:
    E e_;
  };

  mutable xju::Mutex guard_;
  mutable xju::Condition changed_;
  std::shared_ptr<Result> result_;
  
};

}
}


