// Copyright (c) 2020 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/AutoFd.hh> //impl
#include <sstream> //impl
#include <xju/ip/UDPSocket.hh> //impl
#include <cinttypes> //impl
#include <xju/ip/icmp/Message.hh> //impl
#include <xju/Optional.hh> //impl
#include <iostream> //impl
#include <xju/format.hh>
#include <vector> //impl
#include <netinet/ip.h> //impl
#include <netinet/udp.h> //impl
#include <xju/syscall.hh>
#include <xju/socket.hh> //impl
#include <arpa/inet.h> //impl
#include <xju/ip/UDPSocket.hh>
#include <cinttypes>
#include <tuple>
#include <xju/ip/v4/Address.hh>
#include <xju/ip/icmp/Message.hh>
#include <iostream>
#include <xju/Optional.hh>
#include <vector>
#include <sys/types.h> //impl
#include <linux/errqueue.h> //impl

namespace xju
{
namespace ip
{

namespace{
  void enableErrors(xju::AutoFd const& socket) /*throw(
    xju::SyscallFailed)*/
  {
    try{
      int v{1};
      socklen_t l{sizeof(v)};
      xju::syscall(xju::setsockopt,XJU_TRACED)(
        socket.fd(),IPPROTO_IP,IP_RECVERR,&v,l);
      
      // now what?
      // x do we have to also set IP_RECVERR when calling recvmsg? if we do will
      //   recvmsg only return errors or valid message if no error?
      //   x MSG_ERRQUEUE on recvmsg only calls
      //     - ip_recv_error
      //     ... else calls
      //     - skb_recv_datagram
      //   ... so they are two receive functions that must be called separately
      // - check callers of ip_recv_error (udp.c,raw.c),
      //   - read recvmsg code (udp.c);
      //     
      //   - check sock_common_recvmsg->udp_rcv,udp_err
      //     - udp.c udp_rcv
      //       udp.c udp_rcv defers to udp.c __udp4_lib_rcv error cases:
      //         x no space in socket buffer? Comment is incorrect, actually
      //           two possibilities:
      //             x packet too short to contain a UDP header
      //             x no space to copy header into socket buffer
      //           ... both: silent drop counts as
      //           UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //         x UDP_INC_STATS_BH(UDP_MIB_INERRORS)?
      //         x packet too short for udp header stated len:
      //           UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //         x udp4_csum_init error (not actual checksum check just error
      //           trying to figure out whether to do the checksum check and
      //           catching some cases where checksum will not be possible)
      //           UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //         x no matching socket and xfrm4_policy_check fails
      //           UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //         x no matching socket and full checksum fails
      //           UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //         x no matching socket -> ICMP_DEST_UNREACH+ICMP_PORT_UNREACH
      //                                 UDP_INC_STATS_BH(UDP_MIB_NOPORTS)
      //         - ... else udp_queue_rcv_skb
      //             x xfrm_policy_check fails drop
      //               UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //             x sk_filter and complete checksum fail
      //               UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //               x what is sk_filter (see below)?
      //             x sock_queue_rcv_skb returns ENOMEM
      //               UDP_INC_STATS_BH(UDP_MIB_RCVBUFERRORS)
      //               UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //             x sock_queue_rcv_skb other fail
      //               UDP_INC_STATS_BH(UDP_MIB_INERRORS)
      //             x sock_queue_rcv_skb
      //               returns ENOMEM->above
      //               or sk_filter fail other above
      //                 sk_filter security filtering something never mind
      //       x udp_rcv returns error code, what happens?
      //         ip_local_deliver moves on to check for other matching
      //         protocols (sockets?)
      //     x udp.c udp_err - __udp4_lib_err
      //       x handles icmp messages eg ICMP_DEST_UNREACH / mtu exc
      //       x if no sock ICMP_INC_STATS_BH(ICMP_MIB_INERRORS)
      //       x ip_icmp_error if recverr
      //         x sock_queue_err_skb SO_EE_ORIGIN_ICMP
      //           x puts on sk_error_queue
      //       x sk->sk_error_report(sk) looks like sock_def_error_report
      //         POLL_ERR i.e. select error
      //     x SO_EE_ORIGIN_LOCAL from ip_local_error from
      //       x raw_send_hdrinc EMSGSIZE where packet > dest device mtu
      //       x ip_append_page when total > 0xffff
      //           from udp_sendpage
      //       x ip_append_data
      //           from udp_sendmsg
      //
      // ... so from all that receive side will never get "IP_RECVERR" errors
      //     it will only get drops. Everything else on the receive side
      //     increments counters and some things also send back ICMP reports.
      //     But counters are pretty useless for tracking down problems
      //     with specific flows: better to use raw socket?
      //
      // So mingling IP_RECVERR messages in with UDPSocket::receive is silly.
      // Should be getSendError() call when select(except). But that makes
      // it hard to use correctly because if we don't call getSendError we
      // end up clogging the socket and every send gets rejected and every
      // in packet gets dropped?
      // REVISIT: in receive select for error too
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "enable delivery failure notice reporting on UDPSocket "
        << socket.fd();
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
}

class UDPDeliveryFailureNoticeQueue
{
public:
  // Collect delivery failures notices:
  //   - icmp failure notices
  //   - local failure notices
  // ... for messages sent out by s.
  //
  // Be sure to actually collect notices or they fill s' buffers
  // and prevent it sending/receiving messages.
  //
  // To wait for errors, use xju::io::poll with s as either input, output
  // or both and check for POLLERR.
  //
  // pre: lifetime(s) includes lifetime(this)
  explicit UDPDeliveryFailureNoticeQueue(UDPSocket& s) noexcept:
      s_(s)
  {
    enableErrors(s_.fd_);
  }
  class DeliveryFailureNotice
  {
  public:
    // Local failure, e.g. no route
    DeliveryFailureNotice(std::pair<xju::ip::v4::Address,xju::ip::Port> to,
                          uint32_t _errno_,
                          uint32_t info
      ) noexcept
        :to_(to),
         errno_(_errno_),
         info_(info)
    {
    }
    // Non-local failure, e.g. host unreachable
    DeliveryFailureNotice(std::pair<xju::ip::v4::Address,xju::ip::Port> to,
                          uint32_t _errno_,
                          uint32_t info, 
                          std::tuple<
                            xju::ip::v4::Address, // dropped by
                            xju::ip::icmp::Message::Type, // why
                            xju::ip::icmp::Message::Code  //  "
                          > droppedBecause) noexcept
        :to_(to),
         errno_(_errno_),
         info_(info),
         droppedBecause_(std::move(droppedBecause)){
    }
    std::pair<xju::ip::v4::Address,xju::ip::Port> to_;
    uint32_t errno_;
    uint32_t info_; // MTU where errno is EMSGSIZE; REVIISIT: others?

    xju::Optional<std::tuple<
                      xju::ip::v4::Address, // dropped by
                      xju::ip::icmp::Message::Type, // why
                      xju::ip::icmp::Message::Code  //  "
                    > > droppedBecause_;

    friend bool operator<(DeliveryFailureNotice const& x,
                          DeliveryFailureNotice const& y)
      noexcept;
    
    friend std::ostream& operator<<(std::ostream& s,
                                    DeliveryFailureNotice const& x)
    {
      s << "UDP/IP message to " << x.to_.first << " port " << x.to_.second
        << " delivery failed ";
      if (x.droppedBecause_.valid()){
        s << " at " << std::get<0>(x.droppedBecause_.value())
          << " which reported "
          << " ICMP type "
          << xju::format::hex((int)std::get<1>(x.droppedBecause_.value()))
          << " and ICMP code "
          << xju::format::hex(std::get<2>(x.droppedBecause_.value()).value());
      }
      else{
        s << " locally with errno " << x.errno_ << " and info "
          << xju::format::int_(x.info_);
      }
      return s;
    }
  };

  // Get any failure notices received by s since last call to
  // getFailureNotices/construction.
  std::vector<UDPDeliveryFailureNoticeQueue::DeliveryFailureNotice>
  getFailureNotices() noexcept
  {
    std::vector<DeliveryFailureNotice> result;
    try{
      while(true){
        uint8_t buffer[64];
        sockaddr_in target_addr;
        struct iovec v={buffer,sizeof(buffer)};
        union {
          char buf[CMSG_SPACE(sizeof(struct sock_extended_err)+sizeof(struct sockaddr_in))];
          struct cmsghdr align;
        } u;
        struct msghdr h={
          &target_addr,sizeof(target_addr),
          &v,1,
          u.buf,sizeof(u.buf),
          0
        };
        ssize_t const bytesRead=xju::syscall(xju::recvmsg,XJU_TRACED)(
          s_.fileDescriptor(),
          &h,
          MSG_NOSIGNAL|MSG_ERRQUEUE);
        struct cmsghdr* cmsg{CMSG_FIRSTHDR(&h)};
        for (; cmsg; cmsg = CMSG_NXTHDR(&h, cmsg)) {
          if (cmsg->cmsg_level == SOL_IP &&
              cmsg->cmsg_type == IP_RECVERR) {
            auto const e((sock_extended_err const*)CMSG_DATA(cmsg));
            switch(e->ee_origin){
            case SO_EE_ORIGIN_LOCAL:
            {
              std::pair<xju::ip::v4::Address,xju::ip::Port> to(
                xju::ip::v4::Address(::ntohl(target_addr.sin_addr.s_addr)),
                xju::ip::Port(::ntohs(target_addr.sin_port)));
              result.push_back(
                DeliveryFailureNotice(
                  to,
                  e->ee_errno,
                  e->ee_info));
            }
            break;
            case SO_EE_ORIGIN_ICMP:
            {
              auto const offender(SO_EE_OFFENDER(e));
              if (offender->sa_family==AF_INET){
                auto const sender((struct sockaddr_in const*)offender);
                result.push_back(
                  DeliveryFailureNotice(
                    {xju::ip::v4::Address(::ntohl(target_addr.sin_addr.s_addr)),
                     xju::ip::Port(::ntohs(target_addr.sin_port))},
                    e->ee_errno,
                    e->ee_info,
                    std::make_tuple(
                      xju::ip::v4::Address(sender->sin_addr.s_addr),
                      xju::ip::icmp::Message::Type(e->ee_type),
                      xju::ip::icmp::Message::Code(e->ee_code))));
              }
            }
            //REVISIT: IPv6 SO_EE_ORIGIN_ICMP6
            }
          }
        }
      }
    }
    catch(xju::SyscallFailed const& e){
      return result;
    }
  }
private:
  UDPSocket& s_;
};

}
}


