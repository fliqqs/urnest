// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ip/decode.hh>
#include <xju/ip/v4/Header.hh>
#include <sstream>
namespace xju
{
namespace ip
{
namespace v4
{

// decode IPv4 header at offset of specified iterator
// - return header plus iterator following header
template<class I>
std::pair<Header,xju::ip::decode::Iterator<I> > decodeHeader(
  xju::ip::decode::Iterator<I> const at) /*throw(
    xju::Exception)*/{
  try{
    xju::ip::decode::Iterator<I> i(at);
    Header::Version version{i.get4Bits("version")};
    Header::IHL ihl{i.get4Bits("internal header length")};
    Header::DSCP dscp{i.get6Bits("DSCP")};
    Header::ECN ecn{i.get2Bits("ECN")};
    Header::TotalLength totalLength{i.get16Bits("total length")};
    Header::Identification identification{i.get16Bits("identification")};
    Header::Flags flags{i.get3Bits("flags")};
    uint16_t fragment{i.get5Bits("fragment offset...")};
    fragment=(fragment<<8)+i.get8Bits("... fragment offset");
    Header::FragmentOffset fragmentOffset{fragment};
    Header::TTL ttl{i.get8Bits("time to live")};
    Header::Protocol protocol{i.get8Bits("protocol")};
    Header::HeaderChecksum headerChecksum{i.get16Bits("header checksum")};
    Header::Address sourceAddress{i.get32Bits("source address")};
    Header::Address destAddress{i.get32Bits("dest address")};
    std::vector<uint32_t> options;
    for(auto j=5;j!=ihl.value();++j){
      options.push_back(i.get32Bits("options"));
    }
    return std::make_pair(
      Header(version,
             ihl,
             dscp,
             ecn,
             totalLength,
             identification,
             flags,
             fragmentOffset,
             ttl,
             protocol,
             headerChecksum,
             sourceAddress,
             destAddress,
             std::move(options)),
      i);
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "decode IPv4 header at offset " << at.currentOffset();
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}
}
}


