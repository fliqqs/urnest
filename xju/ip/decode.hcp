// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <cinttypes>
#include <sstream> //impl
#include <xju/Exception.hh>
#include <unistd.h>
#include <iosfwd>
#include <xju/format.hh> //impl
#include <xju/format.hh>
#include <string>

namespace xju
{
namespace ip
{
namespace decode
{

class Offset
{
public:
  Offset(size_t bytes,
         uint8_t bits) noexcept
      :bytes_(bytes),
       bits_(bits)
  {
    xju::assert_less(bits,8);
  }
  size_t bytes() const noexcept { return bytes_; }
  uint8_t bits() const noexcept { return bits_; }
private:
  size_t bytes_;
  uint8_t bits_;
  friend bool operator<(Offset const& x, Offset const& y) noexcept;
};

std::ostream& operator<<(std::ostream& s,Offset const& x) noexcept
{
  return s << x.bytes() << " bytes and "
           << xju::format::int_(x.bits()) << " bits";
}
Offset operator+(Offset const& x, Offset const& y) noexcept
{
  return Offset(x.bytes()+y.bytes()+(x.bits()+y.bits())/8,
                (x.bits()+y.bits())%8);
}

template<class I>
class Iterator
{
public:
  
  Iterator(I begin, I end) noexcept:
    i_(begin),
    end_(end),
    offset_({0,0})
  {
  }
  friend bool operator==(Iterator i, Iterator j) noexcept
  {
    return i.i_==j.i_;
  }
  friend bool operator!=(Iterator i, Iterator j) noexcept
  {
    return !(operator==(i,j));
  }

  // result is byte,bit-within-that-byte
  Offset currentOffset() const noexcept
  {
    return offset_;
  }

  uint8_t get1Bit(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    return getBits(1,name);
  }
  
  uint8_t get2Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    return getBits(2,name);
  }
  
  uint8_t get3Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    return getBits(3,name);
  }
  
  uint8_t get4Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    return getBits(4,name);
  }
  
  uint8_t get5Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    return getBits(5,name);
  }
  
  uint8_t get6Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    return getBits(6,name);
  }
  
  uint8_t get7Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    return getBits(7,name);
  }

  //pre: offset().second==0
  uint8_t get8Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    try{
      verifyNotAtEnd();
      xju::assert_equal(offset_.bits(),0U); //alignment check
      uint8_t const result{*i_};
      ++i_;
      offset_=offset_+Offset(1,0);
      return result;
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "read 8 bit"
        << (name.size()?" "+xju::format::quote(name):std::string("s"))
        << " having read " << offset_;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  
  //pre: offset().second==0
  uint16_t get16Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    try{
      uint16_t result{get8Bits("")};
      result=(result<<8)+get8Bits("");
      return result;
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "read 16 bit"
        << (name.size()?" "+xju::format::quote(name):std::string("s"))
        << " having read " << offset_;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
  
  //pre: offset().second==0
  uint32_t get32Bits(std::string const& name) throw(
    // at end
    xju::Exception)
  {
    try{
      uint32_t result{ get16Bits("") };
      result=(result<<16)+get16Bits("");
      return result;
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "read 32 bit"
        << (name.size()?" "+xju::format::quote(name):std::string("s"))
        << " having read " << offset_;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  bool atEnd() const noexcept
  {
    return i_==end_;
  }

  void verifyAtEnd() const throw(
    xju::Exception)
  {
    try{
      if (i_!=end_)
      {
        throw xju::Exception("not at end of input",XJU_TRACED);
      }
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "verify end of input after " << offset_;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  I at() const noexcept { return i_; }
  I end() const noexcept { return end_; }
private:
  I i_;
  I end_;
  Offset offset_; //bytes,bits(0..7)
  void verifyNotAtEnd() const throw(
    xju::Exception)
  {
    if (i_==end_)
    {
      throw xju::Exception("end of input",XJU_TRACED);
    }
  }
  //read n bits within current byte
  //pre: 0<N<8
  //pre: N<= 8-currentOffset().bits()
  uint8_t getBits(uint8_t n,std::string const& name) throw(
    // at end
    xju::Exception)
  {
    try{
      xju::assert_greater(n,0);
      xju::assert_less(n,8);
      xju::assert_less_equal(n,8-offset_.bits());//enough bits available?
      verifyNotAtEnd();
      uint8_t result{*i_};
      result=result>>(8-n-offset_.bits());
      result&=(((uint8_t)0xff)>>(8-n));
      offset_=offset_+Offset(0,n);
      if (offset_.bits()==0){
        ++i_;
      }
      return result;
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "read " << xju::format::int_(n) << " bit"
        << (name.size()?" "+xju::format::quote(name):std::string("s"))
        << " having read " << offset_;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }
};



template<class I>
Iterator<I> makeIterator(I begin,I end) noexcept
{
  return Iterator<I>(begin,end);
}

}

}
}


