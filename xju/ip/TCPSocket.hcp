// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/io/IStream.hh>
#include <xju/io/OStream.hh>
#include <xju/ip/v4/Address.hh>
#include <xju/ip/Port.hh>
#include <chrono>
#include <xju/DeadlineReached.hh>
#include <xju/Exception.hh>
#include <arpa/inet.h> //impl
#include <xju/syscall.hh> //impl
#include <errno.h> //impl
#include <xju/io/select.hh> //impl
#include <sstream> //impl
#include <xju/ip/TCPService.hh> //impl
#include <xju/assert.hh> //impl
#include <utility> //impl

namespace xju
{
namespace ip
{

namespace
{
std::pair<xju::ip::v4::Address,xju::ip::Port> getSockName(
  xju::AutoFd const& fd) throw(
    xju::Exception);
}

class TCPService;
class TCPSocket : public virtual xju::io::IStream,
                  public virtual xju::io::OStream
{
public:
  TCPSocket(std::pair<xju::ip::v4::Address,xju::ip::Port> const& connectTo,
            std::chrono::system_clock::time_point const& deadline,
            bool closeOnExec=true) throw(
              xju::DeadlineReached,
              // eg connection refused, unreachable
              xju::Exception) try:
    fd_(xju::syscall(xju::socket,XJU_TRACED)(
          AF_INET,
          SOCK_STREAM|
          (closeOnExec?SOCK_CLOEXEC:0)|
          SOCK_NONBLOCK, 0))
  {
    sockaddr_in a;
    a.sin_family=AF_INET;
    a.sin_port=::htons(connectTo.second.value());
    a.sin_addr.s_addr=::htonl(connectTo.first.value());
    try{
      xju::syscall(xju::connect,XJU_TRACED)(socket.fd(),
                                            (sockaddr*)
                                            &a,sizeof(a));
    }
    catch(xju::SyscallFailed const& e){
      if (e.errno_!=EINPROGRESS){
        throw;
      }
      if (!xju::io::select({(xju::io::Output const*)this}).size()){
        throw xju::DeadlineReached(
          xju::Exception("deadlien reached",XJU_TRACED));
      }
      int e(0);
      xju::syscall(xju::getsocketopt,XJU_TRACED)(socket.fd(),
                                                 SOL_SOCKET,
                                                 SO_ERROR,
                                                 &e,
                                                 sizeof(e));
      if (e!=0){
        throw xju::SyscallFailed("connect",e,XJU_TRACED);
      }
    }
  }
  catch(xju::Exception& e)
  {
    std::ostringstream s;
    s << "create TCP connection to host " << connectTo.first
      << ", port " << connectTo.second
      << (closeOnExec?", ":" not") << " closing connection socket on exec";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }

  TCPSocket(TCPService& listener,
            std::chrono::system_clock::time_point const& deadline,
            bool closeOnExec=true) throw(
              xju::DeadlineReached,
              // eg connection refused, unreachable
              xju::Exception) try:
      fd_(std::move(listener.accept(peerAdress_,deadline,closeOnExec))),
      localAddress_(getSockName(fd_))
  {
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "create TCP socket by accepting connection";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
    
  std::pair<xju::ip::v4::Address,xju::ip::Port> const& to_;
  
  // xju::io::Input::
  // xju::io::Output::
  std::string str() const throw()
  {
    std::ostringstream s;
    s << "TCP socket connected to "
      << to_.first()
      << " port "
      << to_.second()
      << " using local port "+xju::format::str(port_);
    return s.str();
  }

  xju::ip::Port port() const throw()
  {
    return port_;
  }
  
  
public:
  std::pair<xju::ip::v4::Address,xju::ip::Port> peerAddress_;
  xju::AutoFd fd_;

  std::pair<xju::ip::v4::Address,xju::ip::Port> localAddress_;

  // xju::io::Input::
  // xju::io::Output::
  int fileDescriptor() const throw() {
    return fd_.fd();
  }

};

namespace
{
std::pair<xju::ip::v4::Address,xju::ip::Port> getSockName(
  xju::AutoFd const& fd) throw(
    xju::Exception)
{
  sockaddr_in a;
  socklen_t l(sizeof(a));
  xju::syscall(xju::getsockname,XJU_TRACED)(fd.fd(),(sockaddr*)&a,&l);
  xju::assert_equal(l,sizeof(a));
  return std::make_pair(
    xju::ip::v4::Address(::ntohl(a.sin_addr.s_addr)),
    xju::ip::Port(::ntohs(a.sin_port)));
}

}


}
}
