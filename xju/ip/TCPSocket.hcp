// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/io/IStream.hh>
#include <xju/io/OStream.hh>
#include <xju/ip/v4/Address.hh>
#include <xju/ip/Port.hh>
#include <chrono>
#include <xju/DeadlineReached.hh>
#include <xju/Exception.hh>
#include <arpa/inet.h> //impl
#include <xju/syscall.hh> //impl
#include <errno.h> //impl
#include <xju/io/select.hh> //impl
#include <sstream> //impl
#include <xju/ip/TCPService.hh> //impl
#include <xju/assert.hh> //impl
#include <utility> //impl
#include <xju/AutoFd.hh>
#include <xju/socket.hh> //impl


namespace xju
{
namespace ip
{

namespace
{
std::pair<xju::ip::v4::Address,xju::ip::Port> getSockName(
  xju::AutoFd const& fd) /*throw(
    xju::Exception)*/;

// connect fd to specified peer
// - returns *local* address of connection
// - connection is not yet complete (need to wait till fd writable)
std::pair<xju::ip::v4::Address,xju::ip::Port> connect(
  xju::AutoFd const& fd,
  std::pair<xju::ip::v4::Address,xju::ip::Port> const& peer) /*throw(
    xju::Exception)*/;
}

class TCPService;
class TCPSocket : public virtual xju::io::IStream,
                  public virtual xju::io::OStream
{
public:
  TCPSocket(std::pair<xju::ip::v4::Address,xju::ip::Port> const& connectTo,
            std::chrono::steady_clock::time_point const& deadline,
            bool closeOnExec=true) /*throw(
              xju::DeadlineReached,
              // eg connection refused, unreachable
              xju::Exception)*/ try:
    peerAddress_(connectTo),
    fd_(xju::syscall(xju::socket,XJU_TRACED)(
          AF_INET,
          SOCK_STREAM|
          (closeOnExec?SOCK_CLOEXEC:0)|
          SOCK_NONBLOCK, 0)),
      localAddress_(connect(fd_,connectTo))
  {
    if (!xju::io::select({static_cast<Output const*>(this)},deadline).size()){
      throw xju::DeadlineReached(
        xju::Exception("deadlien reached",XJU_TRACED));
    }
    int e(0);
    unsigned int el(sizeof(e));
    xju::syscall(xju::getsockopt,XJU_TRACED)(fileDescriptor(),
                                             SOL_SOCKET,
                                             SO_ERROR,
                                             (void*)&e,
                                             &el);
    if (e!=0){
      throw xju::SyscallFailed("connect",e,XJU_TRACED);
    }
  }
  catch(xju::Exception& e)
  {
    std::ostringstream s;
    s << "create TCP connection to host " << connectTo.first
      << ", port " << connectTo.second
      << (closeOnExec?", ":" not") << " closing connection socket on exec";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }

  TCPSocket(TCPService& listener,
            std::chrono::steady_clock::time_point const& deadline,
            bool closeOnExec=true) /*throw(
              xju::DeadlineReached,
              xju::Exception)*/ try:
    peerAddress_(xju::ip::v4::Address(0),xju::ip::Port(0)),
    fd_(std::move(listener.accept(peerAddress_,deadline,closeOnExec))),
    localAddress_(getSockName(fd_))
  {
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "create TCP socket by accepting connection";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
    
  // xju::io::Input::
  // xju::io::Output::
  std::string str() const throw()
  {
    std::ostringstream s;
    s << "TCP socket connected to "
      << peerAddress_.first << " port " << peerAddress_.second
      << " using local address "
      << localAddress_.first << " port " << localAddress_.second;
    return s.str();
  }

  std::pair<xju::ip::v4::Address,xju::ip::Port> localAddress() const noexcept
  {
    return localAddress_;
  }
  std::pair<xju::ip::v4::Address,xju::ip::Port> peerAddress() const noexcept
  {
    return peerAddress_;
  }
  
private:
  std::pair<xju::ip::v4::Address,xju::ip::Port> peerAddress_;
  xju::AutoFd const fd_;
  std::pair<xju::ip::v4::Address,xju::ip::Port> const localAddress_;

  // xju::io::Input::
  // xju::io::Output::
  int fileDescriptor() const throw() {
    return fd_.fd();
  }

};

namespace
{
std::pair<xju::ip::v4::Address,xju::ip::Port> getSockName(
  xju::AutoFd const& fd) /*throw(
    xju::Exception)*/
{
  sockaddr_in a;
  socklen_t l(sizeof(a));
  xju::syscall(xju::getsockname,XJU_TRACED)(fd.fd(),(sockaddr*)&a,&l);
  xju::assert_equal(l,sizeof(a));
  return std::make_pair(
    xju::ip::v4::Address(::ntohl(a.sin_addr.s_addr)),
    xju::ip::Port(::ntohs(a.sin_port)));
}
std::pair<xju::ip::v4::Address,xju::ip::Port> connect(
  xju::AutoFd const& fd,
  std::pair<xju::ip::v4::Address,xju::ip::Port> const& connectTo) /*throw(
    xju::Exception)*/
{
  try{
    sockaddr_in a;
    a.sin_family=AF_INET;
    a.sin_port=::htons(connectTo.second.value());
    a.sin_addr.s_addr=::htonl(connectTo.first.value());
    try{
      xju::syscall(xju::connect,XJU_TRACED)(fd.fd(),
                                            (sockaddr*)
                                            &a,sizeof(a));
    }
    catch(xju::SyscallFailed const& e){
      if (e._errno!=EINPROGRESS){
        throw;
      }
    }
    return getSockName(fd);
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "initiate TCP/IP connection to "
      << connectTo.first << " port " << connectTo.second;
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}


}
}
