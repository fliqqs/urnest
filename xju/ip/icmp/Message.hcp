// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/Int.hh>
#include <xju/Array.hh>
#include <vector>
#include <xju/ip/icmp/Message.hh>
#include <xju/ip/Checksum.hh>
#include <xju/format.hh> //impl

namespace xju
{
namespace ip
{
namespace icmp
{

class Message
{
public:
  enum class Type{
    ECHOREPLY=		0,
    DEST_UNREACH=	3,
    SOURCE_QUENCH=	4,
    REDIRECT=		5,
    ECHO=		8,
    TIME_EXCEEDED=	11,
    PARAMETERPROB=	12,
    TIMESTAMP=		13,
    TIMESTAMPREPLY=	14,
    INFO_REQUEST=	15,
    INFO_REPLY=		16,
    ADDRESS=		17,
    ADDRESSREPLY=	18
  };
  class CodeTag;
  typedef xju::Int<CodeTag,uint8_t> Code;
  
  Message(Type type,
          Code code,
          Checksum checksum,
          xju::Array<uint8_t,4> const& header,
          std::vector<uint8_t> data) noexcept
      :type_(type),
       code_(code),
       checksum_(checksum),
       header_(header),
       data_(std::move(data))
  {
  }

  Message(
    Type type,
    Code code,
    Checksum checksum,
    std::pair<xju::Array<uint8_t,4>, std::vector<uint8_t> > headerAndData) noexcept
      :type_(type),
       code_(code),
       checksum_(checksum),
       header_(headerAndData.first),
       data_(std::move(headerAndData.second))
  {
  }

  Type type_;
  Code code_;
  Checksum checksum_;
  xju::Array<uint8_t,4> const header_;
  std::vector<uint8_t> data_;

  friend bool operator<(Message const& x, Message const& y) noexcept;

};

std::ostream& operator<<(std::ostream& s, Message const& x) noexcept
{
  s << "type " << (int)x.type_
    << ", code " << xju::format::int_(x.code_.value())
    << ", checksum " << xju::format::hex(x.checksum_.value()) << ", header "
    << xju::format::join(x.header_.begin(),x.header_.end(),
                         [](uint8_t x){ return xju::format::hex(x); },
                         std::string(", "))
    << ", data "
    << xju::format::join(x.data_.begin(),x.data_.end(),
                         [](uint8_t x){ return xju::format::hex(x); },
                         std::string(", "));
  return s;
}


}
}
}
