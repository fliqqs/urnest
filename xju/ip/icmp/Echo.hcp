// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/Int.hh>
#include <inttypes.h>
#include <iostream>
#include <xju/format.hh> //impl

namespace xju
{
namespace ip
{
namespace icmp
{

class Echo
{
public:
  class IdentifierTag{};
  typedef xju::Int<IdentifierTag,uint16_t> Identifier;
  class SequenceTag{};
  typedef xju::Int<SequenceTag> Sequence;

  Echo(Identifier const& identifier,
       Sequence const& sequence,
       std::vector<uint8_t> payload) noexcept
      :identifier_(identifier),
       sequence_(sequence),
       payload_(payload)
  {
  }
  Identifier identifier_;
  Sequence sequence_;
  std::vector<uint8_t> payload_;

  friend bool operator<(Echo const& x, Echo const& y) noexcept;
};
std::ostream& operator<<(std::ostream& s, Echo const& x) noexcept
{
  return s << "identifier " << xju::format::int_(x.identifier_)
           << ", sequence " << xju::format::int_(x.sequence_)
           << ", payload " << xju::format::join(
             x.payload_.begin(),x.payload_.end(),
             [](uint8_t x){ return xju::format::hex(x); },
             std::string(", "));
}

}
}
}


