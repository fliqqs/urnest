// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <unistd.h>
#include <chrono>
#include <xju/DeadlineReached.hh>
#include "xju/AutoFd.hh"

#include <sstream> //impl
#include "xju/syscall.hh"
#include "xju/socket.hh" //impl
#include "xju/io/select.hh" //impl
#include "xju/format.hh" //impl
#include <xju/ip/checksum/calculate.hh> //impl
#include <xju/ip/decode.hh> //impl
#include <xju/ip/icmp/encodeMessage.hh> //impl
#include <xju/ip/icmp/SocketIf.hh>
#include <netinet/in.h> //impl
#include <linux/icmp.h> //impl
#include <xju/ip/Checksum.hh> //impl
#include <xju/ip/checksum/validate.hh> //impl
#include <xju/ip/icmp/decodeMessage.hh> //impl
#include <sys/capability.h> //impl
#include <xju/ip/v4/decodeHeader.hh> //impl
#include <xju/io/Output.hh>

namespace xju
{
namespace ip
{
namespace icmp
{
namespace
{
void enableCapSetRaw() throw(
  xju::Exception)
{
  try{
    cap_t c{xju::syscall("cap_get_proc",cap_get_proc,XJU_TRACED,true,
                         (cap_t)0)()};
    try{
      cap_value_t f[1]={CAP_NET_RAW};
      xju::syscall("cap_set_flag",cap_set_flag,XJU_TRACED)(
        c,CAP_EFFECTIVE,1,f,CAP_SET);
      xju::syscall("cap_set_proc",cap_set_proc,XJU_TRACED)(c);
    }
    catch(...){
      cap_free(c);
      throw;
    }
  }
  catch(xju::Exception& e){
    std::ostringstream s;
    s << "enable CAP_NET_RAW capability in the current thread";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
}

}

class Socket : public SocketIf
{
public:
  // Create icmp socket, which will receive a copy of all
  // IPv4 ICMP echo reply and destination unreachable messages
  // received by host, and may send ICMP messages.
  //
  // Note caller must be CAP_NET_RAW-authorized - see capabilities(7), e.g.
  // run as root or use setcap on executable.
  //
  Socket() throw(
    xju::Exception,
    xju::SyscallFailed) try:
      fd_( (enableCapSetRaw(),xju::syscall(xju::socket,XJU_TRACED)(
            AF_INET, SOCK_RAW|SOCK_CLOEXEC|SOCK_NONBLOCK, IPPROTO_ICMP)) ),
      output_(fd_.fd()),
      input_(fd_.fd())
  {
    uint32_t o{0};
    o|=1U<<0; //echo reply
    o|=1U<<3; //destination unreachable
    o=~o; // ICMP_FILTER is "exclude"
    xju::syscall(xju::setsockopt,XJU_TRACED)(
      fd_.fd(),IPPROTO_ICMP,ICMP_FILTER,&o,sizeof(o));
  }
  catch(xju::SyscallFailed& e)
  {
    std::ostringstream s;
    s << "create ICMP-only RAW socket";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
  
  void send(
    xju::ip::v4::Address const& to,
    Message const& x,
    std::chrono::steady_clock::time_point const& deadline) throw(
      xju::SyscallFailed) override
  {
    try{
      if (xju::io::select({&output_},deadline).size()) {
        sockaddr_in dest_addr;
        dest_addr.sin_family=AF_INET;
        dest_addr.sin_port=0;
        dest_addr.sin_addr.s_addr=::htonl(to.value());

        std::vector<uint8_t> m;
        Message y{x};
        y.checksum_=Checksum(0);
        encodeMessage(y,std::back_inserter(m));
        y.checksum_=xju::ip::checksum::calculate(
          xju::ip::decode::makeIterator(m.begin(),m.end()));
        encodeMessage(y,m.begin());
        auto const bytesSent=xju::syscall(xju::sendto,XJU_TRACED)(
          fd_.fd(),
          m.data(),
          m.size(),
          MSG_NOSIGNAL,
          (sockaddr*)&dest_addr,
          sizeof(dest_addr));
        if (bytesSent<m.size()) {
          std::ostringstream s;
          s << "only sent " << bytesSent << " bytes of " << m.size();
          throw xju::DeadlineReached(xju::Exception(s.str(),XJU_TRACED));
        }
        return;
      }
      std::ostringstream s;
      s << "deadline reached before socket writable";
      throw xju::DeadlineReached(xju::Exception(s.str(),XJU_TRACED));
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "send ICMP message " << x << " to " << to;
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  std::tuple<xju::ip::v4::Address,Message> receive() throw(
    xju::SyscallFailed,
    // invalid message, e.g. incorrect checksum
    xju::Exception) override
  {
    try{
      sockaddr_in senderAddr;
      socklen_t senderAddrLen{sizeof(senderAddr)};
      std::array<uint8_t,2048> buffer;
      ssize_t const bytesRead=xju::syscall(xju::recvfrom,XJU_TRACED)(
        fd_.fd(),
        buffer.data(),buffer.size(),
        MSG_NOSIGNAL,
        (sockaddr*)&senderAddr,&senderAddrLen);
      if (senderAddrLen!=sizeof(senderAddr)){
        std::ostringstream s;
        s << "recvfrom() returned unexpected from-address length "
          << senderAddrLen << " (expected " << sizeof(senderAddr) << ")";
        throw xju::Exception(s.str(),XJU_TRACED);
      }
      try{
        xju::ip::checksum::validate(
          xju::ip::decode::makeIterator(
            buffer.begin(),buffer.begin()+bytesRead));
      }
      catch(xju::Exception& e){
        std::ostringstream s;
        s << "validate checksums in received IP+ICMP message";
        e.addContext(s.str(),XJU_TRACED);
        throw;
      }
      //our buffer gets the ip header + icmp message
      auto const h{xju::ip::v4::decodeHeader(
          xju::ip::decode::makeIterator(
            buffer.begin(),buffer.begin()+bytesRead))};
      auto const m{decodeMessage(h.second)};
      if (!m.second.atEnd()){
        std::ostringstream s;
        s << "extra "
          << (bytesRead-m.second.currentOffset().bytes())
          << " bytes after decoded ICMP message " << m.first
          << " from " << m.second.currentOffset();
        throw xju::Exception(s.str(),XJU_TRACED);
      }
      return std::make_tuple(
        xju::ip::v4::Address(::ntohl(senderAddr.sin_addr.s_addr)),
        m.first);
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "get next ICMP message assuming it has already arrived";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }

  // SocketIf::
  xju::io::Input const& input() const noexcept override
  {
    return input_;
  }

private:
  xju::AutoFd fd_;

  class Output:public xju::io::Output
  {
  public:
    int const fd_;
    
    explicit Output(int const fd) noexcept
        : fd_(fd)
    {
    }
    // xju::io::Output::
    int fileDescriptor() const throw() override {
      return fd_;
    }
    // xju::io::Output::
    std::string str() const throw() override
    {
      std::ostringstream s;
      s << "file descriptor " << fd_;
      return s.str();
    }
  };

  class Input:public xju::io::Input
  {
  public:
    int const fd_;
    
    explicit Input(int const fd) noexcept
        : fd_(fd)
    {
    }
    // xju::io::Input::
    int fileDescriptor() const throw() override {
      return fd_;
    }
    // xju::io::Input::
    std::string str() const throw() override
    {
      std::ostringstream s;
      s << "file descriptor " << fd_;
      return s.str();
    }
  };

  Output output_;
  Input input_;
};


}
}
}


