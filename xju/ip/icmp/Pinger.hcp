// Copyright (c) 2018 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


namespace xju
{
namespace ip
{
namespace icmp
{

// multi-address monitor
class Pinger
{
public:
  class Collector
  {
  public:
    // address responded
    // - retry is how many failures we had before it responded
    //   (which will be <= maxRetries)
    // - rtt covers only the successful ping
    virtual void pinged(xju::ip::v4::Address const& address,
                        unsigned int retry,
                        std::chrono::nanoseconds rtt) = 0;
    //
    // address failed to respond within timeoutPerRetry,
    // 1+maxRetries times in a row
    //
    virtual void timeout(xju::ip::v4::Address const& address) = 0;

    //
    // address is unreachable according to gatewayOrHost
    //
    virtual void unreachable(xju::ip::v4::Address const& address,
                             xju::ip::v4::Address const& gatewayOrHost,
                             xju::ip::icmp::Message::Code code) = 0;


    //
    // socket xju::ip::icmp::SocketIf::send failed
    //
    virtual void sendFailed(xju::Exception) = 0;

    //
    // socket xju::ip::icmp::SocketIf::receive failed, or the message
    // it returned was not a valid ICMP message
    //
    virtual void receiveFailed(xju::Exception) = 0;
  };

  // see run
  // pre: nominalPacketRate>0
  Pinger(xju::ip::icmp::SocketIf& socket,
         Collector& collector,
         xju::icmp::Echo::Identifier const identifier,
         xju::icmp::Echo::Sequence const firstSequence,
         std::set<xju::ip::v4::Address> const& addresses,
         double const nominalPacketRate,
         unsigned int const maxRetries,
         std::chrono::nanoseconds const timeoutPerRetry) noexcept
      :socket_(socket),
       collector_(collector),
       identifier_(identifier),
       firstSequence_(firstSequence),
       nominalPacketRate_(nominalPacketRate),
       maxRetries_(maxRetries),
       timeoutPerRetry_(std::max(std::chrono::nanoseconds(1),timeoutPerRetry)),
       stopReceiving_(xju::pipe()),
       currentSequence_(firstSequence.value()),
       changed_(guard_),
       stop_(false)
  {
    for(auto address: addresses){
      targets_.insert({address,timers.end()});
    }
    xju::assert_greater(nominalPacketRate,0.0);
  }

  // Use socket to ping addresses, round-robin, sending
  // Echo requests at nominal packet rate (or less if that
  // would produce overlapping pings to the same address), feeding
  // results (success/failure of each ping) to collector.
  //
  // Responses are waited for asynchronously, so that multiple
  // requests may be outstanding at any time, however an individual
  // address is never pinged before its previous ping attempt times out
  // (address is skipped if it's contact attempt from previous round
  // has not completed).
  //
  // Declares success on successful response; retries ping to an
  // address maxRetries times before declaring failure for that
  // address (the address is not then tried again until next round).
  // Retries occur immediately (not waiting until the next round).
  //
  // timeoutPerRetry is raised to 1 if it is <1; note that operating
  // system limitations might result in response arriving before
  // operating system minimum sleep time, in which case the ping is
  // considered successful even though it exceeded timeoutPerRetry
  //
  void run() noexcept
  {
    xju::Lock l(guard);

    if (!targets_.size()){
      while(!stop_){
        changed_.wait(l);
      }
      return;
    }

    xju::Thread receiverThread{
      [&]{ runReceiver(); },
      [&]{ stopReceiving_.second->write('x',1U,0); }};

    xju::Thread runAlarmClockThread{[&]{ runAlarmClock(); }};

    std::chrono::nanoseconds const step{(uint64_t)(1.0e9/nominalPacketRate_)};

    auto t(std::chrono::steady_clock::now());

    for(auto i{targets_.begin()}; !stop_;
        i=(xju::next(i)==targets_.end()?
           (currentSequence_+=(maxRetries_+1),targets_.begin()):
           xju::next(i)))
    {
      if ((*i).second==requests_.end()){
        try{
          socket_.send((*i).first,
                       xju::icmp::encodeEcho(
                         identifier_,
                         currentSequence_,
                         std::vector<uint8_t>()));
          (*i).second=requests.insert(
            std::make_pair(
              t+timeoutPerRetry_,
              Request((*i).first,
                      0,
                      xju::icmp::Echo::Sequence(currentSequence_),
                      t)));
          changed_.signal(l);
        }
        catch(xju::Exception const& e){
          collector_.sendFailed(e);
        }
      }
      changed_.wait(l,step);
      t+=step;
    }
  }

  // cause run() to return immediately (well, soon)
  void stop() noexcept
  {
    xju::Lock l(guard_);
    stop_=true;
    changed_.signal(l);
  }

private:
  xju::ip::icmp::SocketIf& socket_;
  Collector& collector_;
  xju::icmp::Echo::Identifier const identifier_;
  xju::icmp::Echo::Sequence const firstSequence_;
  std::set<xju::ip::v4::Address> const addresses_;
  double const nominalPacketRate_;
  unsigned int const maxRetries_;
  std::chrono::nanoseconds const timeoutPerRetry_;

  struct Request
  {
    Request(xju::ip::v4::Address const& address,
            unsigned int const retryNumber,
            xju::icmp::Echo::Sequence const sequence,
            std::chrono::steady_clock::time_point const sentAt) noexcept
        :address_(address),
         retryNumber_(retryNumber),
         sequence_(sequence),
         sentAt_(sentAt)
    {
    }
    xju::ip::v4::Address address_;
    unsigned int retryNumber_;
    xju::icmp::Echo::Sequence sequence_;
    std::chrono::steady_clock::time_point sentAt_;
  };
  typedef std::multimap<std::chrono::steady_clock::time_point, //deadline
                        Request const> Requests;
  
  std::pair<std::unique_ptr<xju::io::IStream>,
            std::unique_ptr<xju::io::OStream> > stopReceiving_;
  
  mutable xju::Mutex guard_; //guards remaining attributes
  std::map<xju::ip::v4::Address,Requests::iterator> targets;
  uint16_t currentSequence_;
  xju::Condition changed_;   //signals change to remaining attributes
  bool stop_;
  Requests requests_;

  void runAlarmClock() noexcept
  {
    xju::Lock l(guard_);
    while(!stop_)
    {
      auto now{std::chrono::steady_clock::now()};
      for(auto i=requests_.begin();
          i!=requests_.end() && (*i).first<=now;
          requests_.erase(i),i=requests_.begin()){
        Request request{(*i).second};
        if (request.retryNumber<maxRetries_){
          ++request.retryNumber;
          ++request.sequence_;
          try{
            socket_.send(request.address_,
                         xju::icmp::encodeEcho(
                           identifier_,
                           request.sequence_,
                           std::vector<uint8_t>()));
            request.sentAt_=now;
            (*targets_.find(request.address_)).second=requests_.insert(
              std::make_pair(now+timeoutPerRetry_,request));
          }
          catch(xju::Exception const& e){
            collector_.sendFailed(e);
            (*targets_.find(request.address_)).second=requests_.end();
          }
        }
        else{
          collector_.timeout(request.address_);
          (*targets_.find(request.address_)).second=requests_.end();
        }
      }
      if (times.size()){
        changed_.wait(l,(*timers.begin()).first-now);
      }
      else{
        changed_.wait(l);
      }
    }
  }
  void runReceiver() noexcept
  {
    std::set<xju::io::Input const*> const inputs{
      stopReceiving_.first.get(),
      &socket_};
    while(true){
      std::chrono::nanoseconds sleepFor{std::chrono::years(1)}; //arbitrary
      auto const readable{xju::io::select(inputs,sleepFor)};
      if (readable.find(stopReceiving_.first.get())){
        return;
      }
      if (readable.find(&socket_)){
        try{
          auto const r(socket_.receive());
          xju::ip::v4::Address const& from(r.get<0>());
          Message const& message(r.getsecond);
          if (message.type_==Message::Echo){
            xju::Lock l(guard_);
            auto i(targets_.find(address));
            if (i!=targets_.end()){
              if ((*i).second != requests_.end()){
                Request const& request{(*(*i).second)};
                Echo const echo{decodeEcho(message)};
                if (echo.identifier_==request.identifier_ &&
                    echo.sequence_==request.sequence_){
                  collector_.pinged(
                    address,
                    request.retryNumber_,
                    std::chrono::steady_clock::now()-request.sentAt_);
                  requests_.erase((*i).second);
                }
              }
            }
          }
          else if (message.type_==icmp::Message::DestinationUnreachable){
            auto const u{decodeDestinationUnreachable(message)};
            auto const h{xju::ip::v4::decodeHeader(u.data_.begin(),
                                                   u.data_.end())};
            if (h.first.protocol_== 1 /*ICMP*/){
              auto const& address{h.first};
              auto i(targets_.find(address));
              if (i!=targets_.end()){
                if ((*i).second != requests_.end()){
                  Request const& request{(*(*i).second)};
                  // destination unreachable data only has 8 bytes of
                  // original message but that always gives us a complete
                  // ICMP header i.e. will always decode
                  auto const icmpMessage{decodeMessage(
                      h.second,u.data_.end())};
                  if (icmpMessage.type_==Message::Echo){
                    auto const echo{decodeEcho(icmpMessage)};
                    if (echo.identifier_==request.identifier_ &&
                        echo.sequence_==request.sequence_){
                      collector_.unreachable(
                        address,
                        h.first.from_,
                        u.code_);
                    }
                  }
                }
              }
            }
          }
        }
        catch(xju::Exception const& e){
          collector_.receiveFailed(e);
        }
      }
    }
  }
};

}
}
}


