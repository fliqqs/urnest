// Copyright (c) 2017 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//

#include <xju/ip/Port.hh>
#include <xju/ip/v4/Address.hh>
#include <xju/ip/PortInUse.hh>
#include <xju/SyscallFailed.hh>
#include <xju/io/Input.hh>
#include <xju/Optional.hh>
#include <xju/AutoFd.hh>
#include <xju/syscall.hh> //impl
#include <arpa/inet.h> //impl
#include <xju/socket.hh> //impl
#include <utility> //impl
#include <sstream> //impl

namespace xju
{
namespace ip
{
namespace
{
// bind to specified, non-zero port
// - returns bound port
xju::ip::Port bindToPort(
  xju::AutoFd const& socket,
  xju::Optional<xju::ip::v4::Address> const& localAddress,
  xju::ip::Port const& port,
  bool const reuseAddr) throw(
    xju::ip::PortInUse,
    xju::SyscallFailed)
{
  if (port==Port(0)){
    throw xju::Exception("0 is not a valid ip port number");
  }
  int v(reuseAddr);
  xju::syscall(xju::setsockopt,XJU_TRACED)(socket.fd(),SOL_SOCKET,SO_REUSEADDR,
                                           &v,sizeof(v));
  sockaddr_in a;
  try{
    a.sin_family=AF_INET;
    a.sin_port=::htons(port.value());
    a.sin_addr.s_addr=
      localAddress.get()?::htonl(localAddress.value()):INADDR_ANY;
    xju::syscall(xju::bind,XJU_TRACED)(socket.fd(),(sockaddr*)&a,sizeof(a));
  }
  catch(xju::Syscallfailed const& e){
    if (e.errno_==EADDRINUSE) {
      throw xju::ip::PortInUse(e);
    }
    throw;
  }
  return port;
}

// bind to an unusd port
// - returns bound port
xju::ip::Port bindToPort(
  xju::AutoFd const& socket,
  xju::Optional<xju::ip::v4::Address> const& localAddress,
  bool const reuseAddr) throw(
    xju::SyscallFailed)
{
  int v(reuseAddr);
  xju::syscall(xju::setsockopt,XJU_TRACED)(socket.fd(),SOL_SOCKET,SO_REUSEADDR,
                                           &v,sizeof(v));
  sockaddr_in a;
  a.sin_family=AF_INET;
  a.sin_port=::htons(0);
  a.sin_addr.s_addr=
    localAddress.get()?::htonl(localAddress.value()):INADDR_ANY;
  xju::syscall(xju::bind,XJU_TRACED)(socket.fd(),(sockaddr*)&a,sizeof(a));

  socklen_t l(sizeof(a));
  xju::syscall(xju::getsockname,XJU_TRACED)(socket.fd(),(sockaddr*)&a,&l);
  xju::assert_equal(l,sizeof(a));
  return xju::ip::Port(::ntohs(a.sin_port));
}

}

class TCPService : public virtual xju::io::Input
{
public:
  TCPService(std::pair<xju::ip::v4::Address,xju::ip::Port> const& listenOn,
             unsigned int backlog,
             bool reuseAddr,
             bool closeOnExec=true) throw(
               xju::ip::PortInUse,
               xju::SyscallFailed) try:
    fd_(xju::syscall(xju::socket,XJU_TRACED)(
          AF_INET,
          SOCK_STREAM|
          (closeOnExec?SOCK_CLOEXEC:0)|
          SOCK_NONBLOCK, 0)),
    localAddress_(listenOn.first),
    port_(bindToPort(fd_,listenOn.first,listenOn.second,reuseAddr))
  {
    xju::syscall(xju::listen,XJU_TRACED)(socket.fd(),backlog);
  }
  catch(xju::Exception& e)
  {
    std::ostringstream s;
    s << "create TCP listener socket listening on local address "
      << listenOn.first
      << ", local port " << listenOn.second
      << (reuseAddr?", ":", not") << " allowing local port re-use"
      << (closeOnExec?", ":" not") << " closing socket on exec";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
/*
  TCPService(xju::ip::Port const& listenOn,
             unsigned int backlog,
             bool reuseAddr,
             bool closeOnExec=true) throw(
               xju::ip::PortInUse,
               xju::Exception)
  {
  }

  // choose a port not already in use
  TCPService(xju::ip::v4::Address const& listenOn,
             unsigned int backlog,
             bool closeOnExec=true) throw(
               xju::Exception)
  {
  }
*/

  // choose a port not already in use, listen on all local addresses
  TCPService(unsigned int backlog,
             bool reuseAddr=false,
             bool closeOnExec=true) throw(
               xju::Exception) try:
    fd_(xju::syscall(xju::socket,XJU_TRACED)(
          AF_INET,
          SOCK_STREAM|
          (closeOnExec?SOCK_CLOEXEC:0)|
          SOCK_NONBLOCK, 0)),
      port_(bindToPort(fd_,xju::Optional<xju::ip::v4::Address>(),reuseAddr))
  {
    xju::syscall(xju::listen,XJU_TRACED)(socket.fd(),backlog);
  }
  catch(xju::Exception& e)
  {
    std::ostringstream s;
    s << "create TCP listener socket listening on local address "
      << listenOn.first
      << ", local unused port "
      << (reuseAddr?", ":", not") << " allowing local port re-use"
      << (closeOnExec?", ":" not") << " closing socket on exec";
    e.addContext(s.str(),XJU_TRACED);
    throw;
  }
  {
  }

  xju::Optional<xju::ip::v4::Address> const& localAddress() const noexcept
  {
    return localAddress_;
  }
  xju::ip::Port port() const noexcept
  {
    return port_;
  }
  
  std::string str() const throw()
  {
    std::ostringstream s;
    s << "TCP listener socket listening on "
      << (localAddress_.valid()?
          xju::format::str(localAddress_.value()):
          std::string(" all local addresses"))
      << ", port " << port_;
    return s.str();
  }

  friend class TCPSocket;

private:
  xju::AutoFd fd_;

  xju::Optional<xju::ip::v4::Address> localAddress_;
  xju::ip::Port port_;
  
  // xju::io::Input::
  int fileDescriptor() const throw() {
    return fd_.fd();
  }

  
  AutoFd accept(std::pair<xju::ip::v4::Address,xju::ip::Port>& peerAddress,
                std::chrono::system_clock::time_point const& deadline.
                bool closeOnExec) throw(
                  xju::DeadlineReached,
                  xju::Exception)
  {
    try {
      do{
        if (deadline>std::chrono::system_clock::now()){
          xju::io::select({(xju::io::Input*)this},deadline);
        }
        try{
          sockaddr_in a;
          AutoFd result(xju::syscall(::accept4,XJU_TRACED)(
                          fileDescriptor(),
                          &a,
                          sizeof(a),
                          SOCK_NONBLOCK|
                          (closeOnExec?SOCK_CLOEXEC:0)));
          peerAddress.first=xju::ip::v4::Address(::ntohl(a.sin_addr.s_addr));
          peerAddress.second=xju::ip::Port(::ntohs(a.sin_port));
          return std::move(result);
        }
        catch(xju::SyscallFailed const& e){
          switch(e.errno_){
          case EAGAIN:
            if (deadline<=std::chrono::system_clock::now())
            {
              throw xju::DeadlineReached(
                xju::Exception("deadline reached before connection arrived",
                               XJU_TRACED));
            }
            break;
          default:
            throw;
          }
        }
      }
      while(true);
    }
    catch(xju::Exception& e){
      std::ostringstream s;
      s << "accept connection on " << (*this) << " by specified deadline";
      e.addContext(s.str(),XJU_TRACED);
      throw;
    }
  }


};

}
}
