// Copyright (c) 2019 Trevor Taylor
//
// Permission to use, copy, modify, distribute and sell this software
// and its documentation for any purpose is hereby granted without fee,
// provided that the above copyright notice appear in all.
// Trevor Taylor makes no representations about the suitability of this
// software for any purpose.  It is provided "as is" without express or
// implied warranty.
//


#include <xju/ip/Port.hh>
#include <xju/Optional.hh>
#include <utility> //impl
#include <xju/uri/Host.hh>
#include <xju/uri/UserInfo.hh>
#include <iostream>

namespace xju
{
namespace uri
{

class Authority
{
public:
  Authority(Host host,
            xju::Optional<xju::ip::Port> port,
            xju::Optional<UserInfo> userInfo) noexcept:
      host_(std::move(host)),
      port_(std::move(port)),
      userInfo_(std::move(userInfo))
  {
  }
  Host host_;
  xju::Optional<xju::ip::Port> port_;
  xju::Optional<UserInfo> userInfo_;

  friend std::ostream& operator<<(std::ostream& s, Authority const& x) noexcept
  {
    if (x.userInfo_.valid()){
      s << x.userInfo_.value() << "@";
    }
    s << x.host_;
    if (x.port_.valid()){
      s << ":" << x.port_.value();
    }
    return s;
  }
  friend bool operator<(Authority const& x, Authority const& y) noexcept;
};


}
}
