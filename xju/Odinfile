%all==%all.tree:leaves

%all.tree==<<
%tests.tree
base64%tests.tree
file%tests.tree
io%tests.tree
ip%tests.tree
json%tests.tree
net%tests.tree
crypt%tests.tree
set%tests.tree
snmp%tests.tree
ssh%tests.tree
uri%tests.tree
utf8%tests.tree
test%tests.tree
%tags

%tests.tree == <<
()+cmd=(%test-doCmd):exec.output
()+cmd=(test-Array.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-AutoFd.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-ByteBuffer.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Condition.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-EventClient.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Exception.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Float.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Holder.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Int.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-JoiningIterator.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MemIBuf.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MemOBuf.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MinAlign.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MMap.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Notifying.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-NotifyingList.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Observer.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-ObserverP.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Optional.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Ring.cxx+(..%cxx-opts)+o_src_suffix=.cc .cxx:auto.cxx.exe):exec.output
()+cmd=(test-Subprocess.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Thread.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Traced.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Utf8String.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-check_types_related.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-countSignificantBits.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-endsWith.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-eternity.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-file.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-format.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-functional.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-io.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-ip.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-path.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-pipe.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-readThrough.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-seq_less.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-split.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-startsWith.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToDouble.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToFloat.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToInt.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToTime.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToUInt.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-strip.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-syscall.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-unix_epoch.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-xml.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=test '-s' (%test-check_types_related_2_err):exec.output
()+cmd=(print-wordsizes.cc+(..%cxx-opts):auto.cxx.exe):exec.output
netflow%tests.tree
%py-tests.tree:leaves

%py-tests.tree==<<
(test-xn.py)+(%py-opts):py3.exec.output
(test-jsonschema.py)+(%py-opts):py3.exec.output
(test-pq.py)+(%py-opts):py3.exec.output
(test-cmc.py)+(%py-opts):py3.exec.output
%verify-test-cmc.x1-fail
(wal%all)
(cmc%all)

%verify-test-cmc.x1-fail==(%test-cmc.x1.errs)+cmd=grep -q '"Cannot determine consistent method resolution order"':stdout

%test-cmc.x1.errs==(test-cmc.x1.py)+(%py-opts):py3.exec.output:err

%py-opts==<<
+py_sp=(..)

%test-check_types_related_2_err==test-check_types_related_2.cc+(..%cxx-opts):auto.cxx.exe:err

%test-doCmd==test-doCmd.cc+(..%cxx-opts):auto.cxx.exe

%stress-test-doCmd! == (.)+cmd=(%repeat-test.sh) '1000' (%test-doCmd) :run

%repeat-test.sh == ! <<
#!/bin/sh
count="$1" && shift &&
echo "$count x " "$@" &&
i=0 &&
while [ $? = 0 ] && [ $i != $count ]
do
  "$@" &&
  i=$((i+1))
done

%hcp-opts == <<
+(..%hcp-opts)

%hcp-gen==%hcp-gen.vir_dir_specs:list:cat:vir_dir

%hcp-gen.vir_dir_specs==<<
%hcp-local-spec
%hcp-subdir-spec

%hcp-local-spec==.:dir.hcp.list+(%hcp-opts)+hpath='xju':hcp-split-virdir-specs:cat

%hcp-subdir-spec==<<
%base64==./base64/Odinfile%hcp-gen
%file==./file/Odinfile%hcp-gen
%http==./http/Odinfile%hcp-gen
%io==./io/Odinfile%hcp-gen
%ip==./ip/Odinfile%hcp-gen
%json==./json/Odinfile%hcp-gen
%linux==./linux/Odinfile%hcp-gen
%crypt==./crypt/Odinfile%hcp-gen
%net==./net/Odinfile%hcp-gen
%netflow==./netflow/Odinfile%hcp-gen
%set==./set/Odinfile%hcp-gen
%snmp==./snmp/Odinfile%hcp-gen
%ssh==./ssh/Odinfile%hcp-gen
%test==./test/Odinfile%hcp-gen
%tls==tls/Odinfile%hcp-gen
%uri==./uri/Odinfile%hcp-gen
%utf8==./utf8/Odinfile%hcp-gen

%test-getHostName==()+cmd=(%test-getHostName.sh) (test-getHostName.cc+(..%cxx-opts):auto.cxx.exe):exec.output

%test-getHostName.sh == ! <<
#!/bin/sh
"$1" $(hostname)

%idl-gen==%idl-gen.vir_dir_specs:list:cat:vir_dir

%idl-gen.vir_dir_specs==<<
%idl-local-spec
%idl-subdir-spec

%hcp-opts==<<
+(..%hcp-opts)

%idl-local-spec==.:dir.idl.list+(%hcp-opts)+hpath='xju':omnicxy.virdir-specs:cat

%idl-subdir-spec==<<
%linux==./linux/Odinfile%idl-gen

%tags==%all.list-of-tags:merged-tags

%all.list-of-tags==<<
.:merged-tags
base64%tags
ethernet%tags
file%tags
http%tags
io%tags
ip%tags
json%tags
linux%tags
crypt%tags
net%tags
netflow%tags
set%tags
snmp%tags
ssh%tags
test%tags
tls%tags
uri%tags
utf8%tags

%test-py-exit.sh== ! <<
#!/bin/sh
status=$(cat "$1")
if [ $status != "1" ]
then
  echo "expected exit code 1, got $status" >&2 &&
  false
fi &&
errors=$(cat "$2") &&
if [ "$errors" != "not found" ]
then
  echo "$errors != 'not found'" >&2 &&
  false
fi

%test-py-exit.exec==(test-py-exit.py)+(%py-opts):py3.exec

%test-py-exit==()+cmd=(%test-py-exit.sh) (%test-py-exit.exec/status) (%test-py-exit.exec/output):stdout
