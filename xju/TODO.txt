- example https app:
  - login -> session = process running as that user getpwnam_r,setuid
    getgrnam_r can check user is member of group    
  - simple page to show real uid, gid, umask, pcap
  

- xju::Mutex,Lock,Condition
  x use c++ std::mutex, std::unique_lock<std::mutex>, std::condition_variable
  - provide std-style wait_until, wait_for
  - test wait_until(xju::steadyEternity) ...BROKEN
    - fix is easy - explicit test for xju::steadyEternity
    - same fix needed for io::select
    
- Mutex constexpr

- snmp NoSuchObject,NoSuchInstance oid is redundant (twice?) (email)

- what to do about operator<<(std::ostream& s,X) noexcept
  ... when s could throw?

- xju::test:
  x top-side
  - top-side async wrapper:
    - deadline always
    - .result()?
  - stub generator
  - free function support (function pointers)
  - is calls() actually const?
  
snmp/README.txt stuff

xju/http http1.1 - rfc7230, rfc7231
  x %-encoded handling... should we decode/encode anything? e.g.
    encode xju::path::AbsPath when formatting xju::http::RequestTarget? In
    which case should we decode when parsing request line? But if
    encoding/decoding do we always do utf-8? Or do we leave it entirely to
    application? I think leave entirely to application.
    x actually decode/encode is better:
      x uri level: all, but only encode disallowed chars for each field type
  - timeout exceptions come from istream exception passed through untouched
    REVISIT: exceptions in general v istream, ostream, adapt? pass through?
             how to specicify?
  - std::bad_alloc for out-of-memory
  - all other exceptions are "mal-formed", with specific exceptions where
    rfc7230 calls for specific action by client/server
  x parseRequestLine(istream,max) -> (method,target,http-version)
    x readThrough(istream,"\r\n",max) then parse and decode components
    x parseRequestTarget
      x code
      x test decoding
      x test 4 variants
      x test errors
      ~ normalise path e.g. a/b/ same result as a/b? No, we can't
        interpret path in general; can only really normalise if have
	whole uri
  x parseStatusLine(istream,max) -> (http-version,status-code,reason)
  x parseHeaders(istream,max) -> headers
  x copyBody(istream,size) -> body
  x copyUnboundedBody(istream,maxSize) -> body   // to eof
  x copyChunk(istream,maxSize) -> (data, ext)
      x no data means last chunk
  ~ copyTrailers(istream,maxSize) -> trailers
      x can use parseHeaders? Yes.
  - parseRequest(istream,maxRequestLine,maxHeaders,maxBody,maxExt) ->
      (method,target,http-version,headers,body)
      throw( specific exceptions for crazy rules)
      -- applies all crazy rules, de-chunks...
      - maybe such a function is not valuable; might be better programming
        applications at the lower level?
  - parseResponse(istream,requestMethod,requestTarget,requestHeaders,maxResponseSize) ->
      (http-version,status-code,reason,headers,body)
      throw( specific exceptions for crazy rules)
      -- applies all crazy rules including validation, de-chunks
      - even this one is dodgy? response might be out of order? what do rfcs
        have to say about concurrent requests?
      - std::string readThrough(istream,term,max) throw(TooBig)
         - read to and including first occurrance of term
         - resulting string ends with term
         - can headers ever have embedded (escaped) CRLF? NO.

      x cont is '[ \t]*(^CRLF)*CRLF', join parts with ' '
  - deflate
    deflateInit
    deflateSetHeader
    n x deflate
    deflateEnd
    ... only need to support on client side and only to inflate; in most
    cases only need to deflate once completely read. Or feed chunks
    in and save inflated to file?
    - but would be nice to keep pre-loaded deflated static stuff (html, js,
      css) deflated in memory
      
  - ostream
    - encodeRequestLine(ostream,method,target,http-version)
    - encodeStatusLine(ostream,http-version,status-code,reason)
    - encodeHeaders(ostream,headers)
    - encodeBody(ostream,headers,body)
    - encodeChunk(ostream,data,ext)
    - encodeLastChunk(ostream,ext,trailers)
    - encodeResponse(ostream,http-version,status-code,reason,headers,body)
    - encodeResponse(ostream,http-version,status-code,reason,headers,body)

  
http new versions
web sockets
  
- bring hcp parser generics back into xju, leaving behind c++ specifics

Int,Float add operator* operator/
Float add math functions exp, sqrt, log, floor, ceiling etc

- Tagged<string> template specialisation add startsWith and endsWith?

test-format add format::octal tests for int, long, long long

x add AbsFile and AbsDir typedefs in xju::path.hh and
x use them in xju::file::* ... and in xju::io::*

- add hcp::path::makeRelative

- way to get string-to-Float<Tag,float,E> by calling stringToFloat
  and string-to-Float<Tag,double,E> by calling stringToDouble

- io
  - add stat(dir),ls

x Thread
  - optional stack size as percent of default to be more cross-platform?
  - optional rt prio, or prio value? (might be better to create a RTThread
    class?)
  
x get rid of xju::Shared, use std::shared_ptr

io::Input
io::Output
  x pure interfaces
  x pair<std::set<ref<Input>>,std::set<ref<Output>>> 
      io::select(std::set<ref<Input>>,std::set<ref<Output>>,Time until)
  x close on exec
  x other fd and socket options? eg udp Don't Fragment, use constructed objects
  x dup2, perhaps:
    IStream::useAsStdin, OStream::useAsStdout, OStream::useAsStderr

- io:
  - DirectoryObserver
  
  x break up io.hcp into io/xxx with aggregation like snmp.hh
  x pipe()
  - SocketPair, like pipe
  - UnixListener,UnixSocket - like TCPListener,TCPSocket
  - MessageQueue (linux allows select)
  - Ethernet
  - istreambuf for IStream (maybe rename that to InputStream)
  - ostreambuf for OStream
  
- ip:
  / TCPListener : Input
  / TCPSocket : IStream,OStream
  x UDPSocket
  - TLSSocket
    - give listener SNI info and whether to request cert for each server it
      supports? Plus a single default "requestClientCertificate"
    
    - alt might be a Crypter that handles multiple sockets, with the
      Crypter having a run method?
      TLSSocket(TCPListener,TLSCrypter&);
        ssl = SSL_new(ctx);
        SSL_set_bio(p->ssl, p->rbio, p->wbio);
      TLSSocket(TCPSocket,TLSCrypter&);
        ssl = SSL_new(ctx);
        SSL_set_bio(p->ssl, p->rbio, p->wbio);
        SSL_set_connect_state(p->ssl);
      each direction is like a byte stream e.g. write:
        SSL_set_fd can set a non-blocking fd
	SSL_connect/SSL_accept then becomes non-blocking, returning
	  SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE to indicate
	  what to select for before calling SSL_connect again
        SSL_read_ex, SSL_write_ex, SSL_shutdown too

        SSL_shutdown (but not after error)
	SSL_read() will indicate the end of the peer data (i.e. peer shutdown)
	by returning <= 0 and SSL_get_error() returning SSL_ERROR_ZERO_RETURN.

        SSL_get_peer_certificate
	SSL_get_verify_result

        TLSSocket
          TLSSocket(TCPSocket,TLSCrypto&,size_t bufferSize=1472);
	    SSL_new (std::unique_ptr?)
	    SSL_set_fd (does not take ownership)
	    SSL_connect
	    SSL_do_handshake
            SSL_get_peer_certificate
	    SSL_get_verify_result

          TLSSocket(TCPListener,TLSCrypto&,size_t bufferSize=1472);
	    SSL_new
	    SSL_set_verify with SSL_VERIFY_PEER
	    SSL_set_fd
	    SSL_accept
	    SSL_do_handshake
            SSL_get_peer_certificate
	    SSL_get_verify_result

          xju::Optional<std::pair<Cert,bool> > peerCert() const noexcept;
	  
          void close()
	    SSL_shutdown
	    SSL_read
	  
          ~TLSSocket()
	    if (!SSL_get_error() has returned SSL_ERROR_SYSCALL or
	        SSL_ERROR_SSL)
	    try{
	      close();
	    }
	    catch(xju::Exception const&)
	    {
	    }
	    SSL_free

          std::deque<uint8_t> inbound_;
	  std::deque<uint8_t> outbound_;
	  decltype(xju::pipe(true,true)) input_;
	  decltype(xju::pipe(true,true)) output_;
	  std::unique_ptr<SSL,xxx> ssl_;
	  TCPSocket socket_;
        crypto would do:
	  readable: socket_ if !inbound.full() +
	            output_.first.get() if !outbound.full()
	  writable: socket_ if !outbound.empty() +
	            output_.second.get() if !inbound.empty()
	  if (socket_.readable()){
	    n=SSL_read(

      - both allow access to other end cert and its validity
      
  x udp DSCP via IP_TOS option (per packet)
  x udp receieve drops via SO_RXQ_OVFL socket option (see socket(7)),
    provide read-only counter
  
  - add ipv6 support
  - maybe an abstract class hierarchy
      Socket
        IPSocket
	  TCPSocket
          TCPListener
	  UDPSocket
      ... to capture socket options at different levels?

  - istream implementation with movable deadline
  - ostream implementation with movable deadline
  
- make syscall turn ENOMEM into std::bad_alloc
- move xju::SyscallFailed to SyscallFailed.hh

~ move eg unistd functions into eg xju::unistd:: to allow higher level implementations (eg see pipe)? No, pretty much no clashes



gcc 5.2.0:

  504  xzcat gmp-6.0.0a.tar.xz | tar xf -
  505  xzcat mpfr-3.1.3.tar.xz | tar xf -
  508  gunzip -c mpc-1.0.3.tar.gz | tar xf -
  514  cd gmp-6.0.0
  515  ./configure --prefix=/home/xju/gcc-5.2.0-run
  516  make && make install
  517  make check
  521  cd ../mpfr-3.1.3
  524  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  525  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  526  cd ../mpc-1.0.3
  528  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  529  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  530  cd ../gcc-5.2.0
  533  sudo aptitude install zip
  531  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run -with-mpc=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run --disable-multilib
  536  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
