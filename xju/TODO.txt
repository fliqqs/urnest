- libssh2
    * what uses RSAClient? implement and test it
      kexers/DhGroup1SHA1Client.hcp
      ... toward Session, which needs ClientAlgorithms, which needs:

      - examples/read-openssh-rsa-key-files
        read private and public keys, sign and verify a message
          libssh2 file_read_publickey reads id_rsa.pub
          openssh sshkey.c:
  	  case KEY_RSA:
		if ((ret = sshbuf_put_cstring(b, typename)) != 0 ||
		      POKE_U32 len = 32bit big-endian unsigned int
		      then bytes verbatim
		    (ret = sshbuf_put_bignum2(b, rsa_e)) != 0 ||
		      32bit big-endian unsigned (with leading zero if nec)
		      note xju::crypt::I::value() adds leading zero if nec
		    (ret = sshbuf_put_bignum2(b, rsa_n)) != 0)
		      32bit big-endian unsigned (with leading zero if nec)
                ... but we do not no keysize? must not need it at least for
		public key.
      - test kex via "examples/exchange-keys-rsa host-rsa-public-key-file"
      -  session host-rsa-public-key-file"
        which would establish a session with localhost sshd

    see ssh2_echo.c in examples
    just want ssh2/Client(xju::ip::v4::Address,xju::ip::Port,
                          xju::Path::AbsPath publicKey,
			  xju::Path::AbsPath privateKey,
			  std::chrono::steady_clock::time_point deadline);
	std::tuple<std::string,std::string> doCmd(deadline)->stdout,stderr
	... but what do we do on timeout? We should cancel but that
	will take time, how long do we wait? If cancel succeeds it's
	probably ok to keep using the session (Client) but if it times out
	we should really call it fatal and close the Client and connection.
	Trouble is libssh2 has no "abort", you cannot free all resources
	while x_free returns EAGAIN - that is very poor, it means you
	cannot avoid a memory leak if the other end is recalcitrant i.e. this
	is a DOS vector. What to do? raise a bug? implement a fix?
	implement ssh2 at lower level?

      - pubkey auth
      - constructor connects, with timeout
    - when would session_free block/how to avoid:
      session->free_state
        libssh2_NB_state_idle -> libssh2_NB_state_created
	  - free each channel (channel_free)
	  - free each listener (listener_free)
	  ... so if none of either then will not block

    ssh 4251 transport 4253:
      / handShake(preamble,softwareId,comment,xju::net::istream,xju::net::ostream)->softwareId,comment,preamble
      exchangeKeys(pkAlgorithmNames,kexMethodNames,cipherNames,macNames,maxMessageLength,I,O)->PkAlgorithmName,KexMethodName,iCipherName,oCipherName,iMacName,oMacName - make it a state machine so can pass in-transit messages to client
      i:cipher+mac+seq+,receiveMessage(maxSize)->body
      o:cipher+mac+seq+io::OStream,sendMessage(body)
        x encodeMessage
	x decodeMessage
	x Cypher:
	x MessageAuthenticator

    - authentication via public key only:
      rfc4252 send SSH_MSG_USERAUTH_REQUEST
      - includes public key
      - whole message is signed:
        - uses private key
	- pk algorithm specific
      - is rsa mandatory if so implement it only
        - ssh-dss is required but need ssh-rsa as in practice will often
	  only have it
	- choose pk algs based on key type, perhaps private key is carried
	  in alg rather than separate
      - is pk algorithm used for anything else? host check? almost certainly
        - need sign() and checkSignature() e.g.
	  Signature: std::vector<uint8_t>
	  xju::crypt::sig::Verifier
	    checkSignature(uint8_t const* x,size_t len,
	                   Signature const& signature)
          xju::crypt::sig::Signer
	    sign(uint8_t const* x,size_t len)->Signature
	      - sign x
	  xju::crypt::sig::signers::RSASigner(privatekey) : Signer
	  xju::crypt::sig::verifiers::RSAVerifier(publickey) : Verifier
	  loadOpenSSHRsaPrivateKey(std::string keyFileContent)->pk::RSASigner()
	  loadOpenSSHRsaPublicKey(std::string keyFileContent)->pk::RSAVerifier()
        for RSA use gcrypt gcry_sexp_build etc like libssh2 libgcrypt.c
	
    tests: echo "fred ran"
           sleep 3 ... timeout
	   /bin/sh -c cat > fred.txt
	   cat fred.txt

    - efficiencies:
       - RefIBuf
       - HashOBuf<Hasher>
       
- example https app:
  - login -> session = process running as that user getpwnam_r,setuid
    getgrnam_r can check user is member of group    
  - simple page to show real uid, gid, umask, pcap
  

- xju::Mutex,Lock,Condition
  x use c++ std::mutex, std::unique_lock<std::mutex>, std::condition_variable
  - provide std-style wait_until, wait_for
  - test wait_until(xju::steadyEternity) ...BROKEN
    - fix is easy - explicit test for xju::steadyEternity
    x same fix needed for io::select, io::poll

x test-Array copy/move/list v noexcept/except

- Mutex constexpr

- snmp NoSuchObject,NoSuchInstance oid is redundant (twice?) (email)

- what to do about operator<<(std::ostream& s,X) noexcept
  ... when s could throw?

- xju::test:
  x top-side
  - top-side async wrapper:
    - deadline always
    - .result()?
  - stub generator
  - free function support (function pointers)
  - is calls() actually const?
  
snmp/README.txt stuff

xju/http http1.1 - rfc7230, rfc7231
  x %-encoded handling... should we decode/encode anything? e.g.
    encode xju::path::AbsPath when formatting xju::http::RequestTarget? In
    which case should we decode when parsing request line? But if
    encoding/decoding do we always do utf-8? Or do we leave it entirely to
    application? I think leave entirely to application.
    x actually decode/encode is better:
      x uri level: all, but only encode disallowed chars for each field type
  - timeout exceptions come from istream exception passed through untouched
    REVISIT: exceptions in general v istream, ostream, adapt? pass through?
             how to specicify?
  - std::bad_alloc for out-of-memory
  - all other exceptions are "mal-formed", with specific exceptions where
    rfc7230 calls for specific action by client/server
  x parseRequestLine(istream,max) -> (method,target,http-version)
    x readThrough(istream,"\r\n",max) then parse and decode components
    x parseRequestTarget
      x code
      x test decoding
      x test 4 variants
      x test errors
      ~ normalise path e.g. a/b/ same result as a/b? No, we can't
        interpret path in general; can only really normalise if have
	whole uri
  x parseStatusLine(istream,max) -> (http-version,status-code,reason)
  x parseHeaders(istream,max) -> headers
  x copyBody(istream,size) -> body
  x copyUnboundedBody(istream,maxSize) -> body   // to eof
  x copyChunk(istream,maxSize) -> (data, ext)
      x no data means last chunk
  ~ copyTrailers(istream,maxSize) -> trailers
      x can use parseHeaders? Yes.
  - parseRequest(istream,maxRequestLine,maxHeaders,maxBody,maxExt) ->
      (method,target,http-version,headers,body)
      throw( specific exceptions for crazy rules)
      -- applies all crazy rules, de-chunks...
      - maybe such a function is not valuable; might be better programming
        applications at the lower level?
  - parseResponse(istream,requestMethod,requestTarget,requestHeaders,maxResponseSize) ->
      (http-version,status-code,reason,headers,body)
      throw( specific exceptions for crazy rules)
      -- applies all crazy rules including validation, de-chunks
      - even this one is dodgy? response might be out of order? what do rfcs
        have to say about concurrent requests?
      - std::string readThrough(istream,term,max) throw(TooBig)
         - read to and including first occurrance of term
         - resulting string ends with term
         - can headers ever have embedded (escaped) CRLF? NO.

      x cont is '[ \t]*(^CRLF)*CRLF', join parts with ' '
  - transfer encoding:
    - none unless chunked; to support chunked maybe do
      class ChunkedResponseWriter {
        ChunkedResponse(std::ostream& o,
                        StatusLine const& o,
	  	        std::vector<TransferEncoding> encodings, //excl chunked
		        Headers headers) throw(
          InvalidHeaders, //see 3.3.1, 3.3.2
	  std::exception); //e.g. send failed
	  //note must end with empty chunk; each chunk will flush o
	  void sendChunk(Chunk const& chunk) throw(std::exception);
	  ~ChunkedResponse() noexcept;
      };
      ... and similar ChunkedRequestWriter/Reader.
      
  - deflate
    deflateInit
    deflateSetHeader
    n x deflate
    deflateEnd
    ... only need to support on client side and only to inflate; in most
    cases only need to deflate once completely read. Or feed chunks
    in and save inflated to file?
    - but would be nice to keep pre-loaded deflated static stuff (html, js,
      css) deflated in memory
      
  - ostream
    - encodeRequestLine(ostream,method,target,http-version)
    - encodeStatusLine(ostream,http-version,status-code,reason)
    - encodeHeaders(ostream,headers)
    - encodeBody(ostream,headers,body)
    - encodeChunk(ostream,data,ext)
    - encodeLastChunk(ostream,ext,trailers)
    - encodeResponse(ostream,http-version,status-code,reason,headers,body)
    - encodeResponse(ostream,http-version,status-code,reason,headers,body)

  
http new versions
web sockets
  
- bring hcp parser generics back into xju, leaving behind c++ specifics

Int,Float add operator* operator/
Float add math functions exp, sqrt, log, floor, ceiling etc

- Tagged<string> template specialisation add startsWith and endsWith?

test-format add format::octal tests for int, long, long long

x add AbsFile and AbsDir typedefs in xju::path.hh and
x use them in xju::file::* ... and in xju::io::*

- add hcp::path::makeRelative

- way to get string-to-Float<Tag,float,E> by calling stringToFloat
  and string-to-Float<Tag,double,E> by calling stringToDouble

- io
  - add stat(dir),ls

x Thread
  - optional stack size as percent of default to be more cross-platform?
  - optional rt prio, or prio value? (might be better to create a RTThread
    class?)
  
x get rid of xju::Shared, use std::shared_ptr

io::Input
io::Output
  x pure interfaces
  x pair<std::set<ref<Input>>,std::set<ref<Output>>> 
      io::select(std::set<ref<Input>>,std::set<ref<Output>>,Time until)
  x close on exec
  x other fd and socket options? eg udp Don't Fragment, use constructed objects
  x dup2, perhaps:
    IStream::useAsStdin, OStream::useAsStdout, OStream::useAsStderr

- io:
  - poll
  - document poll v HUP in xju::pipe()
  
  x DirectoryObserver
  
  x break up io.hcp into io/xxx with aggregation like snmp.hh
  x pipe()
  - SocketPair, like pipe
  - UnixListener,UnixSocket - like TCPListener,TCPSocket
  - MessageQueue (linux allows select)
  - Ethernet
  - istreambuf for IStream (maybe rename that to InputStream)
  - ostreambuf for OStream
  
- ip:
  / TCPListener : Input
  / TCPSocket : IStream,OStream
  x UDPSocket
  - UDPSocketErrorQueue
    - better name?
    - implement and test
      
  - TLSSocket
    - give listener SNI info and whether to request cert for each server it
      supports?
    - generate test ca cert and derived cert
    - find a kept-up-to-date list of cyphers and adjust example, defaults
      to match... or at least mention that place in comments
    - alt might be a Crypter that handles multiple sockets, with the
      Crypter having a run method?
      TLSSocket(TCPListener,TLSCrypto&);
        ssl = SSL_new(ctx);
        SSL_set_bio(p->ssl, p->rbio, p->wbio);
      TLSSocket(TCPSocket,TLSCrypto&);
        ssl = SSL_new(ctx);
        SSL_set_bio(p->ssl, p->rbio, p->wbio);
        SSL_set_connect_state(p->ssl);
      each direction is like a byte stream e.g. write:
        SSL_set_fd can set a non-blocking fd
	SSL_connect/SSL_accept then becomes non-blocking, returning
	  SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE to indicate
	  what to select for before calling SSL_connect again
        SSL_read_ex, SSL_write_ex, SSL_shutdown too

        SSL_shutdown (but not after error)
	SSL_read() will indicate the end of the peer data (i.e. peer shutdown)
	by returning <= 0 and SSL_get_error() returning SSL_ERROR_ZERO_RETURN.

        SSL_get_peer_certificate
	SSL_get_verify_result

        TLSSocket
          TLSSocket(TCPSocket,TLSCrypto&,size_t bufferSize=1472);
	    SSL_new (std::unique_ptr?)
	    SSL_set_fd (does not take ownership)
	    SSL_connect
	    SSL_do_handshake
            SSL_get_peer_certificate
	    SSL_get_verify_result

          TLSSocket(TCPListener,TLSCrypto&,size_t bufferSize=1472);
	    SSL_new
	    SSL_set_verify with SSL_VERIFY_PEER
	    SSL_set_fd
	    SSL_accept
	    SSL_do_handshake
            SSL_get_peer_certificate
	    SSL_get_verify_result

          xju::Optional<std::pair<Cert,bool> > peerCert() const noexcept;
	  
          void close()
	    SSL_shutdown
	    SSL_read
	  
          ~TLSSocket()
	    if (!SSL_get_error() has returned SSL_ERROR_SYSCALL or
	        SSL_ERROR_SSL)
	    try{
	      close();
	    }
	    catch(xju::Exception const&)
	    {
	    }
	    SSL_free

          std::deque<uint8_t> inbound_;
	  std::deque<uint8_t> outbound_;
	  decltype(xju::pipe(true,true)) input_;
	  decltype(xju::pipe(true,true)) output_;
	  std::unique_ptr<SSL,xxx> ssl_;
	  TCPSocket socket_;
        crypto would do:
	  readable: socket_ if !inbound.full() +
	            output_.first.get() if !outbound.full()
	  writable: socket_ if !outbound.empty() +
	            output_.second.get() if !inbound.empty()
	  if (socket_.readable()){
	    n=SSL_read(

      - both allow access to other end cert and its validity
    - admin:
      - create 2048 bit RSA private key
        openssl genrsa -out my.key 2048
	... gives PEM format RSA key
      - create self-signed certificate:
        openssl req -new -x509 -days 365 -key my.key -out my.crt \
        -subj "/C=AU/L=Brisbane/O=xjutv/CN=xjutv"
        (could also give -extfile to add alternates e.g. wildcards)
        ... produces PEM format cert.
      - suite selection by:
        cipher keyword (essentially on AES,AESGCM) and/or
	key exchange keyword (various, does not seem much difference)
	authentication keyword (certs with RSA keys = aRSA)
	digest alrgorithm (SHA,SHA1,SHA256,SHA384)
	... but group keyword HIGH selects possibly a suitable bunch and
	is probably appropriate for an example... but allow it to be set.
        -> string param to crypto
    - certs see x509 (7ssl) and PEM_read_PrivateKey PEM_read_bio_X509
      PEM can contain multiple items of different type, but there
      is no standard for the order where there are multiple certificates.
      parsePEM() -> std::vector<tuple<Comments,TypeName,std::string>
        - or can have parser recognize some but not all
        - parses all items in file
	- then parsePEMPrivateKey -> encrypted or not?, parsePEMCertificate etc
	- note e.g. RSA private key has extra info - what is format exactly?
	- that is just for encypted i.e. password protected key? if so ignore?
      ... then can have PrivateKey(std::vector<uint8_t> const& der),
      Certificate(std::vector<uint8_t> const& der)
      
        
  x udp DSCP via IP_TOS option (per packet)
  x udp receieve drops via SO_RXQ_OVFL socket option (see socket(7)),
    provide read-only counter
  
  - add ipv6 support
  - maybe an abstract class hierarchy
      Socket
        IPSocket
	  TCPSocket
          TCPListener
	  UDPSocket
      ... to capture socket options at different levels?

  - istream implementation with movable deadline
  - ostream implementation with movable deadline
  
- make syscall turn ENOMEM into std::bad_alloc
- move xju::SyscallFailed to SyscallFailed.hh

~ move eg unistd functions into eg xju::unistd:: to allow higher level implementations (eg see pipe)? No, pretty much no clashes



gcc 5.2.0:

  504  xzcat gmp-6.0.0a.tar.xz | tar xf -
  505  xzcat mpfr-3.1.3.tar.xz | tar xf -
  508  gunzip -c mpc-1.0.3.tar.gz | tar xf -
  514  cd gmp-6.0.0
  515  ./configure --prefix=/home/xju/gcc-5.2.0-run
  516  make && make install
  517  make check
  521  cd ../mpfr-3.1.3
  524  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  525  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  526  cd ../mpc-1.0.3
  528  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  529  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  530  cd ../gcc-5.2.0
  533  sudo aptitude install zip
  531  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run -with-mpc=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run --disable-multilib
  536  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
