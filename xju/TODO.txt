snmp/README.txt stuff

Int,Float add operator* operator/
Float add math functions exp, sqrt, log, floor, ceiling etc

test-format add format::octal tests for int, long, long long

add AbsFile and AbsDir typedefs in xju::path.hh and use them in xju::file::*
... and in xju::io::*

* mkdir gets wrong perms?
add xju::file::rm,rmdir,stat,stat(dir),ls

x Thread
x Mutex,Lock
- Condition

io::Input
io::Output
  x pure interfaces
  x pair<std::set<ref<Input>>,std::set<ref<Output>>> 
      io::select(std::set<ref<Input>>,std::set<ref<Output>>,Time until)
  x close on exec
  x other fd and socket options? eg udp Don't Fragment, use constructed objects
  x dup2, perhaps:
    IStream::useAsStdin, OStream::useAsStdout, OStream::useAsStderr

- io:
  x FileObserver
  - FileIStream
  - FileOStream
  - FileIOStream
  - TCPListener
  - TCPSocket
      - IStream& input()
      - OStream& output()
  - UDPSocket
      IQueue& input();
        - is a Input
        - size_t deque(void* message, size_t bytes, Time deadline);
      OQueue& output();
        - void enque(void const* message, size_t bytes, Time deadline);
        - is a Output
  x break up io.hcp into io/xxx with aggregation like snmp.hh
  x pipe()
  - SocketPair
      - unique_ptr<IStream> input_;
      - unique_ptr<OStream> output_;
  - UnixListener,UnixSocket - like TCPListener,TCPSocket
  - MessageQueue (linux allows select)
      IQueue& input();
      OQueue& input();
x test-pipe.cc:
  x only tests creation
x test-io.cc:
  x use Pipe to test read/write
    x read already available
    x read no timeout
    x read timeout
    x close before timeout
    x write timeout
  x use multiple pipes to test select
- make syscall turn ENOMEM into std::bad_alloc
- move eg unistd functions into eg xju::unistd:: to allow higher level implementations (eg see pipe)?
- move xju::SyscallFailed to SyscallFailed.hh

Subprocess
  x start function object,
  x optional stop function object (pass pid) - default kill 9
  x exit status
  x test scenarios
    x process output before destroy -> wait exit
    x exception processing -> kill
    x 1000 iterations of wait-till-stdout-closed

unit testing
  generic stub that captures calls, so can do test like:
    Stub<Y> y;
    X x(y);
    auto call = ut.call(x,&X::f,3,2); //better to use lambda?
    stub.calls_.awaitCall(y,&Y::g,std::chrono::seconds(3))->validateParams(3)->return_(6);
    call.awaitResult(std::chrono::seconds(3))->verify(3*2-2);


gcc 5.2.0:

  504  xzcat gmp-6.0.0a.tar.xz | tar xf -
  505  xzcat mpfr-3.1.3.tar.xz | tar xf -
  508  gunzip -c mpc-1.0.3.tar.gz | tar xf -
  514  cd gmp-6.0.0
  515  ./configure --prefix=/home/xju/gcc-5.2.0-run
  516  make && make install
  517  make check
  521  cd ../mpfr-3.1.3
  524  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  525  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  526  cd ../mpc-1.0.3
  528  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  529  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  530  cd ../gcc-5.2.0
  533  sudo aptitude install zip
  531  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run -with-mpc=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run --disable-multilib
  536  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
