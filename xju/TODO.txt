- what to do about operator<<(std::ostream& s,X) noexcept
  ... when s could throw?

- xju::json
  true
  false
  null
  object
  
- extract xju::seq_less from xju::json::Array::lessThan

- use std::chrono::system_clock::timepoint instead of xju::Time

snmp/README.txt stuff

Int,Float add operator* operator/
Float add math functions exp, sqrt, log, floor, ceiling etc

- Tagged<string> somehow add startsWith and endsWith?

test-format add format::octal tests for int, long, long long

- add AbsFile and AbsDir typedefs in xju::path.hh and use them in xju::file::*
... and in xju::io::*

- add hcp::path::makeRelative

- way to get string-to-Float<Tag,float,E> by calling stringToFloat
  and string-to-Float<Tag,double,E> by calling stringToDouble

* mkdir gets wrong perms?
add xju::file::rm,rmdir,stat,stat(dir),ls

x Thread
  - optional stack size as percent of default to be more cross-platform?
  - optional rt prio, or prio value? (might be better to create a RTThread
    class?)
  
x Mutex,Lock
- Condition
  x draft
  - test
- delete xju::mt

- xju::Microseconds -> std::chrono::microseconds

- get rid of xju::Shared, use std::shared_ptr

io::Input
io::Output
  x pure interfaces
  x pair<std::set<ref<Input>>,std::set<ref<Output>>> 
      io::select(std::set<ref<Input>>,std::set<ref<Output>>,Time until)
  x close on exec
  x other fd and socket options? eg udp Don't Fragment, use constructed objects
  x dup2, perhaps:
    IStream::useAsStdin, OStream::useAsStdout, OStream::useAsStderr

- io:
  x FileObserver
  - FileIStream
  - FileOStream
  - FileIOStream
  
  x break up io.hcp into io/xxx with aggregation like snmp.hh
  x pipe()
  - SocketPair, like pipe
  - UnixListener,UnixSocket - like TCPListener,TCPSocket
  - MessageQueue (linux allows select)

- ip:
  / TCPListener : Input
  / TCPSocket : IStream,OStream
  x UDPSocket
  - TLSSocket
    - use pipe+TCPSocket+thread to "run"
  - add ipv6 support
  - maybe an abstract class hierarchy
      Socket
        IPSocket
	  TCPSocket
          TCPListener
	  UDPSocket
      ... to capture socket options at different levels?
      
- make syscall turn ENOMEM into std::bad_alloc
- move xju::SyscallFailed to SyscallFailed.hh

~ move eg unistd functions into eg xju::unistd:: to allow higher level implementations (eg see pipe)? No, pretty much no clashes

x Subprocess
  x start function object,
  x optional stop function object (pass pid) - default kill 9
  x exit status
  x test scenarios
    x process output before destroy -> wait exit
    x exception processing -> kill
    x 1000 iterations of wait-till-stdout-closed

unit testing
  generic stub that captures calls, so can do test like:
    Stub<Y> y;
    X x(y);
    auto call = ut.call(x,&X::f,3,2); //better to use lambda?
    stub.calls_.awaitCall(y,&Y::g,std::chrono::seconds(3))->validateParams(3)->return_(6);
    call.awaitResult(std::chrono::seconds(3))->verify(3*2-2);


gcc 5.2.0:

  504  xzcat gmp-6.0.0a.tar.xz | tar xf -
  505  xzcat mpfr-3.1.3.tar.xz | tar xf -
  508  gunzip -c mpc-1.0.3.tar.gz | tar xf -
  514  cd gmp-6.0.0
  515  ./configure --prefix=/home/xju/gcc-5.2.0-run
  516  make && make install
  517  make check
  521  cd ../mpfr-3.1.3
  524  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  525  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  526  cd ../mpc-1.0.3
  528  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  529  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  530  cd ../gcc-5.2.0
  533  sudo aptitude install zip
  531  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run -with-mpc=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run --disable-multilib
  536  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
