- xju::Mutex,Lock,Condition
  x use c++ std::mutex, std::unique_lock<std::mutex>, std::condition_variable
  - provide std-style wait_until, wait_for
  - test wait_until(xju::steadyEternity) ...BROKEN
    - fix is easy - explicit test for xju::steadyEternity
    - same fix needed for io::select
    
- Mutex constexpr

- snmp NoSuchObject,NoSuchInstance oid is redundant (twice?) (email)

- what to do about operator<<(std::ostream& s,X) noexcept
  ... when s could throw?

- xju::test:
  x top-side
  - top-side async wrapper:
    - deadline always
    - .result()?
  - stub generator
  - free function support (function pointers)
  - is calls() actually const?
  
snmp/README.txt stuff

xju/http http1.1 - rfc7230, rfc7231
  - timeout exceptions come from istream exception passed through untouched
  - std::bad_alloc for out-of-memory
  - all other exceptions are "mal-formed", with specific exceptions where
    rfc7230 calls for specific action by client/server
  - parseRequestLine(istream,max) -> (method,target,http-version)
    -readThrough(istream,"\r\n",max) then parse and decode components
    
  - parseStatusLine(istream,max) -> (http-version,status-code,reason)
  - parseHeaders(istream,max) -> headers
  - copyBody(size) -> body
  - copyUnboundedBody(maxSize) -> body   // to eof
  - copyChunk(maxSize,maxExt,maxTrailerSize) -> (data, ext, trailers)
      - no data means last chunk
  - parseRequest(istream,maxRequestLine,maxHeaders,maxBody,maxExt) ->
      (method,target,http-version,headers,body)
      throw( specific exceptions for crazy rules)
      -- applies all crazy rules, de-chunks
  - parseResponse(istream,requestMethod,requestTarget,requestHeaders,maxResponseLine,maxHeaders,maxBody) ->
      (http-version,status-code,reason,headers,body)
      throw( specific exceptions for crazy rules)
      -- applies all crazy rules including validation, de-chunks
      
      - std::string readThrough(istream,term,max) throw(TooBig)
         - read to and including first occurrance of term
         - resulting string ends with term
         - can headers ever have embedded (escaped) CRLF? NO.

      - cont is '[ \t]*(^CRLF)*CRLF', join parts with ' '
      
  - ostream
    - encodeRequestLine(ostream,method,target,http-version)
    - encodeStatusLine(ostream,http-version,status-code,reason)
    - encodeHeaders(ostream,headers)
    - encodeBody(ostream,headers,body)
    - encodeChunk(ostream,data,ext)
    - encodeLastChunk(ostream,ext,trailers)
    - encodeResponse(ostream,http-version,status-code,reason,headers,body)
    - encodeResponse(ostream,http-version,status-code,reason,headers,body)

  
http new versions
web sockets
  

Int,Float add operator* operator/
Float add math functions exp, sqrt, log, floor, ceiling etc

- Tagged<string> template specialisation add startsWith and endsWith?

test-format add format::octal tests for int, long, long long

x add AbsFile and AbsDir typedefs in xju::path.hh and
x use them in xju::file::* ... and in xju::io::*

- add hcp::path::makeRelative

- way to get string-to-Float<Tag,float,E> by calling stringToFloat
  and string-to-Float<Tag,double,E> by calling stringToDouble

- io
  - add stat(dir),ls

x Thread
  - optional stack size as percent of default to be more cross-platform?
  - optional rt prio, or prio value? (might be better to create a RTThread
    class?)
  
x get rid of xju::Shared, use std::shared_ptr

io::Input
io::Output
  x pure interfaces
  x pair<std::set<ref<Input>>,std::set<ref<Output>>> 
      io::select(std::set<ref<Input>>,std::set<ref<Output>>,Time until)
  x close on exec
  x other fd and socket options? eg udp Don't Fragment, use constructed objects
  x dup2, perhaps:
    IStream::useAsStdin, OStream::useAsStdout, OStream::useAsStderr

- io:
  - DirectoryObserver
  
  x break up io.hcp into io/xxx with aggregation like snmp.hh
  x pipe()
  - SocketPair, like pipe
  - UnixListener,UnixSocket - like TCPListener,TCPSocket
  - MessageQueue (linux allows select)
  - Ethernet
  
- ip:
  / TCPListener : Input
  / TCPSocket : IStream,OStream
  x UDPSocket
  - TLSSocket
    - use pipe+TCPSocket+thread to "run"?

  x udp DSCP via IP_TOS option (per packet)
  x udp receieve drops via SO_RXQ_OVFL socket option (see socket(7)),
    provide read-only counter
  
  - add ipv6 support
  - maybe an abstract class hierarchy
      Socket
        IPSocket
	  TCPSocket
          TCPListener
	  UDPSocket
      ... to capture socket options at different levels?

  - istream implementation with movable deadline
  - ostream implementation with movable deadline
  
- make syscall turn ENOMEM into std::bad_alloc
- move xju::SyscallFailed to SyscallFailed.hh

~ move eg unistd functions into eg xju::unistd:: to allow higher level implementations (eg see pipe)? No, pretty much no clashes



gcc 5.2.0:

  504  xzcat gmp-6.0.0a.tar.xz | tar xf -
  505  xzcat mpfr-3.1.3.tar.xz | tar xf -
  508  gunzip -c mpc-1.0.3.tar.gz | tar xf -
  514  cd gmp-6.0.0
  515  ./configure --prefix=/home/xju/gcc-5.2.0-run
  516  make && make install
  517  make check
  521  cd ../mpfr-3.1.3
  524  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  525  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  526  cd ../mpc-1.0.3
  528  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run
  529  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
  530  cd ../gcc-5.2.0
  533  sudo aptitude install zip
  531  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib ./configure --with-gmp=/home/xju/gcc-5.2.0-run --with-mpfr=/home/xju/gcc-5.2.0-run -with-mpc=/home/xju/gcc-5.2.0-run prefix=/home/xju/gcc-5.2.0-run --disable-multilib
  536  LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make && LD_LIBRARY_PATH=/home/xju/gcc-5.2.0-run/lib make install
