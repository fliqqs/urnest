odin is good but has some limitations, eg:
  scalability - gets bogged down with 15000 C++ files across many
                directories with many different -I sets
  terse error messages
  can't pass list directly as tool input
  lack of typed-list (eg list<cxx> rather than just list<object>)
  won't work on windows native
  directories are files (makes no sense)
  surprising directory dependency handling
  no "tree" handling
  difficult to copy many generated files into non-cache directory

... and I can't understand the internals (it is written in C with
no commentary and very short variable names etc), so I can't improve
it, extend it or fix it.

So I'd like to re-write it, more simply, in C++, in such a way that
it would be easy for someone else to understand how it worked.

multi-tool interface:
  xo - updates specified targets
  xocp - copies specified target to specified file
  xotest - tests whether specified target is up-to-date
  xoredo - mark specified target for redo
  xodpath - find path to dependency
  xodeptree - show dependency tree
  xodepend - show source dependencies without tree
    - use separate server SOCKETS for each to avoid the odin complication
      of extended syntax on client


- use bitmaps to detect cycles when doing updates
- drop pre-allocated filenames, ie can get filename without being able to 
  build file
- intern lots of things for scalability, eg paramlist
- write dgs in C++ for code-readability/debugability
- don't worry too much about stat efficiency because at large scale
  will always use external "notify"; note that can stat by index
  until dir itself changes (seekdir/telldir)
- so key for scalability is traversal to source from /?
- perhaps use an incremental parsing approach so that we can mark
  path non-exist at earliest opportunity? Is that compatible with subsequent
  ..? Probably yes.
- have a single global FsDir derivation that represents / 
  update method:
  - note a parsed Odinfile would have maps:
     real-name : CopyOut(expr || here-doc)
     vir-name : Equiv(expr || here-doc || string)
     and a list of nested (Nested deriv)
  - so looking up a name would be:
    - update dirlist (FsDirList deriv) => set<DirName> set<FileName>
    - update parsed Odinfile (Odinfile deriv) + look for name there
      (including in nested)
      - careful when a name changes from expr <-> here-doc and careful
        when name is removed
    - otherwise name is a source file or dir (according to dirlist)
      so find it/replace it/create it
